#include "parser.hpp"
#include <iostream>

 leaf::parsing::instance::resettable::resettable(instance& ref): m_ref(ref)
{
    m_contents = ref.m_contents;
    m_file = ref.m_file;
    m_line = ref.m_line;
    m_column = ref.m_column;
    m_offset = ref.m_offset;
}
void leaf::parsing::instance::resettable::reset()
{
    m_ref.m_contents   = m_contents;
    m_ref.m_file       = m_file;
    m_ref.m_line       = m_line;
    m_ref.m_column     = m_column;
    m_ref.m_offset     = m_offset;
}
bool leaf::parsing::instance::next()
{
    if (m_contents.length() > m_offset)
    {
        char c = m_contents[m_offset];
        switch (c)
        {
            case '\r':
            case '\t':
            case ' ':
            default: m_column++; m_offset++; break;
            case '\n': m_line++; m_column = 1; m_offset++; break;
        }
        return true;
    }
    else
    {
        return false;
    }
}
char leaf::parsing::instance::current()
{
    if (m_contents.length() > m_offset)
    {
        return m_contents[m_offset];
    }
    else
    {
        return '\0';
    }
}
std::optional<size_t> leaf::parsing::instance::token_integer_binary(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "0b";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count4 = 0;
    while (current() != '\0')
    {
        if (('0' <= current() && current() <= '9'))
        {
            count4++;
            next();
            continue;
        }
        std::optional<size_t> res5 = token_underscore(depth + 1);
        if (res5.has_value())
        {
            count4++;
            for (size_t i = 0; i < res5; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count4 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable1 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable1;
}
std::optional<size_t> leaf::parsing::instance::token_integer_hex(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "0x";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count4 = 0;
    while (current() != '\0')
    {
        if (('0' <= current() && current() <= '9'))
        {
            count4++;
            next();
            continue;
        }
        std::optional<size_t> res5 = token_underscore(depth + 1);
        if (res5.has_value())
        {
            count4++;
            for (size_t i = 0; i < res5; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count4 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable2 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable2;
}
std::optional<size_t> leaf::parsing::instance::token_integer_unsigned(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0')
    {
        if (('0' <= current() && current() <= '9'))
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable3 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable3;
}
std::optional<size_t> leaf::parsing::instance::token_integer_signed_negative(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '-')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count3 = 0;
    while (current() != '\0')
    {
        if (('0' <= current() && current() <= '9'))
        {
            count3++;
            next();
            continue;
        }
        break;
    }
    if (count3 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable4 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable4;
}
std::optional<size_t> leaf::parsing::instance::token_integer_signed_positive(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '+')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count3 = 0;
    while (current() != '\0')
    {
        if (('0' <= current() && current() <= '9'))
        {
            count3++;
            next();
            continue;
        }
        break;
    }
    if (count3 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable5 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable5;
}
std::optional<size_t> leaf::parsing::instance::token_integer(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        std::optional<size_t> res3 = token_integer_signed_positive(depth + 1);
        if (res3.has_value())
        {
            count2++;
            for (size_t i = 0; i < res3; i++)
            {
                next();
            }
            continue;
        }
        std::optional<size_t> res4 = token_integer_signed_negative(depth + 1);
        if (res4.has_value())
        {
            count2++;
            for (size_t i = 0; i < res4; i++)
            {
                next();
            }
            continue;
        }
        std::optional<size_t> res5 = token_integer_unsigned(depth + 1);
        if (res5.has_value())
        {
            count2++;
            for (size_t i = 0; i < res5; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable6 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable6;
}
std::optional<size_t> leaf::parsing::instance::token_scalar(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        std::optional<size_t> res3 = token_integer(depth + 1);
        if (res3.has_value())
        {
            count2++;
            for (size_t i = 0; i < res3; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count4 = 0;
    while (current() != '\0' && count4 < 1)
    {
        if (current() == '.')
        {
            count4++;
            next();
            continue;
        }
        break;
    }
    if (count4 < 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count5 = 0;
    while (current() != '\0' && count5 < 1)
    {
        std::optional<size_t> res6 = token_integer(depth + 1);
        if (res6.has_value())
        {
            count5++;
            for (size_t i = 0; i < res6; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count5 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable7 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable7;
}
std::optional<size_t> leaf::parsing::instance::token_slash(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '/')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable8 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable8;
}
std::optional<size_t> leaf::parsing::instance::token_star(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '*')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable9 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable9;
}
std::optional<size_t> leaf::parsing::instance::token_plus(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '+')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable10 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable10;
}
std::optional<size_t> leaf::parsing::instance::token_minus(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '-')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable11 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable11;
}
std::optional<size_t> leaf::parsing::instance::token_underscore(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '_')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable12 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable12;
}
std::optional<size_t> leaf::parsing::instance::token_true_(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "true";
        if (m_contents.length() - m_offset >= 4 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 4, str3, str3 + 4))
        {
            count2++;
            for (size_t i = 0; i < 4; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable13 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable13;
}
std::optional<size_t> leaf::parsing::instance::token_false_(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "false";
        if (m_contents.length() - m_offset >= 5 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 5, str3, str3 + 5))
        {
            count2++;
            for (size_t i = 0; i < 5; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable14 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable14;
}
std::optional<size_t> leaf::parsing::instance::token_ident(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (('a' <= current() && current() <= 'z'))
        {
            count2++;
            next();
            continue;
        }
        else if (('A' <= current() && current() <= 'Z'))
        {
            count2++;
            next();
            continue;
        }
        std::optional<size_t> res3 = token_underscore(depth + 1);
        if (res3.has_value())
        {
            count2++;
            for (size_t i = 0; i < res3; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count4 = 0;
    while (current() != '\0')
    {
        if (('a' <= current() && current() <= 'z'))
        {
            count4++;
            next();
            continue;
        }
        else if (('A' <= current() && current() <= 'Z'))
        {
            count4++;
            next();
            continue;
        }
        else if (('0' <= current() && current() <= '9'))
        {
            count4++;
            next();
            continue;
        }
        std::optional<size_t> res5 = token_underscore(depth + 1);
        if (res5.has_value())
        {
            count4++;
            for (size_t i = 0; i < res5; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    size_t count6 = 1;
    size_t local_offset7 = 0;
    while (current() != '\0' && count6 > 0)
    {
        if (m_offset >= 1 && m_contents[m_offset - 1] == '-')
        {
            break;
        }
        count6--;
    }
    if (count6 >= 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable15 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable15;
}
std::optional<size_t> leaf::parsing::instance::token_string_formatable_start(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '$')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count3 = 0;
    while (current() != '\0' && count3 < 1)
    {
        if (current() == '\"')
        {
            count3++;
            next();
            continue;
        }
        break;
    }
    if (count3 < 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count4 = 0;
    while (current() != '\0')
    {
        if (current() != '{')
        {
            count4++;
            next();
            continue;
        }
        break;
    }
    size_t count5 = 0;
    while (current() != '\0' && count5 < 1)
    {
        if (current() == '{')
        {
            count5++;
            next();
            continue;
        }
        break;
    }
    if (count5 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable16 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable16;
}
std::optional<size_t> leaf::parsing::instance::token_string_formatable_fake(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '$')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count3 = 0;
    while (current() != '\0' && count3 < 1)
    {
        if (current() == '\"')
        {
            count3++;
            next();
            continue;
        }
        break;
    }
    if (count3 < 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count4 = 0;
    while (current() != '\0')
    {
        std::optional<size_t> res5 = token_string_unescaped_ending(depth + 1);
        if (res5.has_value())
        {
            count4++;
            for (size_t i = 0; i < res5; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    size_t count6 = 0;
    while (current() != '\0' && count6 < 1)
    {
        if (current() == '\"')
        {
            count6++;
            next();
            continue;
        }
        break;
    }
    if (count6 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable17 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable17;
}
std::optional<size_t> leaf::parsing::instance::token_string_formatable_continuation(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '}')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count3 = 0;
    while (current() != '\0')
    {
        if (current() != '{')
        {
            count3++;
            next();
            continue;
        }
        break;
    }
    size_t count4 = 0;
    while (current() != '\0' && count4 < 1)
    {
        if (current() == '{')
        {
            count4++;
            next();
            continue;
        }
        break;
    }
    if (count4 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable18 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable18;
}
std::optional<size_t> leaf::parsing::instance::token_string_formatable_end(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '}')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count3 = 0;
    while (current() != '\0')
    {
        std::optional<size_t> res4 = token_string_unescaped_ending(depth + 1);
        if (res4.has_value())
        {
            count3++;
            for (size_t i = 0; i < res4; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    size_t count5 = 0;
    while (current() != '\0' && count5 < 1)
    {
        if (current() == '\"')
        {
            count5++;
            next();
            continue;
        }
        break;
    }
    if (count5 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable19 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable19;
}
std::optional<size_t> leaf::parsing::instance::token_string_unescaped_ending(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 1;
    size_t local_offset3 = 0;
    while (current() != '\0' && count2 > 0)
    {
        if (m_offset >= 1 && m_contents[m_offset - 1] == '\')
        {
            break;
        }
        count2--;
    }
    if (count2 >= 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count4 = 0;
    while (current() != '\0' && count4 < 1)
    {
        if (current() == '\"')
        {
            count4++;
            next();
            continue;
        }
        break;
    }
    if (count4 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable20 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable20;
}
std::optional<size_t> leaf::parsing::instance::token_string(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '\"')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count3 = 0;
    while (current() != '\0')
    {
        std::optional<size_t> res4 = token_string_unescaped_ending(depth + 1);
        if (res4.has_value())
        {
            count3++;
            for (size_t i = 0; i < res4; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    size_t count5 = 0;
    while (current() != '\0' && count5 < 1)
    {
        if (current() == '\"')
        {
            count5++;
            next();
            continue;
        }
        break;
    }
    if (count5 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable21 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable21;
}
std::optional<size_t> leaf::parsing::instance::token_char_unescaped_ending(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 1;
    size_t local_offset3 = 0;
    while (current() != '\0' && count2 > 0)
    {
        if (m_offset >= 1 && m_contents[m_offset - 1] == '\')
        {
            break;
        }
        count2--;
    }
    if (count2 >= 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count4 = 0;
    while (current() != '\0' && count4 < 1)
    {
        if (current() == '\'')
        {
            count4++;
            next();
            continue;
        }
        break;
    }
    if (count4 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable22 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable22;
}
std::optional<size_t> leaf::parsing::instance::token_char_(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '\'')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    size_t count3 = 0;
    while (current() != '\0')
    {
        std::optional<size_t> res4 = token_char_unescaped_ending(depth + 1);
        if (res4.has_value())
        {
            count3++;
            for (size_t i = 0; i < res4; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    size_t count5 = 0;
    while (current() != '\0' && count5 < 1)
    {
        if (current() == '\'')
        {
            count5++;
            next();
            continue;
        }
        break;
    }
    if (count5 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable23 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable23;
}
std::optional<size_t> leaf::parsing::instance::token__colon(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == ':')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable24 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable24;
}
std::optional<size_t> leaf::parsing::instance::token__comma(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == ',')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable25 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable25;
}
std::optional<size_t> leaf::parsing::instance::token__round_bracket_open(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '(')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable26 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable26;
}
std::optional<size_t> leaf::parsing::instance::token__round_bracket_close(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == ')')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable27 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable27;
}
std::optional<size_t> leaf::parsing::instance::token__square_bracket_open(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '[')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable28 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable28;
}
std::optional<size_t> leaf::parsing::instance::token__square_bracket_close(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == ']')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable29 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable29;
}
std::optional<size_t> leaf::parsing::instance::token__contract(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "contract";
        if (m_contents.length() - m_offset >= 8 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 8, str3, str3 + 8))
        {
            count2++;
            for (size_t i = 0; i < 8; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable30 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable30;
}
std::optional<size_t> leaf::parsing::instance::token__curly_bracket_open(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '{')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable31 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable31;
}
std::optional<size_t> leaf::parsing::instance::token__curly_bracket_close(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '}')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable32 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable32;
}
std::optional<size_t> leaf::parsing::instance::token__semicolon(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == ';')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable33 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable33;
}
std::optional<size_t> leaf::parsing::instance::token__get(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "get";
        if (m_contents.length() - m_offset >= 3 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 3, str3, str3 + 3))
        {
            count2++;
            for (size_t i = 0; i < 3; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable34 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable34;
}
std::optional<size_t> leaf::parsing::instance::token__set(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "set";
        if (m_contents.length() - m_offset >= 3 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 3, str3, str3 + 3))
        {
            count2++;
            for (size_t i = 0; i < 3; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable35 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable35;
}
std::optional<size_t> leaf::parsing::instance::token__operator(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "operator";
        if (m_contents.length() - m_offset >= 8 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 8, str3, str3 + 8))
        {
            count2++;
            for (size_t i = 0; i < 8; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable36 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable36;
}
std::optional<size_t> leaf::parsing::instance::token__less_then_less_then_less_then(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "<<<";
        if (m_contents.length() - m_offset >= 3 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 3, str3, str3 + 3))
        {
            count2++;
            for (size_t i = 0; i < 3; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable37 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable37;
}
std::optional<size_t> leaf::parsing::instance::token__less_then_less_then(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "<<";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable38 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable38;
}
std::optional<size_t> leaf::parsing::instance::token__less_then_equal(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "<=";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable39 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable39;
}
std::optional<size_t> leaf::parsing::instance::token__less_then(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '<')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable40 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable40;
}
std::optional<size_t> leaf::parsing::instance::token__greater_then_greater_then_greater_then(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = ">>>";
        if (m_contents.length() - m_offset >= 3 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 3, str3, str3 + 3))
        {
            count2++;
            for (size_t i = 0; i < 3; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable41 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable41;
}
std::optional<size_t> leaf::parsing::instance::token__greater_then_greater_then(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = ">>";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable42 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable42;
}
std::optional<size_t> leaf::parsing::instance::token__greater_then_equal(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = ">=";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable43 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable43;
}
std::optional<size_t> leaf::parsing::instance::token__greater_then(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '>')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable44 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable44;
}
std::optional<size_t> leaf::parsing::instance::token__vertical_bar_vertical_bar(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "||";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable45 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable45;
}
std::optional<size_t> leaf::parsing::instance::token__vertical_bar(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '|')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable46 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable46;
}
std::optional<size_t> leaf::parsing::instance::token__ampersand_ampersand(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "&&";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable47 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable47;
}
std::optional<size_t> leaf::parsing::instance::token__ampersand(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '&')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable48 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable48;
}
std::optional<size_t> leaf::parsing::instance::token__equal_equal_equal(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "===";
        if (m_contents.length() - m_offset >= 3 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 3, str3, str3 + 3))
        {
            count2++;
            for (size_t i = 0; i < 3; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable49 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable49;
}
std::optional<size_t> leaf::parsing::instance::token__equal_equal(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "==";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable50 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable50;
}
std::optional<size_t> leaf::parsing::instance::token__exclamation_equal(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "!=";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable51 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable51;
}
std::optional<size_t> leaf::parsing::instance::token__circumflex(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '^')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable52 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable52;
}
std::optional<size_t> leaf::parsing::instance::token__exclamation(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '!')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable53 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable53;
}
std::optional<size_t> leaf::parsing::instance::token__tilde(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '~')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable54 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable54;
}
std::optional<size_t> leaf::parsing::instance::token__dot(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '.')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable55 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable55;
}
std::optional<size_t> leaf::parsing::instance::token__minus_greater_then(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "->";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable56 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable56;
}
std::optional<size_t> leaf::parsing::instance::token__equal_greater_then(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "=>";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable57 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable57;
}
std::optional<size_t> leaf::parsing::instance::token__while(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "while";
        if (m_contents.length() - m_offset >= 5 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 5, str3, str3 + 5))
        {
            count2++;
            for (size_t i = 0; i < 5; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable58 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable58;
}
std::optional<size_t> leaf::parsing::instance::token__if(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "if";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable59 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable59;
}
std::optional<size_t> leaf::parsing::instance::token__else(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "else";
        if (m_contents.length() - m_offset >= 4 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 4, str3, str3 + 4))
        {
            count2++;
            for (size_t i = 0; i < 4; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable60 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable60;
}
std::optional<size_t> leaf::parsing::instance::token__for(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "for";
        if (m_contents.length() - m_offset >= 3 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 3, str3, str3 + 3))
        {
            count2++;
            for (size_t i = 0; i < 3; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable61 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable61;
}
std::optional<size_t> leaf::parsing::instance::token__case(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "case";
        if (m_contents.length() - m_offset >= 4 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 4, str3, str3 + 4))
        {
            count2++;
            for (size_t i = 0; i < 4; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable62 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable62;
}
std::optional<size_t> leaf::parsing::instance::token__switch(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "switch";
        if (m_contents.length() - m_offset >= 6 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 6, str3, str3 + 6))
        {
            count2++;
            for (size_t i = 0; i < 6; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable63 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable63;
}
std::optional<size_t> leaf::parsing::instance::token__default(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "default";
        if (m_contents.length() - m_offset >= 7 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 7, str3, str3 + 7))
        {
            count2++;
            for (size_t i = 0; i < 7; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable64 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable64;
}
std::optional<size_t> leaf::parsing::instance::token__eol(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '\n')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable65 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable65;
}
std::optional<size_t> leaf::parsing::instance::token__assembly(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "assembly";
        if (m_contents.length() - m_offset >= 8 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 8, str3, str3 + 8))
        {
            count2++;
            for (size_t i = 0; i < 8; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable66 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable66;
}
std::optional<size_t> leaf::parsing::instance::token__copy(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "copy";
        if (m_contents.length() - m_offset >= 4 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 4, str3, str3 + 4))
        {
            count2++;
            for (size_t i = 0; i < 4; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable67 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable67;
}
std::optional<size_t> leaf::parsing::instance::token__tilde_equal(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "~=";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable68 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable68;
}
std::optional<size_t> leaf::parsing::instance::token__equal(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        if (current() == '=')
        {
            count2++;
            next();
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable69 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable69;
}
std::optional<size_t> leaf::parsing::instance::token__public(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "public";
        if (m_contents.length() - m_offset >= 6 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 6, str3, str3 + 6))
        {
            count2++;
            for (size_t i = 0; i < 6; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable70 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable70;
}
std::optional<size_t> leaf::parsing::instance::token__local(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "local";
        if (m_contents.length() - m_offset >= 5 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 5, str3, str3 + 5))
        {
            count2++;
            for (size_t i = 0; i < 5; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable71 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable71;
}
std::optional<size_t> leaf::parsing::instance::token__derived(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "derived";
        if (m_contents.length() - m_offset >= 7 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 7, str3, str3 + 7))
        {
            count2++;
            for (size_t i = 0; i < 7; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable72 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable72;
}
std::optional<size_t> leaf::parsing::instance::token__private(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "private";
        if (m_contents.length() - m_offset >= 7 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 7, str3, str3 + 7))
        {
            count2++;
            for (size_t i = 0; i < 7; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable73 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable73;
}
std::optional<size_t> leaf::parsing::instance::token__namespace(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "namespace";
        if (m_contents.length() - m_offset >= 9 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 9, str3, str3 + 9))
        {
            count2++;
            for (size_t i = 0; i < 9; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable74 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable74;
}
std::optional<size_t> leaf::parsing::instance::token__implementing(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "implementing";
        if (m_contents.length() - m_offset >= 12 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 12, str3, str3 + 12))
        {
            count2++;
            for (size_t i = 0; i < 12; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable75 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable75;
}
std::optional<size_t> leaf::parsing::instance::token__importing(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "importing";
        if (m_contents.length() - m_offset >= 9 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 9, str3, str3 + 9))
        {
            count2++;
            for (size_t i = 0; i < 9; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable76 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable76;
}
std::optional<size_t> leaf::parsing::instance::token__class(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "class";
        if (m_contents.length() - m_offset >= 5 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 5, str3, str3 + 5))
        {
            count2++;
            for (size_t i = 0; i < 5; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable77 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable77;
}
std::optional<size_t> leaf::parsing::instance::token__sealed(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "sealed";
        if (m_contents.length() - m_offset >= 6 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 6, str3, str3 + 6))
        {
            count2++;
            for (size_t i = 0; i < 6; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable78 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable78;
}
std::optional<size_t> leaf::parsing::instance::token__virtual(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "virtual";
        if (m_contents.length() - m_offset >= 7 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 7, str3, str3 + 7))
        {
            count2++;
            for (size_t i = 0; i < 7; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable79 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable79;
}
std::optional<size_t> leaf::parsing::instance::token__unbound(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "unbound";
        if (m_contents.length() - m_offset >= 7 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 7, str3, str3 + 7))
        {
            count2++;
            for (size_t i = 0; i < 7; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable80 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable80;
}
std::optional<size_t> leaf::parsing::instance::token__inline(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "inline";
        if (m_contents.length() - m_offset >= 6 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 6, str3, str3 + 6))
        {
            count2++;
            for (size_t i = 0; i < 6; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable81 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable81;
}
std::optional<size_t> leaf::parsing::instance::token__delete(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "delete";
        if (m_contents.length() - m_offset >= 6 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 6, str3, str3 + 6))
        {
            count2++;
            for (size_t i = 0; i < 6; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable82 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable82;
}
std::optional<size_t> leaf::parsing::instance::token__conversion(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "conversion";
        if (m_contents.length() - m_offset >= 10 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 10, str3, str3 + 10))
        {
            count2++;
            for (size_t i = 0; i < 10; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable83 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable83;
}
std::optional<size_t> leaf::parsing::instance::token__const(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "const";
        if (m_contents.length() - m_offset >= 5 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 5, str3, str3 + 5))
        {
            count2++;
            for (size_t i = 0; i < 5; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable84 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable84;
}
std::optional<size_t> leaf::parsing::instance::token__using(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "using";
        if (m_contents.length() - m_offset >= 5 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 5, str3, str3 + 5))
        {
            count2++;
            for (size_t i = 0; i < 5; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable85 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable85;
}
std::optional<size_t> leaf::parsing::instance::token__alias(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "alias";
        if (m_contents.length() - m_offset >= 5 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 5, str3, str3 + 5))
        {
            count2++;
            for (size_t i = 0; i < 5; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable86 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable86;
}
std::optional<size_t> leaf::parsing::instance::token__free(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "free";
        if (m_contents.length() - m_offset >= 4 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 4, str3, str3 + 4))
        {
            count2++;
            for (size_t i = 0; i < 4; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable87 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable87;
}
std::optional<size_t> leaf::parsing::instance::token__alloc(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "alloc";
        if (m_contents.length() - m_offset >= 5 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 5, str3, str3 + 5))
        {
            count2++;
            for (size_t i = 0; i < 5; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable88 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable88;
}
std::optional<size_t> leaf::parsing::instance::token__stack(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "stack";
        if (m_contents.length() - m_offset >= 5 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 5, str3, str3 + 5))
        {
            count2++;
            for (size_t i = 0; i < 5; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable89 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable89;
}
std::optional<size_t> leaf::parsing::instance::token__heap(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "heap";
        if (m_contents.length() - m_offset >= 4 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 4, str3, str3 + 4))
        {
            count2++;
            for (size_t i = 0; i < 4; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable90 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable90;
}
std::optional<size_t> leaf::parsing::instance::token__typeof(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "typeof";
        if (m_contents.length() - m_offset >= 6 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 6, str3, str3 + 6))
        {
            count2++;
            for (size_t i = 0; i < 6; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable91 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable91;
}
std::optional<size_t> leaf::parsing::instance::token__nameof(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "nameof";
        if (m_contents.length() - m_offset >= 6 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 6, str3, str3 + 6))
        {
            count2++;
            for (size_t i = 0; i < 6; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable92 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable92;
}
std::optional<size_t> leaf::parsing::instance::token__fqnameof(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "fqnameof";
        if (m_contents.length() - m_offset >= 8 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 8, str3, str3 + 8))
        {
            count2++;
            for (size_t i = 0; i < 8; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable93 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable93;
}
std::optional<size_t> leaf::parsing::instance::token__sizeof(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "sizeof";
        if (m_contents.length() - m_offset >= 6 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 6, str3, str3 + 6))
        {
            count2++;
            for (size_t i = 0; i < 6; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable94 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable94;
}
std::optional<size_t> leaf::parsing::instance::token__colon_colon(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "::";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable95 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable95;
}
std::optional<size_t> leaf::parsing::instance::token__return(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "return";
        if (m_contents.length() - m_offset >= 6 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 6, str3, str3 + 6))
        {
            count2++;
            for (size_t i = 0; i < 6; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable96 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable96;
}
std::optional<size_t> leaf::parsing::instance::token__auto_841(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "<!pragma";
        if (m_contents.length() - m_offset >= 8 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 8, str3, str3 + 8))
        {
            count2++;
            for (size_t i = 0; i < 8; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable97 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable97;
}
std::optional<size_t> leaf::parsing::instance::token__exclamation_greater_then(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "!>";
        if (m_contents.length() - m_offset >= 2 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 2, str3, str3 + 2))
        {
            count2++;
            for (size_t i = 0; i < 2; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable98 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable98;
}
std::optional<size_t> leaf::parsing::instance::token__align(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "align";
        if (m_contents.length() - m_offset >= 5 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 5, str3, str3 + 5))
        {
            count2++;
            for (size_t i = 0; i < 5; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable99 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable99;
}
std::optional<size_t> leaf::parsing::instance::token__size(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "size";
        if (m_contents.length() - m_offset >= 4 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 4, str3, str3 + 4))
        {
            count2++;
            for (size_t i = 0; i < 4; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable100 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable100;
}
std::optional<size_t> leaf::parsing::instance::token__disable(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "disable";
        if (m_contents.length() - m_offset >= 7 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 7, str3, str3 + 7))
        {
            count2++;
            for (size_t i = 0; i < 7; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable101 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable101;
}
std::optional<size_t> leaf::parsing::instance::token__enable(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "enable";
        if (m_contents.length() - m_offset >= 6 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 6, str3, str3 + 6))
        {
            count2++;
            for (size_t i = 0; i < 6; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable102 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable102;
}
std::optional<size_t> leaf::parsing::instance::token__identifier(size_t depth)
{
    resettable resettable1(*this);
    size_t count2 = 0;
    while (current() != '\0' && count2 < 1)
    {
        const char* str3 = "identifier";
        if (m_contents.length() - m_offset >= 10 && std::equal(m_contents.begin() + m_offset, m_contents.begin() + m_offset + 10, str3, str3 + 10))
        {
            count2++;
            for (size_t i = 0; i < 10; i++)
            {
                next();
            }
            continue;
        }
        break;
    }
    if (count2 < 1)
    {
        resettable1.reset();
        return {};
    }
    auto resultVariable103 = m_offset - resettable1.m_offset;
    resettable1.reset();
    return resultVariable103;
}
bool leaf::parsing::instance::m_expor_104(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_arg_item_a>& actual, leaf::parsing::instance::attribute_arg_item_a_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_exp_or(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_exp_or(depth + 1);
    actual->value = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_attribute_arg_item_a(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::attribute_arg_item_a> fake;
    attribute_arg_item_a_state state;
    if (!m_expor_104(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::attribute_arg_item_a> leaf::parsing::instance::p_match_attribute_arg_item_a(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::attribute_arg_item_a>();
    std::shared_ptr<leaf::parsing::instance::attribute_arg_item_a> fake;
    attribute_arg_item_a_state state;
    resettable resettable2(*this);
    if (m_expor_104(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_expor_104(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_ident_colon_expor_105(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_arg_item_b>& actual, leaf::parsing::instance::attribute_arg_item_b_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__colon(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_or(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->name = val6;
    skip();
    auto l8 = token__colon(depth + 1).value();
    for (;l8 != 0; l8--)
    {
        next();
    }
    skip();
    auto val9 = lr_match_exp_or(depth + 1);
    actual->value = val9;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_attribute_arg_item_b(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::attribute_arg_item_b> fake;
    attribute_arg_item_b_state state;
    if (!m_ident_colon_expor_105(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::attribute_arg_item_b> leaf::parsing::instance::p_match_attribute_arg_item_b(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::attribute_arg_item_b>();
    std::shared_ptr<leaf::parsing::instance::attribute_arg_item_b> fake;
    attribute_arg_item_b_state state;
    resettable resettable2(*this);
    if (m_ident_colon_expor_105(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_ident_colon_expor_105(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attributeargitema_106(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_args_a>& actual, leaf::parsing::instance::attribute_args_a_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute_arg_item_a(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute_arg_item_a(depth + 1);
    actual->args.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attributeargitema_107(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_args_a>& actual, leaf::parsing::instance::attribute_args_a_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute_arg_item_a(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute_arg_item_a(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_attributeargitema_108(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_args_a>& actual, leaf::parsing::instance::attribute_args_a_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_attribute_arg_item_a(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_attribute_arg_item_a(depth + 1);
    actual->args.push_back(val6);
    skip();
    return true;
}
bool leaf::parsing::instance::while109_110(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_args_a>& actual, leaf::parsing::instance::attribute_args_a_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attributeargitema_107(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_comma_attributeargitema_108(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}), $ref: attribute-arg-item-a (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attributeargitema_107(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_comma_attributeargitema_108(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}), $ref: attribute-arg-item-a (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attributeargitema_107(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_comma_111(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_args_a>& actual, leaf::parsing::instance::attribute_args_a_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_112(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_args_a>& actual, leaf::parsing::instance::attribute_args_a_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::if113_114(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_args_a>& actual, leaf::parsing::instance::attribute_args_a_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_comma_111(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_comma_112(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_comma_112(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::p_can_attribute_args_a(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::attribute_args_a> fake;
    attribute_args_a_state state;
    if (!m_attributeargitema_106(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while109_110(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if113_114(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::attribute_args_a> leaf::parsing::instance::p_match_attribute_args_a(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::attribute_args_a>();
    std::shared_ptr<leaf::parsing::instance::attribute_args_a> fake;
    attribute_args_a_state state;
    resettable resettable2(*this);
    if (m_attributeargitema_106(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_attributeargitema_106(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (while109_110(true, fake, state, depth + 1))
    {
        resettable3.reset();
        while109_110(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (if113_114(true, fake, state, depth + 1))
    {
        resettable4.reset();
        if113_114(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attributeargitemb_115(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_args_b>& actual, leaf::parsing::instance::attribute_args_b_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute_arg_item_b(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute_arg_item_b(depth + 1);
    actual->args.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attributeargitemb_116(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_args_b>& actual, leaf::parsing::instance::attribute_args_b_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute_arg_item_b(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute_arg_item_b(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_attributeargitemb_117(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_args_b>& actual, leaf::parsing::instance::attribute_args_b_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_attribute_arg_item_b(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_attribute_arg_item_b(depth + 1);
    actual->args.push_back(val6);
    skip();
    return true;
}
bool leaf::parsing::instance::while118_119(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_args_b>& actual, leaf::parsing::instance::attribute_args_b_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attributeargitemb_116(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_comma_attributeargitemb_117(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}), $ref: attribute-arg-item-b (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attributeargitemb_116(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_comma_attributeargitemb_117(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}), $ref: attribute-arg-item-b (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attributeargitemb_116(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_comma_120(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_args_b>& actual, leaf::parsing::instance::attribute_args_b_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_121(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_args_b>& actual, leaf::parsing::instance::attribute_args_b_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::if122_123(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_args_b>& actual, leaf::parsing::instance::attribute_args_b_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_comma_120(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_comma_121(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_comma_121(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::p_can_attribute_args_b(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::attribute_args_b> fake;
    attribute_args_b_state state;
    if (!m_attributeargitemb_115(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while118_119(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if122_123(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::attribute_args_b> leaf::parsing::instance::p_match_attribute_args_b(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::attribute_args_b>();
    std::shared_ptr<leaf::parsing::instance::attribute_args_b> fake;
    attribute_args_b_state state;
    resettable resettable2(*this);
    if (m_attributeargitemb_115(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_attributeargitemb_115(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (while118_119(true, fake, state, depth + 1))
    {
        resettable3.reset();
        while118_119(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (if122_123(true, fake, state, depth + 1))
    {
        resettable4.reset();
        if122_123(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_typematch_124(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_item>& actual, leaf::parsing::instance::attribute_item_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_type_match(depth + 1);
    actual->target_type = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_typematch_roundbracketopen_roundbracketclose_125(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_item>& actual, leaf::parsing::instance::attribute_item_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_close(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = p_match_type_match(depth + 1);
    actual->target_type = val6;
    skip();
    auto l8 = token__round_bracket_open(depth + 1).value();
    for (;l8 != 0; l8--)
    {
        next();
    }
    skip();
    auto l10 = token__round_bracket_close(depth + 1).value();
    for (;l10 != 0; l10--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_typematch_roundbracketopen_attributeargsa_attributeargsb_roundbracketclose_126(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_item>& actual, leaf::parsing::instance::attribute_item_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_attribute_args_a(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_attribute_args_b(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_close(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = p_match_type_match(depth + 1);
    actual->target_type = val6;
    skip();
    auto l8 = token__round_bracket_open(depth + 1).value();
    for (;l8 != 0; l8--)
    {
        next();
    }
    skip();
    auto val9 = p_match_attribute_args_a(depth + 1);
    actual->args = val9;
    skip();
    p_match_attribute_args_b(depth + 1);
    skip();
    auto l12 = token__round_bracket_close(depth + 1).value();
    for (;l12 != 0; l12--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_typematch_roundbracketopen_attributeargsa_roundbracketclose_127(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_item>& actual, leaf::parsing::instance::attribute_item_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_attribute_args_a(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_close(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = p_match_type_match(depth + 1);
    actual->target_type = val6;
    skip();
    auto l8 = token__round_bracket_open(depth + 1).value();
    for (;l8 != 0; l8--)
    {
        next();
    }
    skip();
    auto val9 = p_match_attribute_args_a(depth + 1);
    actual->args = val9;
    skip();
    auto l11 = token__round_bracket_close(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_typematch_roundbracketopen_attributeargsb_roundbracketclose_128(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_item>& actual, leaf::parsing::instance::attribute_item_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_attribute_args_b(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_close(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = p_match_type_match(depth + 1);
    actual->target_type = val6;
    skip();
    auto l8 = token__round_bracket_open(depth + 1).value();
    for (;l8 != 0; l8--)
    {
        next();
    }
    skip();
    auto val9 = p_match_attribute_args_b(depth + 1);
    actual->args = val9;
    skip();
    auto l11 = token__round_bracket_close(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives129(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute_item>& actual, leaf::parsing::instance::attribute_item_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_typematch_124(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_typematch_124(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_typematch_roundbracketopen_roundbracketclose_125(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_typematch_roundbracketopen_roundbracketclose_125(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_typematch_roundbracketopen_attributeargsa_attributeargsb_roundbracketclose_126(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_typematch_roundbracketopen_attributeargsa_attributeargsb_roundbracketclose_126(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_typematch_roundbracketopen_attributeargsa_roundbracketclose_127(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_typematch_roundbracketopen_attributeargsa_roundbracketclose_127(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_typematch_roundbracketopen_attributeargsb_roundbracketclose_128(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_typematch_roundbracketopen_attributeargsb_roundbracketclose_128(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_attribute_item(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::attribute_item> fake;
    attribute_item_state state;
    if (!alternatives129(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::attribute_item> leaf::parsing::instance::p_match_attribute_item(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::attribute_item>();
    std::shared_ptr<leaf::parsing::instance::attribute_item> fake;
    attribute_item_state state;
    resettable resettable2(*this);
    if (alternatives129(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives129(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_squarebracketopen_130(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute>& actual, leaf::parsing::instance::attribute_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__square_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__square_bracket_open(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_attributeitem_131(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute>& actual, leaf::parsing::instance::attribute_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute_item(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attributeitem_132(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute>& actual, leaf::parsing::instance::attribute_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute_item(depth + 1);
    actual->items.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attributeitem_133(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute>& actual, leaf::parsing::instance::attribute_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute_item(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_attributeitem_134(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute>& actual, leaf::parsing::instance::attribute_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_attribute_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_attribute_item(depth + 1);
    actual->items.push_back(val6);
    skip();
    return true;
}
bool leaf::parsing::instance::while135_136(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute>& actual, leaf::parsing::instance::attribute_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attributeitem_133(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_comma_attributeitem_134(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}), $ref: attribute-item (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attributeitem_133(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_comma_attributeitem_134(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}), $ref: attribute-item (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attributeitem_133(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_comma_137(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute>& actual, leaf::parsing::instance::attribute_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_138(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute>& actual, leaf::parsing::instance::attribute_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::if139_140(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute>& actual, leaf::parsing::instance::attribute_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_comma_137(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_comma_138(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_comma_138(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::if141_142(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute>& actual, leaf::parsing::instance::attribute_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_attributeitem_131(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_attributeitem_132(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute-item (XCG.Parsing.Production) }", depth);
                return false;
            }
            while135_136(true, actual, state, depth + 1);
            if139_140(true, actual, state, depth + 1);
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_attributeitem_132(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute-item (XCG.Parsing.Production) }", depth);
                return false;
            }
            while135_136(false, actual, state, depth + 1);
            if139_140(false, actual, state, depth + 1);
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_squarebracketclose_143(bool is_can, std::shared_ptr<leaf::parsing::instance::attribute>& actual, leaf::parsing::instance::attribute_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__square_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__square_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_attribute(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::attribute> fake;
    attribute_state state;
    if (!m_squarebracketopen_130(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if141_142(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_squarebracketclose_143(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::attribute> leaf::parsing::instance::p_match_attribute(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::attribute>();
    std::shared_ptr<leaf::parsing::instance::attribute> fake;
    attribute_state state;
    resettable resettable2(*this);
    if (m_squarebracketopen_130(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_squarebracketopen_130(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (if141_142(true, fake, state, depth + 1))
    {
        resettable3.reset();
        if141_142(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (m_squarebracketclose_143(true, fake, state, depth + 1))
    {
        resettable4.reset();
        m_squarebracketclose_143(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_encapsulation_contract_ident_144(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_encapsulation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__contract(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = p_match_encapsulation(depth + 1);
    actual->scope = val6;
    skip();
    auto l8 = token__contract(depth + 1).value();
    for (;l8 != 0; l8--)
    {
        next();
    }
    skip();
    auto val9 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->name = val9;
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_145(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_template_definition(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_146(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_definition(depth + 1);
    actual->template_ = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if147_148(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_templatedefinition_145(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_templatedefinition_146(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_templatedefinition_146(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_curlybracketopen_149(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_open(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_curlybracketclose_150(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_contractconstructor_151(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_contract_constructor(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_contract_constructor(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_contractfield_152(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_contract_field(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_contract_field(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_contractindexer_153(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_contract_indexer(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_contract_indexer(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_contractmethod_154(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_contract_method(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_contract_method(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_contractoperatorbinaryoverload_155(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_contract_operator_binary_overload(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_contract_operator_binary_overload(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_contractoperatornullaroverload_156(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_contract_operator_nullar_overload(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_contract_operator_nullar_overload(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_contractoperatorunaryoverload_157(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_contract_operator_unary_overload(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_contract_operator_unary_overload(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_contractproperty_158(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_contract_property(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_contract_property(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives159(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_contractconstructor_151(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_contractconstructor_151(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_contractfield_152(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_contractfield_152(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_contractindexer_153(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_contractindexer_153(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_contractmethod_154(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_contractmethod_154(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_contractoperatorbinaryoverload_155(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_contractoperatorbinaryoverload_155(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_contractoperatornullaroverload_156(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_contractoperatornullaroverload_156(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_contractoperatorunaryoverload_157(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_contractoperatorunaryoverload_157(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_contractproperty_158(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_contractproperty_158(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while160_161(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_curlybracketclose_150(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            alternatives159(true, actual, state, depth + 1);
            resettable resettable2(*this);
            cond3 = m_curlybracketclose_150(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            alternatives159(false, actual, state, depth + 1);
            resettable resettable2(*this);
            cond3 = m_curlybracketclose_150(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_curlybracketclose_162(bool is_can, std::shared_ptr<leaf::parsing::instance::contract>& actual, leaf::parsing::instance::contract_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_contract(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::contract> fake;
    contract_state state;
    if (!m_encapsulation_contract_ident_144(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if147_148(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_curlybracketopen_149(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while160_161(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_curlybracketclose_162(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::contract> leaf::parsing::instance::p_match_contract(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::contract>();
    std::shared_ptr<leaf::parsing::instance::contract> fake;
    contract_state state;
    resettable resettable2(*this);
    if (m_encapsulation_contract_ident_144(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_encapsulation_contract_ident_144(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (if147_148(true, fake, state, depth + 1))
    {
        resettable3.reset();
        if147_148(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (m_curlybracketopen_149(true, fake, state, depth + 1))
    {
        resettable4.reset();
        m_curlybracketopen_149(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (while160_161(true, fake, state, depth + 1))
    {
        resettable5.reset();
        while160_161(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable6(*this);
    if (m_curlybracketclose_162(true, fake, state, depth + 1))
    {
        resettable6.reset();
        m_curlybracketclose_162(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_typematch_ident_contractmethodarglist_semicolon_163(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method>& actual, leaf::parsing::instance::contract_method_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_contract_method_arglist(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__semicolon(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = p_match_type_match(depth + 1);
    actual->return_type = val6;
    skip();
    auto val7 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->name = val7;
    skip();
    auto val8 = p_match_contract_method_arglist(depth + 1);
    actual->arglist = val8;
    skip();
    auto l10 = token__semicolon(depth + 1).value();
    for (;l10 != 0; l10--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_contract_method(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::contract_method> fake;
    contract_method_state state;
    if (!m_typematch_ident_contractmethodarglist_semicolon_163(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::contract_method> leaf::parsing::instance::p_match_contract_method(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::contract_method>();
    std::shared_ptr<leaf::parsing::instance::contract_method> fake;
    contract_method_state state;
    resettable resettable2(*this);
    if (m_typematch_ident_contractmethodarglist_semicolon_163(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_typematch_ident_contractmethodarglist_semicolon_163(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_ident_contractmethodarglist_semicolon_164(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_constructor>& actual, leaf::parsing::instance::contract_constructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_contract_method_arglist(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__semicolon(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->name = val6;
    skip();
    auto val7 = p_match_contract_method_arglist(depth + 1);
    actual->arglist = val7;
    skip();
    auto l9 = token__semicolon(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_contract_constructor(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::contract_constructor> fake;
    contract_constructor_state state;
    if (!m_ident_contractmethodarglist_semicolon_164(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::contract_constructor> leaf::parsing::instance::p_match_contract_constructor(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::contract_constructor>();
    std::shared_ptr<leaf::parsing::instance::contract_constructor> fake;
    contract_constructor_state state;
    resettable resettable2(*this);
    if (m_ident_contractmethodarglist_semicolon_164(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_ident_contractmethodarglist_semicolon_164(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_typematch_contractmethodarglistindexer_165(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_indexer>& actual, leaf::parsing::instance::contract_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_contract_method_arglist_indexer(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_type_match(depth + 1);
    actual->target_type = val2;
    skip();
    auto val3 = p_match_contract_method_arglist_indexer(depth + 1);
    actual->arglist = val3;
    skip();
    return true;
}
bool leaf::parsing::instance::m_curlybracketopen_get_semicolon_set_semicolon_curlybracketclose_166(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_indexer>& actual, leaf::parsing::instance::contract_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__get(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__semicolon(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l8 = token__set(depth + 1);
    if (l8.has_value())
    {
        for (auto i9 = l8.value(); i9 != 0; i9--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l10 = token__semicolon(depth + 1);
    if (l10.has_value())
    {
        for (auto i11 = l10.value(); i11 != 0; i11--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l12 = token__curly_bracket_close(depth + 1);
    if (l12.has_value())
    {
        for (auto i13 = l12.value(); i13 != 0; i13--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l15 = token__curly_bracket_open(depth + 1).value();
    for (;l15 != 0; l15--)
    {
        next();
    }
    skip();
    auto l17 = token__get(depth + 1).value();
    for (;l17 != 0; l17--)
    {
        next();
    }
    skip();
    auto l19 = token__semicolon(depth + 1).value();
    for (;l19 != 0; l19--)
    {
        next();
    }
    skip();
    auto l21 = token__set(depth + 1).value();
    for (;l21 != 0; l21--)
    {
        next();
    }
    skip();
    auto l23 = token__semicolon(depth + 1).value();
    for (;l23 != 0; l23--)
    {
        next();
    }
    skip();
    auto l25 = token__curly_bracket_close(depth + 1).value();
    for (;l25 != 0; l25--)
    {
        next();
    }
    skip();
    if (!is_can)
    {
        actual->is_set = true;
    }
    if (!is_can)
    {
        actual->is_get = true;
    }
    return true;
}
bool leaf::parsing::instance::m_curlybracketopen_get_semicolon_curlybracketclose_167(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_indexer>& actual, leaf::parsing::instance::contract_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__get(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__semicolon(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l8 = token__curly_bracket_close(depth + 1);
    if (l8.has_value())
    {
        for (auto i9 = l8.value(); i9 != 0; i9--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l11 = token__curly_bracket_open(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto l13 = token__get(depth + 1).value();
    for (;l13 != 0; l13--)
    {
        next();
    }
    skip();
    auto l15 = token__semicolon(depth + 1).value();
    for (;l15 != 0; l15--)
    {
        next();
    }
    skip();
    auto l17 = token__curly_bracket_close(depth + 1).value();
    for (;l17 != 0; l17--)
    {
        next();
    }
    skip();
    if (!is_can)
    {
        actual->is_get = true;
    }
    return true;
}
bool leaf::parsing::instance::m_curlybracketopen_set_semicolon_curlybracketclose_168(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_indexer>& actual, leaf::parsing::instance::contract_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__set(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__semicolon(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l8 = token__curly_bracket_close(depth + 1);
    if (l8.has_value())
    {
        for (auto i9 = l8.value(); i9 != 0; i9--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l11 = token__curly_bracket_open(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto l13 = token__set(depth + 1).value();
    for (;l13 != 0; l13--)
    {
        next();
    }
    skip();
    auto l15 = token__semicolon(depth + 1).value();
    for (;l15 != 0; l15--)
    {
        next();
    }
    skip();
    auto l17 = token__curly_bracket_close(depth + 1).value();
    for (;l17 != 0; l17--)
    {
        next();
    }
    skip();
    if (!is_can)
    {
        actual->is_set = true;
    }
    return true;
}
bool leaf::parsing::instance::alternatives169(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_indexer>& actual, leaf::parsing::instance::contract_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_curlybracketopen_get_semicolon_set_semicolon_curlybracketclose_166(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_curlybracketopen_get_semicolon_set_semicolon_curlybracketclose_166(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_curlybracketopen_get_semicolon_curlybracketclose_167(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_curlybracketopen_get_semicolon_curlybracketclose_167(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_curlybracketopen_set_semicolon_curlybracketclose_168(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_curlybracketopen_set_semicolon_curlybracketclose_168(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_contract_indexer(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::contract_indexer> fake;
    contract_indexer_state state;
    if (!m_typematch_contractmethodarglistindexer_165(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!alternatives169(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::contract_indexer> leaf::parsing::instance::p_match_contract_indexer(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::contract_indexer>();
    std::shared_ptr<leaf::parsing::instance::contract_indexer> fake;
    contract_indexer_state state;
    resettable resettable2(*this);
    if (m_typematch_contractmethodarglistindexer_165(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_typematch_contractmethodarglistindexer_165(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (alternatives169(true, fake, state, depth + 1))
    {
        resettable3.reset();
        alternatives169(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_typematch_operator_170(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__operator(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_type_match(depth + 1);
    actual->target_type = val4;
    skip();
    auto l6 = token__operator(depth + 1).value();
    for (;l6 != 0; l6--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_roundbracketopen_typematch_roundbracketclose_171(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_close(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__round_bracket_open(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = p_match_type_match(depth + 1);
    actual->left = val8;
    skip();
    auto l10 = token__round_bracket_close(depth + 1).value();
    for (;l10 != 0; l10--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_plus_172(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_plus(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_plus(depth + 1).value(), tok::PLUS);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_minus_173(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_minus(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_minus(depth + 1).value(), tok::MINUS);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_star_174(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_star(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_star(depth + 1).value(), tok::STAR);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_slash_175(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_slash(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_slash(depth + 1).value(), tok::SLASH);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_lessthenlessthenlessthen_176(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__less_then_less_then_less_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__less_then_less_then_less_then(depth + 1).value(), tok::_LESS_THEN_LESS_THEN_LESS_THEN);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_lessthenlessthen_177(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__less_then_less_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__less_then_less_then(depth + 1).value(), tok::_LESS_THEN_LESS_THEN);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_lessthenequal_178(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__less_then_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__less_then_equal(depth + 1).value(), tok::_LESS_THEN_EQUAL);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_lessthen_179(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__less_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__less_then(depth + 1).value(), tok::_LESS_THEN);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_greaterthengreaterthengreaterthen_180(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__greater_then_greater_then_greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__greater_then_greater_then_greater_then(depth + 1).value(), tok::_GREATER_THEN_GREATER_THEN_GREATER_THEN);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_greaterthengreaterthen_181(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__greater_then_greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__greater_then_greater_then(depth + 1).value(), tok::_GREATER_THEN_GREATER_THEN);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_greaterthenequal_182(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__greater_then_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__greater_then_equal(depth + 1).value(), tok::_GREATER_THEN_EQUAL);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_greaterthen_183(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__greater_then(depth + 1).value(), tok::_GREATER_THEN);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_verticalbarverticalbar_184(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__vertical_bar_vertical_bar(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__vertical_bar_vertical_bar(depth + 1).value(), tok::_VERTICAL_BAR_VERTICAL_BAR);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_verticalbar_185(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__vertical_bar(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__vertical_bar(depth + 1).value(), tok::_VERTICAL_BAR);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ampersandampersand_186(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__ampersand_ampersand(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__ampersand_ampersand(depth + 1).value(), tok::_AMPERSAND_AMPERSAND);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ampersand_187(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__ampersand(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__ampersand(depth + 1).value(), tok::_AMPERSAND);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_equalequalequal_188(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__equal_equal_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__equal_equal_equal(depth + 1).value(), tok::_EQUAL_EQUAL_EQUAL);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_equalequal_189(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__equal_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__equal_equal(depth + 1).value(), tok::_EQUAL_EQUAL);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_exclamationequal_190(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__exclamation_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__exclamation_equal(depth + 1).value(), tok::_EXCLAMATION_EQUAL);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_circumflex_191(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__circumflex(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__circumflex(depth + 1).value(), tok::_CIRCUMFLEX);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives192(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_plus_172(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_plus_172(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_minus_173(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_minus_173(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_star_174(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_star_174(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_slash_175(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_slash_175(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_lessthenlessthenlessthen_176(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_lessthenlessthenlessthen_176(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_lessthenlessthen_177(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_lessthenlessthen_177(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_lessthenequal_178(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_lessthenequal_178(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_lessthen_179(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_lessthen_179(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_greaterthengreaterthengreaterthen_180(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_greaterthengreaterthengreaterthen_180(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_greaterthengreaterthen_181(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_greaterthengreaterthen_181(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_greaterthenequal_182(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_greaterthenequal_182(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_greaterthen_183(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_greaterthen_183(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_verticalbarverticalbar_184(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_verticalbarverticalbar_184(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_verticalbar_185(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_verticalbar_185(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ampersandampersand_186(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ampersandampersand_186(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ampersand_187(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ampersand_187(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_equalequalequal_188(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_equalequalequal_188(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_equalequal_189(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_equalequal_189(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_exclamationequal_190(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_exclamationequal_190(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_circumflex_191(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_circumflex_191(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::m_roundbracketopen_typematch_roundbracketclose_semicolon_193(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload>& actual, leaf::parsing::instance::contract_operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_close(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__semicolon(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l9 = token__round_bracket_open(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    auto val10 = p_match_type_match(depth + 1);
    actual->right = val10;
    skip();
    auto l12 = token__round_bracket_close(depth + 1).value();
    for (;l12 != 0; l12--)
    {
        next();
    }
    skip();
    auto l14 = token__semicolon(depth + 1).value();
    for (;l14 != 0; l14--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_contract_operator_binary_overload(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload> fake;
    contract_operator_binary_overload_state state;
    if (!m_typematch_operator_170(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_roundbracketopen_typematch_roundbracketclose_171(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!alternatives192(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_roundbracketopen_typematch_roundbracketclose_semicolon_193(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload> leaf::parsing::instance::p_match_contract_operator_binary_overload(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::contract_operator_binary_overload>();
    std::shared_ptr<leaf::parsing::instance::contract_operator_binary_overload> fake;
    contract_operator_binary_overload_state state;
    resettable resettable2(*this);
    if (m_typematch_operator_170(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_typematch_operator_170(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_roundbracketopen_typematch_roundbracketclose_171(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_roundbracketopen_typematch_roundbracketclose_171(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (alternatives192(true, fake, state, depth + 1))
    {
        resettable4.reset();
        alternatives192(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (m_roundbracketopen_typematch_roundbracketclose_semicolon_193(true, fake, state, depth + 1))
    {
        resettable5.reset();
        m_roundbracketopen_typematch_roundbracketclose_semicolon_193(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_typematch_operator_194(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_unary_overload>& actual, leaf::parsing::instance::contract_operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__operator(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_type_match(depth + 1);
    actual->target_type = val4;
    skip();
    auto l6 = token__operator(depth + 1).value();
    for (;l6 != 0; l6--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_plus_195(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_unary_overload>& actual, leaf::parsing::instance::contract_operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_plus(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_plus(depth + 1).value(), tok::PLUS);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_minus_196(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_unary_overload>& actual, leaf::parsing::instance::contract_operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_minus(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_minus(depth + 1).value(), tok::MINUS);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_exclamation_197(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_unary_overload>& actual, leaf::parsing::instance::contract_operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__exclamation(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__exclamation(depth + 1).value(), tok::_EXCLAMATION);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_tilde_198(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_unary_overload>& actual, leaf::parsing::instance::contract_operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__tilde(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__tilde(depth + 1).value(), tok::_TILDE);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives199(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_unary_overload>& actual, leaf::parsing::instance::contract_operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_plus_195(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_plus_195(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_minus_196(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_minus_196(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_exclamation_197(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_exclamation_197(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_tilde_198(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_tilde_198(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::m_roundbracketopen_typematch_roundbracketclose_semicolon_200(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_unary_overload>& actual, leaf::parsing::instance::contract_operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_close(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__semicolon(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l9 = token__round_bracket_open(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    auto val10 = p_match_type_match(depth + 1);
    actual->right = val10;
    skip();
    auto l12 = token__round_bracket_close(depth + 1).value();
    for (;l12 != 0; l12--)
    {
        next();
    }
    skip();
    auto l14 = token__semicolon(depth + 1).value();
    for (;l14 != 0; l14--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_contract_operator_unary_overload(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::contract_operator_unary_overload> fake;
    contract_operator_unary_overload_state state;
    if (!m_typematch_operator_194(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!alternatives199(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_roundbracketopen_typematch_roundbracketclose_semicolon_200(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::contract_operator_unary_overload> leaf::parsing::instance::p_match_contract_operator_unary_overload(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::contract_operator_unary_overload>();
    std::shared_ptr<leaf::parsing::instance::contract_operator_unary_overload> fake;
    contract_operator_unary_overload_state state;
    resettable resettable2(*this);
    if (m_typematch_operator_194(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_typematch_operator_194(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (alternatives199(true, fake, state, depth + 1))
    {
        resettable3.reset();
        alternatives199(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (m_roundbracketopen_typematch_roundbracketclose_semicolon_200(true, fake, state, depth + 1))
    {
        resettable4.reset();
        m_roundbracketopen_typematch_roundbracketclose_semicolon_200(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_methodmeta_operator_201(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_nullar_overload>& actual, leaf::parsing::instance::contract_operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_meta(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__operator(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_method_meta(depth + 1);
    actual->meta = val4;
    skip();
    auto l6 = token__operator(depth + 1).value();
    for (;l6 != 0; l6--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_dot_202(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_nullar_overload>& actual, leaf::parsing::instance::contract_operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__dot(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__dot(depth + 1).value(), tok::_DOT);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_minusgreaterthen_203(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_nullar_overload>& actual, leaf::parsing::instance::contract_operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__minus_greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__minus_greater_then(depth + 1).value(), tok::_MINUS_GREATER_THEN);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives204(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_nullar_overload>& actual, leaf::parsing::instance::contract_operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_dot_202(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_dot_202(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_minusgreaterthen_203(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_minusgreaterthen_203(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::m_semicolon_205(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_operator_nullar_overload>& actual, leaf::parsing::instance::contract_operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__semicolon(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__semicolon(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_contract_operator_nullar_overload(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::contract_operator_nullar_overload> fake;
    contract_operator_nullar_overload_state state;
    if (!m_methodmeta_operator_201(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!alternatives204(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_semicolon_205(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::contract_operator_nullar_overload> leaf::parsing::instance::p_match_contract_operator_nullar_overload(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::contract_operator_nullar_overload>();
    std::shared_ptr<leaf::parsing::instance::contract_operator_nullar_overload> fake;
    contract_operator_nullar_overload_state state;
    resettable resettable2(*this);
    if (m_methodmeta_operator_201(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_methodmeta_operator_201(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (alternatives204(true, fake, state, depth + 1))
    {
        resettable3.reset();
        alternatives204(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (m_semicolon_205(true, fake, state, depth + 1))
    {
        resettable4.reset();
        m_semicolon_205(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_typematch_ident_206(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_property>& actual, leaf::parsing::instance::contract_property_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_type_match(depth + 1);
    actual->target_type = val4;
    skip();
    auto val5 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->name = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_curlybracketopen_get_semicolon_set_semicolon_curlybracketclose_207(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_property>& actual, leaf::parsing::instance::contract_property_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__get(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__semicolon(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l8 = token__set(depth + 1);
    if (l8.has_value())
    {
        for (auto i9 = l8.value(); i9 != 0; i9--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l10 = token__semicolon(depth + 1);
    if (l10.has_value())
    {
        for (auto i11 = l10.value(); i11 != 0; i11--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l12 = token__curly_bracket_close(depth + 1);
    if (l12.has_value())
    {
        for (auto i13 = l12.value(); i13 != 0; i13--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l15 = token__curly_bracket_open(depth + 1).value();
    for (;l15 != 0; l15--)
    {
        next();
    }
    skip();
    auto l17 = token__get(depth + 1).value();
    for (;l17 != 0; l17--)
    {
        next();
    }
    skip();
    auto l19 = token__semicolon(depth + 1).value();
    for (;l19 != 0; l19--)
    {
        next();
    }
    skip();
    auto l21 = token__set(depth + 1).value();
    for (;l21 != 0; l21--)
    {
        next();
    }
    skip();
    auto l23 = token__semicolon(depth + 1).value();
    for (;l23 != 0; l23--)
    {
        next();
    }
    skip();
    auto l25 = token__curly_bracket_close(depth + 1).value();
    for (;l25 != 0; l25--)
    {
        next();
    }
    skip();
    if (!is_can)
    {
        actual->is_set = true;
    }
    if (!is_can)
    {
        actual->is_get = true;
    }
    return true;
}
bool leaf::parsing::instance::m_curlybracketopen_get_semicolon_curlybracketclose_208(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_property>& actual, leaf::parsing::instance::contract_property_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__get(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__semicolon(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l8 = token__curly_bracket_close(depth + 1);
    if (l8.has_value())
    {
        for (auto i9 = l8.value(); i9 != 0; i9--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l11 = token__curly_bracket_open(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto l13 = token__get(depth + 1).value();
    for (;l13 != 0; l13--)
    {
        next();
    }
    skip();
    auto l15 = token__semicolon(depth + 1).value();
    for (;l15 != 0; l15--)
    {
        next();
    }
    skip();
    auto l17 = token__curly_bracket_close(depth + 1).value();
    for (;l17 != 0; l17--)
    {
        next();
    }
    skip();
    if (!is_can)
    {
        actual->is_get = true;
    }
    return true;
}
bool leaf::parsing::instance::m_curlybracketopen_set_semicolon_curlybracketclose_209(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_property>& actual, leaf::parsing::instance::contract_property_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__set(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__semicolon(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l8 = token__curly_bracket_close(depth + 1);
    if (l8.has_value())
    {
        for (auto i9 = l8.value(); i9 != 0; i9--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l11 = token__curly_bracket_open(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto l13 = token__set(depth + 1).value();
    for (;l13 != 0; l13--)
    {
        next();
    }
    skip();
    auto l15 = token__semicolon(depth + 1).value();
    for (;l15 != 0; l15--)
    {
        next();
    }
    skip();
    auto l17 = token__curly_bracket_close(depth + 1).value();
    for (;l17 != 0; l17--)
    {
        next();
    }
    skip();
    if (!is_can)
    {
        actual->is_set = true;
    }
    return true;
}
bool leaf::parsing::instance::alternatives210(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_property>& actual, leaf::parsing::instance::contract_property_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_curlybracketopen_get_semicolon_set_semicolon_curlybracketclose_207(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_curlybracketopen_get_semicolon_set_semicolon_curlybracketclose_207(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_curlybracketopen_get_semicolon_curlybracketclose_208(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_curlybracketopen_get_semicolon_curlybracketclose_208(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_curlybracketopen_set_semicolon_curlybracketclose_209(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_curlybracketopen_set_semicolon_curlybracketclose_209(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_contract_property(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::contract_property> fake;
    contract_property_state state;
    if (!m_typematch_ident_206(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!alternatives210(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::contract_property> leaf::parsing::instance::p_match_contract_property(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::contract_property>();
    std::shared_ptr<leaf::parsing::instance::contract_property> fake;
    contract_property_state state;
    resettable resettable2(*this);
    if (m_typematch_ident_206(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_typematch_ident_206(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (alternatives210(true, fake, state, depth + 1))
    {
        resettable3.reset();
        alternatives210(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_typematch_ident_semicolon_211(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_field>& actual, leaf::parsing::instance::contract_field_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__semicolon(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = p_match_type_match(depth + 1);
    actual->target_type = val6;
    skip();
    auto val7 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->name = val7;
    skip();
    auto l9 = token__semicolon(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_contract_field(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::contract_field> fake;
    contract_field_state state;
    if (!m_typematch_ident_semicolon_211(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::contract_field> leaf::parsing::instance::p_match_contract_field(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::contract_field>();
    std::shared_ptr<leaf::parsing::instance::contract_field> fake;
    contract_field_state state;
    resettable resettable2(*this);
    if (m_typematch_ident_semicolon_211(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_typematch_ident_semicolon_211(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_roundbracketopen_212(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist>& actual, leaf::parsing::instance::contract_method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__round_bracket_open(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_typematch_213(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist>& actual, leaf::parsing::instance::contract_method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_type_match(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_typematch_214(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist>& actual, leaf::parsing::instance::contract_method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_type_match(depth + 1);
    actual->args.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_roundbracketclose_215(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist>& actual, leaf::parsing::instance::contract_method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__round_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_typematch_216(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist>& actual, leaf::parsing::instance::contract_method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_type_match(depth + 1);
    actual->args.push_back(val6);
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_217(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist>& actual, leaf::parsing::instance::contract_method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives218(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist>& actual, leaf::parsing::instance::contract_method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_comma_typematch_216(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_typematch_216(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_comma_217(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_217(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (!is_can)
    {
        report("Failed to match one of the following: { ,, type-match, , }", depth);
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while219_220(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist>& actual, leaf::parsing::instance::contract_method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_roundbracketclose_215(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            while (!alternatives218(true, actual, state, depth + 1) && current() != '\0')
            {
                next();
            }
            resettable resettable2(*this);
            cond3 = m_roundbracketclose_215(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            if (!alternatives218(false, actual, state, depth + 1))
            {
                while (current() != '\0')
                {
                    resettable resettable4(*this);
                    if (alternatives218(true, actual, state, depth + 1))
                    {
                        resettable4.reset();
                        break;
                    }
                    next();
                }
            }
            resettable resettable2(*this);
            cond3 = m_roundbracketclose_215(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::if221_222(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist>& actual, leaf::parsing::instance::contract_method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_typematch_213(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_typematch_214(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: type-match (XCG.Parsing.Production) }", depth);
                return false;
            }
            while219_220(true, actual, state, depth + 1);
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_typematch_214(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: type-match (XCG.Parsing.Production) }", depth);
                return false;
            }
            while219_220(false, actual, state, depth + 1);
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_roundbracketclose_223(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist>& actual, leaf::parsing::instance::contract_method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__round_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_contract_method_arglist(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::contract_method_arglist> fake;
    contract_method_arglist_state state;
    if (!m_roundbracketopen_212(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if221_222(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_roundbracketclose_223(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::contract_method_arglist> leaf::parsing::instance::p_match_contract_method_arglist(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::contract_method_arglist>();
    std::shared_ptr<leaf::parsing::instance::contract_method_arglist> fake;
    contract_method_arglist_state state;
    resettable resettable2(*this);
    if (m_roundbracketopen_212(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_roundbracketopen_212(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (if221_222(true, fake, state, depth + 1))
    {
        resettable3.reset();
        if221_222(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (m_roundbracketclose_223(true, fake, state, depth + 1))
    {
        resettable4.reset();
        m_roundbracketclose_223(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_squarebracketopen_224(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist_indexer>& actual, leaf::parsing::instance::contract_method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__square_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__square_bracket_open(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_typematch_225(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist_indexer>& actual, leaf::parsing::instance::contract_method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_type_match(depth + 1);
    actual->args.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_squarebracketclose_226(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist_indexer>& actual, leaf::parsing::instance::contract_method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__square_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__square_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_typematch_227(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist_indexer>& actual, leaf::parsing::instance::contract_method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_type_match(depth + 1);
    actual->args.push_back(val6);
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_228(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist_indexer>& actual, leaf::parsing::instance::contract_method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives229(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist_indexer>& actual, leaf::parsing::instance::contract_method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_comma_typematch_227(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_typematch_227(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_comma_228(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_228(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (!is_can)
    {
        report("Failed to match one of the following: { ,, type-match, , }", depth);
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while230_231(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist_indexer>& actual, leaf::parsing::instance::contract_method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_squarebracketclose_226(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            while (!alternatives229(true, actual, state, depth + 1) && current() != '\0')
            {
                next();
            }
            resettable resettable2(*this);
            cond3 = m_squarebracketclose_226(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            if (!alternatives229(false, actual, state, depth + 1))
            {
                while (current() != '\0')
                {
                    resettable resettable4(*this);
                    if (alternatives229(true, actual, state, depth + 1))
                    {
                        resettable4.reset();
                        break;
                    }
                    next();
                }
            }
            resettable resettable2(*this);
            cond3 = m_squarebracketclose_226(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_squarebracketclose_232(bool is_can, std::shared_ptr<leaf::parsing::instance::contract_method_arglist_indexer>& actual, leaf::parsing::instance::contract_method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__square_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__square_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_contract_method_arglist_indexer(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::contract_method_arglist_indexer> fake;
    contract_method_arglist_indexer_state state;
    if (!m_squarebracketopen_224(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_typematch_225(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while230_231(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_squarebracketclose_232(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::contract_method_arglist_indexer> leaf::parsing::instance::p_match_contract_method_arglist_indexer(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::contract_method_arglist_indexer>();
    std::shared_ptr<leaf::parsing::instance::contract_method_arglist_indexer> fake;
    contract_method_arglist_indexer_state state;
    resettable resettable2(*this);
    if (m_squarebracketopen_224(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_squarebracketopen_224(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_typematch_225(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_typematch_225(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (while230_231(true, fake, state, depth + 1))
    {
        resettable4.reset();
        while230_231(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (m_squarebracketclose_232(true, fake, state, depth + 1))
    {
        resettable5.reset();
        m_squarebracketclose_232(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_curlybracketclose_233(bool is_can, std::shared_ptr<leaf::parsing::instance::scope>& actual, leaf::parsing::instance::scope_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_using_234(bool is_can, std::shared_ptr<leaf::parsing::instance::scope>& actual, leaf::parsing::instance::scope_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_using_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_using_(depth + 1);
    actual->usings.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_controlstructure_235(bool is_can, std::shared_ptr<leaf::parsing::instance::scope>& actual, leaf::parsing::instance::scope_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_control_structure(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_control_structure(depth + 1);
    actual->body.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_statement_236(bool is_can, std::shared_ptr<leaf::parsing::instance::scope>& actual, leaf::parsing::instance::scope_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_statement(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_statement(depth + 1);
    actual->body.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives237(bool is_can, std::shared_ptr<leaf::parsing::instance::scope>& actual, leaf::parsing::instance::scope_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_using_234(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_using_234(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_controlstructure_235(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_controlstructure_235(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_statement_236(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_statement_236(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (!is_can)
    {
        report("Failed to match one of the following: { using, control-structure, statement }", depth);
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while238_239(bool is_can, std::shared_ptr<leaf::parsing::instance::scope>& actual, leaf::parsing::instance::scope_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_curlybracketclose_233(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            while (!alternatives237(true, actual, state, depth + 1) && current() != '\0')
            {
                next();
            }
            resettable resettable2(*this);
            cond3 = m_curlybracketclose_233(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            if (!alternatives237(false, actual, state, depth + 1))
            {
                while (current() != '\0')
                {
                    resettable resettable4(*this);
                    if (alternatives237(true, actual, state, depth + 1))
                    {
                        resettable4.reset();
                        break;
                    }
                    next();
                }
            }
            resettable resettable2(*this);
            cond3 = m_curlybracketclose_233(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_curlybracketclose_240(bool is_can, std::shared_ptr<leaf::parsing::instance::scope>& actual, leaf::parsing::instance::scope_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_curlybracketopen_241(bool is_can, std::shared_ptr<leaf::parsing::instance::scope>& actual, leaf::parsing::instance::scope_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_open(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    while238_239(false, actual, state, depth + 1);
    if (m_curlybracketclose_240(false, actual, state, depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        return false;
    }
    else
    {
        report("Failed to match { $ref: } ({ Token: } (})}) }", depth);
        return false;
    }
    return true;
}
bool leaf::parsing::instance::m_using_242(bool is_can, std::shared_ptr<leaf::parsing::instance::scope>& actual, leaf::parsing::instance::scope_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_using_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_using_(depth + 1);
    actual->usings.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_controlstructure_243(bool is_can, std::shared_ptr<leaf::parsing::instance::scope>& actual, leaf::parsing::instance::scope_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_control_structure(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_control_structure(depth + 1);
    actual->body.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_statement_244(bool is_can, std::shared_ptr<leaf::parsing::instance::scope>& actual, leaf::parsing::instance::scope_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_statement(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_statement(depth + 1);
    actual->body.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives245(bool is_can, std::shared_ptr<leaf::parsing::instance::scope>& actual, leaf::parsing::instance::scope_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_using_242(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_using_242(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_controlstructure_243(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_controlstructure_243(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_statement_244(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_statement_244(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::m_equalgreaterthen_246(bool is_can, std::shared_ptr<leaf::parsing::instance::scope>& actual, leaf::parsing::instance::scope_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__equal_greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__equal_greater_then(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    alternatives245(false, actual, state, depth + 1);
    return true;
}
bool leaf::parsing::instance::alternatives247(bool is_can, std::shared_ptr<leaf::parsing::instance::scope>& actual, leaf::parsing::instance::scope_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_curlybracketopen_241(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_curlybracketopen_241(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_equalgreaterthen_246(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_equalgreaterthen_246(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_scope(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::scope> fake;
    scope_state state;
    if (!alternatives247(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::scope> leaf::parsing::instance::p_match_scope(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::scope>();
    std::shared_ptr<leaf::parsing::instance::scope> fake;
    scope_state state;
    resettable resettable2(*this);
    if (alternatives247(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives247(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_curlybracketclose_248(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_lambda>& actual, leaf::parsing::instance::scope_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_using_249(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_lambda>& actual, leaf::parsing::instance::scope_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_using_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_using_(depth + 1);
    actual->usings.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_controlstructure_250(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_lambda>& actual, leaf::parsing::instance::scope_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_control_structure(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_control_structure(depth + 1);
    actual->body.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_statement_251(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_lambda>& actual, leaf::parsing::instance::scope_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_statement(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_statement(depth + 1);
    actual->body.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives252(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_lambda>& actual, leaf::parsing::instance::scope_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_using_249(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_using_249(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_controlstructure_250(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_controlstructure_250(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_statement_251(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_statement_251(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (!is_can)
    {
        report("Failed to match one of the following: { using, control-structure, statement }", depth);
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while253_254(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_lambda>& actual, leaf::parsing::instance::scope_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_curlybracketclose_248(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            while (!alternatives252(true, actual, state, depth + 1) && current() != '\0')
            {
                next();
            }
            resettable resettable2(*this);
            cond3 = m_curlybracketclose_248(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            if (!alternatives252(false, actual, state, depth + 1))
            {
                while (current() != '\0')
                {
                    resettable resettable4(*this);
                    if (alternatives252(true, actual, state, depth + 1))
                    {
                        resettable4.reset();
                        break;
                    }
                    next();
                }
            }
            resettable resettable2(*this);
            cond3 = m_curlybracketclose_248(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_curlybracketclose_255(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_lambda>& actual, leaf::parsing::instance::scope_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_curlybracketopen_256(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_lambda>& actual, leaf::parsing::instance::scope_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_open(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    while253_254(false, actual, state, depth + 1);
    if (m_curlybracketclose_255(false, actual, state, depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        return false;
    }
    else
    {
        report("Failed to match { $ref: } ({ Token: } (})}) }", depth);
        return false;
    }
    return true;
}
bool leaf::parsing::instance::m_using_257(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_lambda>& actual, leaf::parsing::instance::scope_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_using_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_using_(depth + 1);
    actual->usings.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_controlstructure_258(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_lambda>& actual, leaf::parsing::instance::scope_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_control_structure(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_control_structure(depth + 1);
    actual->body.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_statement_259(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_lambda>& actual, leaf::parsing::instance::scope_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_statement(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_statement(depth + 1);
    actual->body.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives260(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_lambda>& actual, leaf::parsing::instance::scope_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_curlybracketopen_256(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_curlybracketopen_256(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_using_257(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_using_257(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_controlstructure_258(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_controlstructure_258(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_statement_259(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_statement_259(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::m_equalgreaterthen_261(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_lambda>& actual, leaf::parsing::instance::scope_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__equal_greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__equal_greater_then(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    alternatives260(false, actual, state, depth + 1);
    return true;
}
bool leaf::parsing::instance::alternatives262(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_lambda>& actual, leaf::parsing::instance::scope_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_equalgreaterthen_261(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_equalgreaterthen_261(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_scope_lambda(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::scope_lambda> fake;
    scope_lambda_state state;
    if (!alternatives262(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::scope_lambda> leaf::parsing::instance::p_match_scope_lambda(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::scope_lambda>();
    std::shared_ptr<leaf::parsing::instance::scope_lambda> fake;
    scope_lambda_state state;
    resettable resettable2(*this);
    if (alternatives262(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives262(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_curlybracketopen_263(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_getset>& actual, leaf::parsing::instance::scope_getset_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_open(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_get_scope_set_scope_264(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_getset>& actual, leaf::parsing::instance::scope_getset_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__get(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__set(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__get(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = p_match_scope(depth + 1);
    actual->get = val8;
    skip();
    auto l10 = token__set(depth + 1).value();
    for (;l10 != 0; l10--)
    {
        next();
    }
    skip();
    auto val11 = p_match_scope(depth + 1);
    actual->set = val11;
    skip();
    return true;
}
bool leaf::parsing::instance::m_set_scope_get_scope_265(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_getset>& actual, leaf::parsing::instance::scope_getset_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__set(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__get(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__set(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = p_match_scope(depth + 1);
    actual->set = val8;
    skip();
    auto l10 = token__get(depth + 1).value();
    for (;l10 != 0; l10--)
    {
        next();
    }
    skip();
    auto val11 = p_match_scope(depth + 1);
    actual->get = val11;
    skip();
    return true;
}
bool leaf::parsing::instance::m_get_scope_266(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_getset>& actual, leaf::parsing::instance::scope_getset_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__get(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__get(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_scope(depth + 1);
    actual->get = val6;
    skip();
    return true;
}
bool leaf::parsing::instance::m_set_scope_267(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_getset>& actual, leaf::parsing::instance::scope_getset_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__set(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__set(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_scope(depth + 1);
    actual->set = val6;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives268(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_getset>& actual, leaf::parsing::instance::scope_getset_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_get_scope_set_scope_264(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_get_scope_set_scope_264(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_set_scope_get_scope_265(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_set_scope_get_scope_265(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_get_scope_266(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_get_scope_266(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_set_scope_267(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_set_scope_267(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::m_curlybracketclose_269(bool is_can, std::shared_ptr<leaf::parsing::instance::scope_getset>& actual, leaf::parsing::instance::scope_getset_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_scope_getset(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::scope_getset> fake;
    scope_getset_state state;
    if (!m_curlybracketopen_263(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!alternatives268(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_curlybracketclose_269(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::scope_getset> leaf::parsing::instance::p_match_scope_getset(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::scope_getset>();
    std::shared_ptr<leaf::parsing::instance::scope_getset> fake;
    scope_getset_state state;
    resettable resettable2(*this);
    if (m_curlybracketopen_263(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_curlybracketopen_263(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (alternatives268(true, fake, state, depth + 1))
    {
        resettable3.reset();
        alternatives268(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (m_curlybracketclose_269(true, fake, state, depth + 1))
    {
        resettable4.reset();
        m_curlybracketclose_269(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_scope_270(bool is_can, std::shared_ptr<leaf::parsing::instance::control_structure_body>& actual, leaf::parsing::instance::control_structure_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_scope(depth + 1);
    actual->body = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_controlstructure_271(bool is_can, std::shared_ptr<leaf::parsing::instance::control_structure_body>& actual, leaf::parsing::instance::control_structure_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_control_structure(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_control_structure(depth + 1);
    actual->body = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_statement_272(bool is_can, std::shared_ptr<leaf::parsing::instance::control_structure_body>& actual, leaf::parsing::instance::control_structure_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_statement(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_statement(depth + 1);
    actual->body = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives273(bool is_can, std::shared_ptr<leaf::parsing::instance::control_structure_body>& actual, leaf::parsing::instance::control_structure_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_scope_270(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_scope_270(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_controlstructure_271(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_controlstructure_271(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_statement_272(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_statement_272(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_control_structure_body(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::control_structure_body> fake;
    control_structure_body_state state;
    if (!alternatives273(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::control_structure_body> leaf::parsing::instance::p_match_control_structure_body(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::control_structure_body>();
    std::shared_ptr<leaf::parsing::instance::control_structure_body> fake;
    control_structure_body_state state;
    resettable resettable2(*this);
    if (alternatives273(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives273(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_while_roundbracketopen_expression_roundbracketclose_controlstructurebody_274(bool is_can, std::shared_ptr<leaf::parsing::instance::while_loop>& actual, leaf::parsing::instance::while_loop_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__while(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_open(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__round_bracket_close(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_control_structure_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l9 = token__while(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    auto l11 = token__round_bracket_open(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto val12 = p_match_expression(depth + 1);
    actual->condition = val12;
    skip();
    auto l14 = token__round_bracket_close(depth + 1).value();
    for (;l14 != 0; l14--)
    {
        next();
    }
    skip();
    auto val15 = p_match_control_structure_body(depth + 1);
    actual->body = val15;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_while_loop(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::while_loop> fake;
    while_loop_state state;
    if (!m_while_roundbracketopen_expression_roundbracketclose_controlstructurebody_274(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::while_loop> leaf::parsing::instance::p_match_while_loop(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::while_loop>();
    std::shared_ptr<leaf::parsing::instance::while_loop> fake;
    while_loop_state state;
    resettable resettable2(*this);
    if (m_while_roundbracketopen_expression_roundbracketclose_controlstructurebody_274(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_while_roundbracketopen_expression_roundbracketclose_controlstructurebody_274(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_if_roundbracketopen_expression_roundbracketclose_controlstructurebody_275(bool is_can, std::shared_ptr<leaf::parsing::instance::if_body>& actual, leaf::parsing::instance::if_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__if(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_open(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__round_bracket_close(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_control_structure_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l9 = token__if(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    auto l11 = token__round_bracket_open(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto val12 = p_match_expression(depth + 1);
    actual->condition = val12;
    skip();
    auto l14 = token__round_bracket_close(depth + 1).value();
    for (;l14 != 0; l14--)
    {
        next();
    }
    skip();
    auto val15 = p_match_control_structure_body(depth + 1);
    actual->body = val15;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_if_body(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::if_body> fake;
    if_body_state state;
    if (!m_if_roundbracketopen_expression_roundbracketclose_controlstructurebody_275(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::if_body> leaf::parsing::instance::p_match_if_body(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::if_body>();
    std::shared_ptr<leaf::parsing::instance::if_body> fake;
    if_body_state state;
    resettable resettable2(*this);
    if (m_if_roundbracketopen_expression_roundbracketclose_controlstructurebody_275(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_if_roundbracketopen_expression_roundbracketclose_controlstructurebody_275(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_else_controlstructurebody_276(bool is_can, std::shared_ptr<leaf::parsing::instance::else_body>& actual, leaf::parsing::instance::else_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__else(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_control_structure_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__else(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_control_structure_body(depth + 1);
    actual->else_body = val6;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_else_body(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::else_body> fake;
    else_body_state state;
    if (!m_else_controlstructurebody_276(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::else_body> leaf::parsing::instance::p_match_else_body(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::else_body>();
    std::shared_ptr<leaf::parsing::instance::else_body> fake;
    else_body_state state;
    resettable resettable2(*this);
    if (m_else_controlstructurebody_276(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_else_controlstructurebody_276(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_for_roundbracketopen_277(bool is_can, std::shared_ptr<leaf::parsing::instance::for_body>& actual, leaf::parsing::instance::for_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__for(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_open(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__for(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto l9 = token__round_bracket_open(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_expression_278(bool is_can, std::shared_ptr<leaf::parsing::instance::for_body>& actual, leaf::parsing::instance::for_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_expression(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_expression_279(bool is_can, std::shared_ptr<leaf::parsing::instance::for_body>& actual, leaf::parsing::instance::for_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_expression(depth + 1);
    actual->pre = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if280_281(bool is_can, std::shared_ptr<leaf::parsing::instance::for_body>& actual, leaf::parsing::instance::for_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_expression_278(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_expression_279(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: expression (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_expression_279(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: expression (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_semicolon_282(bool is_can, std::shared_ptr<leaf::parsing::instance::for_body>& actual, leaf::parsing::instance::for_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__semicolon(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__semicolon(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_expression_283(bool is_can, std::shared_ptr<leaf::parsing::instance::for_body>& actual, leaf::parsing::instance::for_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_expression(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_expression_284(bool is_can, std::shared_ptr<leaf::parsing::instance::for_body>& actual, leaf::parsing::instance::for_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_expression(depth + 1);
    actual->condition = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if285_286(bool is_can, std::shared_ptr<leaf::parsing::instance::for_body>& actual, leaf::parsing::instance::for_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_expression_283(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_expression_284(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: expression (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_expression_284(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: expression (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_semicolon_287(bool is_can, std::shared_ptr<leaf::parsing::instance::for_body>& actual, leaf::parsing::instance::for_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__semicolon(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__semicolon(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_expression_288(bool is_can, std::shared_ptr<leaf::parsing::instance::for_body>& actual, leaf::parsing::instance::for_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_expression(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_expression_289(bool is_can, std::shared_ptr<leaf::parsing::instance::for_body>& actual, leaf::parsing::instance::for_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_expression(depth + 1);
    actual->post_inner = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if290_291(bool is_can, std::shared_ptr<leaf::parsing::instance::for_body>& actual, leaf::parsing::instance::for_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_expression_288(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_expression_289(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: expression (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_expression_289(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: expression (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_roundbracketclose_controlstructurebody_292(bool is_can, std::shared_ptr<leaf::parsing::instance::for_body>& actual, leaf::parsing::instance::for_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_control_structure_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__round_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_control_structure_body(depth + 1);
    actual->body = val6;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_for_body(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::for_body> fake;
    for_body_state state;
    if (!m_for_roundbracketopen_277(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if280_281(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_semicolon_282(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if285_286(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_semicolon_287(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if290_291(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_roundbracketclose_controlstructurebody_292(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::for_body> leaf::parsing::instance::p_match_for_body(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::for_body>();
    std::shared_ptr<leaf::parsing::instance::for_body> fake;
    for_body_state state;
    resettable resettable2(*this);
    if (m_for_roundbracketopen_277(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_for_roundbracketopen_277(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (if280_281(true, fake, state, depth + 1))
    {
        resettable3.reset();
        if280_281(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (m_semicolon_282(true, fake, state, depth + 1))
    {
        resettable4.reset();
        m_semicolon_282(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (if285_286(true, fake, state, depth + 1))
    {
        resettable5.reset();
        if285_286(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable6(*this);
    if (m_semicolon_287(true, fake, state, depth + 1))
    {
        resettable6.reset();
        m_semicolon_287(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable7(*this);
    if (if290_291(true, fake, state, depth + 1))
    {
        resettable7.reset();
        if290_291(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable8(*this);
    if (m_roundbracketclose_controlstructurebody_292(true, fake, state, depth + 1))
    {
        resettable8.reset();
        m_roundbracketclose_controlstructurebody_292(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_for_roundbracketopen_declaration_colon_expression_roundbracketclose_controlstructurebody_293(bool is_can, std::shared_ptr<leaf::parsing::instance::for_each_body>& actual, leaf::parsing::instance::for_each_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__for(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_open(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_declaration(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__colon(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l8 = token__round_bracket_close(depth + 1);
    if (l8.has_value())
    {
        for (auto i9 = l8.value(); i9 != 0; i9--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_control_structure_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l11 = token__for(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto l13 = token__round_bracket_open(depth + 1).value();
    for (;l13 != 0; l13--)
    {
        next();
    }
    skip();
    auto val14 = p_match_declaration(depth + 1);
    actual->pre = val14;
    skip();
    auto l16 = token__colon(depth + 1).value();
    for (;l16 != 0; l16--)
    {
        next();
    }
    skip();
    auto val17 = p_match_expression(depth + 1);
    actual->exp = val17;
    skip();
    auto l19 = token__round_bracket_close(depth + 1).value();
    for (;l19 != 0; l19--)
    {
        next();
    }
    skip();
    auto val20 = p_match_control_structure_body(depth + 1);
    actual->body = val20;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_for_each_body(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::for_each_body> fake;
    for_each_body_state state;
    if (!m_for_roundbracketopen_declaration_colon_expression_roundbracketclose_controlstructurebody_293(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::for_each_body> leaf::parsing::instance::p_match_for_each_body(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::for_each_body>();
    std::shared_ptr<leaf::parsing::instance::for_each_body> fake;
    for_each_body_state state;
    resettable resettable2(*this);
    if (m_for_roundbracketopen_declaration_colon_expression_roundbracketclose_controlstructurebody_293(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_for_roundbracketopen_declaration_colon_expression_roundbracketclose_controlstructurebody_293(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_ifbody_294(bool is_can, std::shared_ptr<leaf::parsing::instance::if_else>& actual, leaf::parsing::instance::if_else_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_if_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_if_body(depth + 1);
    actual->if_ = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_elsebody_295(bool is_can, std::shared_ptr<leaf::parsing::instance::if_else>& actual, leaf::parsing::instance::if_else_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_else_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_else_body(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_elsebody_296(bool is_can, std::shared_ptr<leaf::parsing::instance::if_else>& actual, leaf::parsing::instance::if_else_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_else_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_else_body(depth + 1);
    actual->else_ = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if297_298(bool is_can, std::shared_ptr<leaf::parsing::instance::if_else>& actual, leaf::parsing::instance::if_else_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_elsebody_295(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_elsebody_296(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: else-body (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_elsebody_296(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: else-body (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::p_can_if_else(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::if_else> fake;
    if_else_state state;
    if (!m_ifbody_294(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if297_298(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::if_else> leaf::parsing::instance::p_match_if_else(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::if_else>();
    std::shared_ptr<leaf::parsing::instance::if_else> fake;
    if_else_state state;
    resettable resettable2(*this);
    if (m_ifbody_294(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_ifbody_294(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (if297_298(true, fake, state, depth + 1))
    {
        resettable3.reset();
        if297_298(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_case_expvalue_colon_controlstructurebody_299(bool is_can, std::shared_ptr<leaf::parsing::instance::switch_case>& actual, leaf::parsing::instance::switch_case_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__case(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_exp_value(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__colon(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_control_structure_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__case(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = p_match_exp_value(depth + 1);
    actual->value = val8;
    skip();
    auto l10 = token__colon(depth + 1).value();
    for (;l10 != 0; l10--)
    {
        next();
    }
    skip();
    auto val11 = p_match_control_structure_body(depth + 1);
    actual->body = val11;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_switch_case(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::switch_case> fake;
    switch_case_state state;
    if (!m_case_expvalue_colon_controlstructurebody_299(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::switch_case> leaf::parsing::instance::p_match_switch_case(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::switch_case>();
    std::shared_ptr<leaf::parsing::instance::switch_case> fake;
    switch_case_state state;
    resettable resettable2(*this);
    if (m_case_expvalue_colon_controlstructurebody_299(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_case_expvalue_colon_controlstructurebody_299(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_switch_roundbracketopen_expression_roundbracketclose_300(bool is_can, std::shared_ptr<leaf::parsing::instance::switch_>& actual, leaf::parsing::instance::switch__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__switch(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_open(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__round_bracket_close(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l9 = token__switch(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    auto l11 = token__round_bracket_open(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto val12 = p_match_expression(depth + 1);
    actual->value = val12;
    skip();
    auto l14 = token__round_bracket_close(depth + 1).value();
    for (;l14 != 0; l14--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_curlybracketclose_301(bool is_can, std::shared_ptr<leaf::parsing::instance::switch_>& actual, leaf::parsing::instance::switch__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_switchcase_302(bool is_can, std::shared_ptr<leaf::parsing::instance::switch_>& actual, leaf::parsing::instance::switch__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_switch_case(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_switch_case(depth + 1);
    actual->part.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::if303_304(bool is_can, std::shared_ptr<leaf::parsing::instance::switch_>& actual, leaf::parsing::instance::switch__state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = state.has_default.value();
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            report(" Multiple default cases found", depth);
            return true;
        }
        else
        {
            if (!is_can)
            {
                state.has_default = true;
            }
            return true;
        }
    }
    else
    {
        if (cond2)
        {
            report(" Multiple default cases found", depth);
            return true;
        }
        else
        {
            if (!is_can)
            {
                state.has_default = true;
            }
            return true;
        }
    }
}
bool leaf::parsing::instance::m_default_colon_controlstructurebody_305(bool is_can, std::shared_ptr<leaf::parsing::instance::switch_>& actual, leaf::parsing::instance::switch__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__default(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__colon(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_control_structure_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__default(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto l9 = token__colon(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    auto val10 = p_match_control_structure_body(depth + 1);
    actual->default_body.push_back(val10);
    skip();
    if303_304(false, actual, state, depth + 1);
    return true;
}
bool leaf::parsing::instance::m_pragma_306(bool is_can, std::shared_ptr<leaf::parsing::instance::switch_>& actual, leaf::parsing::instance::switch__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_pragma(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_pragma(depth + 1);
    actual->pragmas.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives307(bool is_can, std::shared_ptr<leaf::parsing::instance::switch_>& actual, leaf::parsing::instance::switch__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_switchcase_302(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_switchcase_302(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_default_colon_controlstructurebody_305(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_default_colon_controlstructurebody_305(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_pragma_306(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_pragma_306(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (!is_can)
    {
        report("Failed to match one of the following: { switch-case, default, :, control-structure-body, pragma }", depth);
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while308_309(bool is_can, std::shared_ptr<leaf::parsing::instance::switch_>& actual, leaf::parsing::instance::switch__state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_curlybracketclose_301(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            while (!alternatives307(true, actual, state, depth + 1) && current() != '\0')
            {
                next();
            }
            resettable resettable2(*this);
            cond3 = m_curlybracketclose_301(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            if (!alternatives307(false, actual, state, depth + 1))
            {
                while (current() != '\0')
                {
                    resettable resettable4(*this);
                    if (alternatives307(true, actual, state, depth + 1))
                    {
                        resettable4.reset();
                        break;
                    }
                    next();
                }
            }
            resettable resettable2(*this);
            cond3 = m_curlybracketclose_301(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_curlybracketclose_310(bool is_can, std::shared_ptr<leaf::parsing::instance::switch_>& actual, leaf::parsing::instance::switch__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_switch_(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::switch_> fake;
    switch__state state;
    if (!m_switch_roundbracketopen_expression_roundbracketclose_300(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while308_309(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_curlybracketclose_310(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::switch_> leaf::parsing::instance::p_match_switch_(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::switch_>();
    std::shared_ptr<leaf::parsing::instance::switch_> fake;
    switch__state state;
    resettable resettable2(*this);
    resettable resettable3(*this);
    if (m_switch_roundbracketopen_expression_roundbracketclose_300(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_switch_roundbracketopen_expression_roundbracketclose_300(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (while308_309(true, fake, state, depth + 1))
    {
        resettable4.reset();
        while308_309(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (m_curlybracketclose_310(true, fake, state, depth + 1))
    {
        resettable5.reset();
        m_curlybracketclose_310(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_eol_311(bool is_can, std::shared_ptr<leaf::parsing::instance::assembly_terminate>& actual, leaf::parsing::instance::assembly_terminate_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__eol(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__eol(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_curlybracketclose_312(bool is_can, std::shared_ptr<leaf::parsing::instance::assembly_terminate>& actual, leaf::parsing::instance::assembly_terminate_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives313(bool is_can, std::shared_ptr<leaf::parsing::instance::assembly_terminate>& actual, leaf::parsing::instance::assembly_terminate_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_eol_311(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_eol_311(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_curlybracketclose_312(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_curlybracketclose_312(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_assembly_terminate(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::assembly_terminate> fake;
    assembly_terminate_state state;
    if (!alternatives313(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::assembly_terminate> leaf::parsing::instance::p_match_assembly_terminate(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::assembly_terminate>();
    std::shared_ptr<leaf::parsing::instance::assembly_terminate> fake;
    assembly_terminate_state state;
    resettable resettable2(*this);
    if (alternatives313(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives313(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_assembly_curlybracketopen_314(bool is_can, std::shared_ptr<leaf::parsing::instance::assembly>& actual, leaf::parsing::instance::assembly_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__assembly(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__curly_bracket_open(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__assembly(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto l9 = token__curly_bracket_open(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_curlybracketclose_315(bool is_can, std::shared_ptr<leaf::parsing::instance::assembly>& actual, leaf::parsing::instance::assembly_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_assemblyterminate_316(bool is_can, std::shared_ptr<leaf::parsing::instance::assembly>& actual, leaf::parsing::instance::assembly_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_assembly_terminate(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_assembly_terminate(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_scalar_317(bool is_can, std::shared_ptr<leaf::parsing::instance::assembly>& actual, leaf::parsing::instance::assembly_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_scalar(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_scalar(depth + 1).value(), tok::SCALAR);
    actual->args.push_back(val4);
    skip();
    return true;
}
bool leaf::parsing::instance::m_integerbinary_318(bool is_can, std::shared_ptr<leaf::parsing::instance::assembly>& actual, leaf::parsing::instance::assembly_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer_binary(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_integer_binary(depth + 1).value(), tok::INTEGER_BINARY);
    actual->args.push_back(val4);
    skip();
    return true;
}
bool leaf::parsing::instance::m_integerhex_319(bool is_can, std::shared_ptr<leaf::parsing::instance::assembly>& actual, leaf::parsing::instance::assembly_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer_hex(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_integer_hex(depth + 1).value(), tok::INTEGER_HEX);
    actual->args.push_back(val4);
    skip();
    return true;
}
bool leaf::parsing::instance::m_integer_320(bool is_can, std::shared_ptr<leaf::parsing::instance::assembly>& actual, leaf::parsing::instance::assembly_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_integer(depth + 1).value(), tok::INTEGER);
    actual->args.push_back(val4);
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives321(bool is_can, std::shared_ptr<leaf::parsing::instance::assembly>& actual, leaf::parsing::instance::assembly_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_scalar_317(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_scalar_317(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integerbinary_318(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integerbinary_318(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integerhex_319(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integerhex_319(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integer_320(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integer_320(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while322_323(bool is_can, std::shared_ptr<leaf::parsing::instance::assembly>& actual, leaf::parsing::instance::assembly_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_assemblyterminate_316(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            alternatives321(true, actual, state, depth + 1);
            resettable resettable2(*this);
            cond3 = m_assemblyterminate_316(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            alternatives321(false, actual, state, depth + 1);
            resettable resettable2(*this);
            cond3 = m_assemblyterminate_316(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_ident_324(bool is_can, std::shared_ptr<leaf::parsing::instance::assembly>& actual, leaf::parsing::instance::assembly_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->opcode.push_back(val4);
    skip();
    while322_323(false, actual, state, depth + 1);
    return true;
}
bool leaf::parsing::instance::while325_326(bool is_can, std::shared_ptr<leaf::parsing::instance::assembly>& actual, leaf::parsing::instance::assembly_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_curlybracketclose_315(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            if (m_ident_324(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: ident ({ Token: ident}) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_curlybracketclose_315(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            if (m_ident_324(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: ident ({ Token: ident}) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_curlybracketclose_315(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_curlybracketclose_327(bool is_can, std::shared_ptr<leaf::parsing::instance::assembly>& actual, leaf::parsing::instance::assembly_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_assembly(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::assembly> fake;
    assembly_state state;
    if (!m_assembly_curlybracketopen_314(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while325_326(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_curlybracketclose_327(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::assembly> leaf::parsing::instance::p_match_assembly(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::assembly>();
    std::shared_ptr<leaf::parsing::instance::assembly> fake;
    assembly_state state;
    resettable resettable2(*this);
    if (m_assembly_curlybracketopen_314(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_assembly_curlybracketopen_314(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (while325_326(true, fake, state, depth + 1))
    {
        resettable3.reset();
        while325_326(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (m_curlybracketclose_327(true, fake, state, depth + 1))
    {
        resettable4.reset();
        m_curlybracketclose_327(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_pragma_328(bool is_can, std::shared_ptr<leaf::parsing::instance::control_structure>& actual, leaf::parsing::instance::control_structure_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_pragma(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_pragma(depth + 1);
    actual->pragmas = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_whileloop_329(bool is_can, std::shared_ptr<leaf::parsing::instance::control_structure>& actual, leaf::parsing::instance::control_structure_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_while_loop(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_while_loop(depth + 1);
    actual->content = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_forbody_330(bool is_can, std::shared_ptr<leaf::parsing::instance::control_structure>& actual, leaf::parsing::instance::control_structure_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_for_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_for_body(depth + 1);
    actual->content = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_foreachbody_331(bool is_can, std::shared_ptr<leaf::parsing::instance::control_structure>& actual, leaf::parsing::instance::control_structure_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_for_each_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_for_each_body(depth + 1);
    actual->content = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ifelse_332(bool is_can, std::shared_ptr<leaf::parsing::instance::control_structure>& actual, leaf::parsing::instance::control_structure_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_if_else(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_if_else(depth + 1);
    actual->content = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_switch_333(bool is_can, std::shared_ptr<leaf::parsing::instance::control_structure>& actual, leaf::parsing::instance::control_structure_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_switch_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_switch_(depth + 1);
    actual->content = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_scope_334(bool is_can, std::shared_ptr<leaf::parsing::instance::control_structure>& actual, leaf::parsing::instance::control_structure_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_scope(depth + 1);
    actual->content = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_assembly_335(bool is_can, std::shared_ptr<leaf::parsing::instance::control_structure>& actual, leaf::parsing::instance::control_structure_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_assembly(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_assembly(depth + 1);
    actual->content = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives336(bool is_can, std::shared_ptr<leaf::parsing::instance::control_structure>& actual, leaf::parsing::instance::control_structure_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_pragma_328(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_pragma_328(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_whileloop_329(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_whileloop_329(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_forbody_330(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_forbody_330(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_foreachbody_331(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_foreachbody_331(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ifelse_332(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ifelse_332(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_switch_333(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_switch_333(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_scope_334(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_scope_334(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_assembly_335(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_assembly_335(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_control_structure(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::control_structure> fake;
    control_structure_state state;
    if (!alternatives336(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::control_structure> leaf::parsing::instance::p_match_control_structure(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::control_structure>();
    std::shared_ptr<leaf::parsing::instance::control_structure> fake;
    control_structure_state state;
    resettable resettable2(*this);
    if (alternatives336(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives336(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_alloc_337(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_chain_start>& actual, leaf::parsing::instance::exp_chain_start_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_alloc(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_alloc(depth + 1);
    actual->part_alloc = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_free_338(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_chain_start>& actual, leaf::parsing::instance::exp_chain_start_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_free(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_free(depth + 1);
    actual->part_free = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_call_339(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_chain_start>& actual, leaf::parsing::instance::exp_chain_start_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_call(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_call(depth + 1);
    actual->part_call = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ident_340(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_chain_start>& actual, leaf::parsing::instance::exp_chain_start_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->part_ident = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives341(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_chain_start>& actual, leaf::parsing::instance::exp_chain_start_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_alloc_337(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_alloc_337(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_free_338(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_free_338(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_call_339(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_call_339(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ident_340(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_340(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_exp_chain_start(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_chain_start> fake;
    exp_chain_start_state state;
    if (!alternatives341(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::exp_chain_start> leaf::parsing::instance::p_match_exp_chain_start(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_chain_start>();
    std::shared_ptr<leaf::parsing::instance::exp_chain_start> fake;
    exp_chain_start_state state;
    resettable resettable2(*this);
    if (alternatives341(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives341(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_typeof_342(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_constant>& actual, leaf::parsing::instance::exp_constant_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_typeof_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_typeof_(depth + 1);
    actual->typeof_ = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_nameof_343(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_constant>& actual, leaf::parsing::instance::exp_constant_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_nameof(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_nameof(depth + 1);
    actual->nameof = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_fqnameof_344(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_constant>& actual, leaf::parsing::instance::exp_constant_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_fqnameof(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_fqnameof(depth + 1);
    actual->fqnameof = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_sizeof_345(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_constant>& actual, leaf::parsing::instance::exp_constant_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_sizeof_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_sizeof_(depth + 1);
    actual->sizeof_ = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_scalar_346(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_constant>& actual, leaf::parsing::instance::exp_constant_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_scalar(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_scalar(depth + 1).value(), tok::SCALAR);
    actual->t = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_false_347(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_constant>& actual, leaf::parsing::instance::exp_constant_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_false_(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_false_(depth + 1).value(), tok::FALSE_);
    actual->t = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_true_348(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_constant>& actual, leaf::parsing::instance::exp_constant_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_true_(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_true_(depth + 1).value(), tok::TRUE_);
    actual->t = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integerhex_349(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_constant>& actual, leaf::parsing::instance::exp_constant_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer_hex(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_integer_hex(depth + 1).value(), tok::INTEGER_HEX);
    actual->t = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integerbinary_350(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_constant>& actual, leaf::parsing::instance::exp_constant_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer_binary(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_integer_binary(depth + 1).value(), tok::INTEGER_BINARY);
    actual->t = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integer_351(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_constant>& actual, leaf::parsing::instance::exp_constant_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_integer(depth + 1).value(), tok::INTEGER);
    actual->t = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_string_352(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_constant>& actual, leaf::parsing::instance::exp_constant_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_string(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_string(depth + 1).value(), tok::STRING);
    actual->t = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_char_353(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_constant>& actual, leaf::parsing::instance::exp_constant_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_char_(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_char_(depth + 1).value(), tok::CHAR_);
    actual->t = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives354(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_constant>& actual, leaf::parsing::instance::exp_constant_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_typeof_342(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_typeof_342(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_nameof_343(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_nameof_343(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_fqnameof_344(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_fqnameof_344(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_sizeof_345(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_sizeof_345(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_scalar_346(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_scalar_346(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_false_347(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_false_347(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_true_348(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_true_348(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integerhex_349(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integerhex_349(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integerbinary_350(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integerbinary_350(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integer_351(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integer_351(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_string_352(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_string_352(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_char_353(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_char_353(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_exp_constant(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_constant> fake;
    exp_constant_state state;
    if (!alternatives354(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::exp_constant> leaf::parsing::instance::p_match_exp_constant(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_constant>();
    std::shared_ptr<leaf::parsing::instance::exp_constant> fake;
    exp_constant_state state;
    resettable resettable2(*this);
    if (alternatives354(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives354(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_capturelist_methodarglist_scopelambda_355(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_lambda>& actual, leaf::parsing::instance::exp_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_capture_list(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_method_arglist(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_scope_lambda(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_capture_list(depth + 1);
    actual->capture = val2;
    skip();
    auto val3 = p_match_method_arglist(depth + 1);
    actual->args = val3;
    skip();
    auto val4 = p_match_scope_lambda(depth + 1);
    actual->scope = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_methodarglist_scopelambda_356(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_lambda>& actual, leaf::parsing::instance::exp_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_arglist(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_scope_lambda(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_method_arglist(depth + 1);
    actual->args = val2;
    skip();
    auto val3 = p_match_scope_lambda(depth + 1);
    actual->scope = val3;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives357(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_lambda>& actual, leaf::parsing::instance::exp_lambda_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_capturelist_methodarglist_scopelambda_355(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_capturelist_methodarglist_scopelambda_355(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_methodarglist_scopelambda_356(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_methodarglist_scopelambda_356(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_exp_lambda(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_lambda> fake;
    exp_lambda_state state;
    if (!alternatives357(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::exp_lambda> leaf::parsing::instance::p_match_exp_lambda(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_lambda>();
    std::shared_ptr<leaf::parsing::instance::exp_lambda> fake;
    exp_lambda_state state;
    resettable resettable2(*this);
    if (alternatives357(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives357(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_copy_358(bool is_can, std::shared_ptr<leaf::parsing::instance::capture_list_item>& actual, leaf::parsing::instance::capture_list_item_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__copy(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__copy(depth + 1).value(), tok::_COPY);
    actual->capture_type = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives359(bool is_can, std::shared_ptr<leaf::parsing::instance::capture_list_item>& actual, leaf::parsing::instance::capture_list_item_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_copy_358(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_copy_358(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::m_ident_360(bool is_can, std::shared_ptr<leaf::parsing::instance::capture_list_item>& actual, leaf::parsing::instance::capture_list_item_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->variable = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_capture_list_item(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::capture_list_item> fake;
    capture_list_item_state state;
    if (!alternatives359(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_ident_360(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::capture_list_item> leaf::parsing::instance::p_match_capture_list_item(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::capture_list_item>();
    std::shared_ptr<leaf::parsing::instance::capture_list_item> fake;
    capture_list_item_state state;
    resettable resettable2(*this);
    if (alternatives359(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives359(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_ident_360(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_ident_360(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_squarebracketopen_361(bool is_can, std::shared_ptr<leaf::parsing::instance::capture_list>& actual, leaf::parsing::instance::capture_list_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__square_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__square_bracket_open(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_capturelistitem_362(bool is_can, std::shared_ptr<leaf::parsing::instance::capture_list>& actual, leaf::parsing::instance::capture_list_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_capture_list_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_capture_list_item(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_capturelistitem_363(bool is_can, std::shared_ptr<leaf::parsing::instance::capture_list>& actual, leaf::parsing::instance::capture_list_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_capture_list_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_capture_list_item(depth + 1);
    actual->items.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_capturelistitem_364(bool is_can, std::shared_ptr<leaf::parsing::instance::capture_list>& actual, leaf::parsing::instance::capture_list_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_capture_list_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_capture_list_item(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_capturelistitem_365(bool is_can, std::shared_ptr<leaf::parsing::instance::capture_list>& actual, leaf::parsing::instance::capture_list_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_capture_list_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_capture_list_item(depth + 1);
    actual->items.push_back(val6);
    skip();
    return true;
}
bool leaf::parsing::instance::while366_367(bool is_can, std::shared_ptr<leaf::parsing::instance::capture_list>& actual, leaf::parsing::instance::capture_list_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_capturelistitem_364(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_comma_capturelistitem_365(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}), $ref: capture-list-item (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_capturelistitem_364(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_comma_capturelistitem_365(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}), $ref: capture-list-item (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_capturelistitem_364(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_comma_368(bool is_can, std::shared_ptr<leaf::parsing::instance::capture_list>& actual, leaf::parsing::instance::capture_list_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_369(bool is_can, std::shared_ptr<leaf::parsing::instance::capture_list>& actual, leaf::parsing::instance::capture_list_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::if370_371(bool is_can, std::shared_ptr<leaf::parsing::instance::capture_list>& actual, leaf::parsing::instance::capture_list_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_comma_368(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_comma_369(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_comma_369(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::if372_373(bool is_can, std::shared_ptr<leaf::parsing::instance::capture_list>& actual, leaf::parsing::instance::capture_list_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_capturelistitem_362(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_capturelistitem_363(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: capture-list-item (XCG.Parsing.Production) }", depth);
                return false;
            }
            while366_367(true, actual, state, depth + 1);
            if370_371(true, actual, state, depth + 1);
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_capturelistitem_363(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: capture-list-item (XCG.Parsing.Production) }", depth);
                return false;
            }
            while366_367(false, actual, state, depth + 1);
            if370_371(false, actual, state, depth + 1);
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_squarebracketclose_374(bool is_can, std::shared_ptr<leaf::parsing::instance::capture_list>& actual, leaf::parsing::instance::capture_list_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__square_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__square_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_capture_list(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::capture_list> fake;
    capture_list_state state;
    if (!m_squarebracketopen_361(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if372_373(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_squarebracketclose_374(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::capture_list> leaf::parsing::instance::p_match_capture_list(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::capture_list>();
    std::shared_ptr<leaf::parsing::instance::capture_list> fake;
    capture_list_state state;
    resettable resettable2(*this);
    if (m_squarebracketopen_361(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_squarebracketopen_361(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (if372_373(true, fake, state, depth + 1))
    {
        resettable3.reset();
        if372_373(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (m_squarebracketclose_374(true, fake, state, depth + 1))
    {
        resettable4.reset();
        m_squarebracketclose_374(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_explambda_375(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_value>& actual, leaf::parsing::instance::exp_value_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_exp_lambda(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_exp_lambda(depth + 1);
    actual->exp_lambda = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expconstant_376(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_value>& actual, leaf::parsing::instance::exp_value_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_exp_constant(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_exp_constant(depth + 1);
    actual->constants = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_scalarliteral_377(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_value>& actual, leaf::parsing::instance::exp_value_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_scalar_literal(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_scalar_literal(depth + 1);
    actual->scalar = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integerhexliteral_378(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_value>& actual, leaf::parsing::instance::exp_value_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_integer_hex_literal(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_integer_hex_literal(depth + 1);
    actual->integer_hex = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integerbinaryliteral_379(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_value>& actual, leaf::parsing::instance::exp_value_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_integer_binary_literal(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_integer_binary_literal(depth + 1);
    actual->integer_binary = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integerliteral_380(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_value>& actual, leaf::parsing::instance::exp_value_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_integer_literal(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_integer_literal(depth + 1);
    actual->integer = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_charliteral_381(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_value>& actual, leaf::parsing::instance::exp_value_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_char_literal(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_char_literal(depth + 1);
    actual->character = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_stringliteral_382(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_value>& actual, leaf::parsing::instance::exp_value_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_string_literal(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_string_literal(depth + 1);
    actual->string = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives383(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_value>& actual, leaf::parsing::instance::exp_value_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_explambda_375(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_explambda_375(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_expconstant_376(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_expconstant_376(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_scalarliteral_377(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_scalarliteral_377(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integerhexliteral_378(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integerhexliteral_378(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integerbinaryliteral_379(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integerbinaryliteral_379(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integerliteral_380(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integerliteral_380(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_charliteral_381(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_charliteral_381(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_stringliteral_382(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_stringliteral_382(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_exp_value(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_value> fake;
    exp_value_state state;
    if (!alternatives383(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::exp_value> leaf::parsing::instance::p_match_exp_value(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_value>();
    std::shared_ptr<leaf::parsing::instance::exp_value> fake;
    exp_value_state state;
    resettable resettable2(*this);
    if (alternatives383(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives383(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_roundbracketopen_expression_roundbracketclose_384(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_nullar>& actual, leaf::parsing::instance::exp_nullar_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_close(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__round_bracket_open(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = p_match_expression(depth + 1);
    actual->value = val8;
    skip();
    auto l10 = token__round_bracket_close(depth + 1).value();
    for (;l10 != 0; l10--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_expchain_385(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_nullar>& actual, leaf::parsing::instance::exp_nullar_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_exp_chain(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_exp_chain(depth + 1);
    actual->value = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expvalue_386(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_nullar>& actual, leaf::parsing::instance::exp_nullar_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_exp_value(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_exp_value(depth + 1);
    actual->value = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives387(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_nullar>& actual, leaf::parsing::instance::exp_nullar_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_roundbracketopen_expression_roundbracketclose_384(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_roundbracketopen_expression_roundbracketclose_384(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_expchain_385(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_expchain_385(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_expvalue_386(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_expvalue_386(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_exp_nullar(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_nullar> fake;
    exp_nullar_state state;
    if (!alternatives387(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::exp_nullar> leaf::parsing::instance::p_match_exp_nullar(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_nullar>();
    std::shared_ptr<leaf::parsing::instance::exp_nullar> fake;
    exp_nullar_state state;
    resettable resettable2(*this);
    if (alternatives387(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives387(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_exclamation_expunary_388(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_unary>& actual, leaf::parsing::instance::exp_unary_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__exclamation(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_exp_unary(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__exclamation(depth + 1).value(), tok::_EXCLAMATION);
    actual->operator_ = val4;
    skip();
    auto val5 = p_match_exp_unary(depth + 1);
    actual->value = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_tilde_expunary_389(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_unary>& actual, leaf::parsing::instance::exp_unary_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__tilde(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_exp_unary(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__tilde(depth + 1).value(), tok::_TILDE);
    actual->operator_ = val4;
    skip();
    auto val5 = p_match_exp_unary(depth + 1);
    actual->value = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_minus_expunary_390(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_unary>& actual, leaf::parsing::instance::exp_unary_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_minus(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_exp_unary(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_minus(depth + 1).value(), tok::MINUS);
    actual->operator_ = val4;
    skip();
    auto val5 = p_match_exp_unary(depth + 1);
    actual->value = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_plus_expunary_391(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_unary>& actual, leaf::parsing::instance::exp_unary_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_plus(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_exp_unary(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_plus(depth + 1).value(), tok::PLUS);
    actual->operator_ = val4;
    skip();
    auto val5 = p_match_exp_unary(depth + 1);
    actual->value = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_roundbracketopen_typematch_roundbracketclose_expunary_392(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_unary>& actual, leaf::parsing::instance::exp_unary_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_close(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_exp_unary(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__round_bracket_open(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = p_match_type_match(depth + 1);
    actual->cast_target = val8;
    skip();
    auto l10 = token__round_bracket_close(depth + 1).value();
    for (;l10 != 0; l10--)
    {
        next();
    }
    skip();
    auto val11 = p_match_exp_unary(depth + 1);
    actual->value = val11;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expnullar_393(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_unary>& actual, leaf::parsing::instance::exp_unary_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_exp_nullar(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_exp_nullar(depth + 1);
    actual->value = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives394(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_unary>& actual, leaf::parsing::instance::exp_unary_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_exclamation_expunary_388(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_exclamation_expunary_388(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_tilde_expunary_389(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_tilde_expunary_389(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_minus_expunary_390(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_minus_expunary_390(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_plus_expunary_391(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_plus_expunary_391(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_roundbracketopen_typematch_roundbracketclose_expunary_392(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_roundbracketopen_typematch_roundbracketclose_expunary_392(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_expnullar_393(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_expnullar_393(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_exp_unary(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_unary> fake;
    exp_unary_state state;
    if (!alternatives394(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::exp_unary> leaf::parsing::instance::p_match_exp_unary(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_unary>();
    std::shared_ptr<leaf::parsing::instance::exp_unary> fake;
    exp_unary_state state;
    resettable resettable2(*this);
    if (alternatives394(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives394(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_expor_equal_expression_395(bool is_can, std::shared_ptr<leaf::parsing::instance::expression>& actual, leaf::parsing::instance::expression_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_exp_or(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = lr_match_exp_or(depth + 1);
    actual->assign_to = val4;
    skip();
    auto l6 = token__equal(depth + 1).value();
    for (;l6 != 0; l6--)
    {
        next();
    }
    skip();
    auto val7 = p_match_expression(depth + 1);
    actual->value = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expor_396(bool is_can, std::shared_ptr<leaf::parsing::instance::expression>& actual, leaf::parsing::instance::expression_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_exp_or(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_exp_or(depth + 1);
    actual->exp = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_expression(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::expression> fake;
    expression_state state;
    if (!m_expor_equal_expression_395(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_expor_396(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::expression> leaf::parsing::instance::p_match_expression(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::expression>();
    std::shared_ptr<leaf::parsing::instance::expression> fake;
    expression_state state;
    resettable resettable2(*this);
    if (m_expor_equal_expression_395(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_expor_equal_expression_395(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_expor_396(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_expor_396(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_public_397(bool is_can, std::shared_ptr<leaf::parsing::instance::encapsulation>& actual, leaf::parsing::instance::encapsulation_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__public(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__public(depth + 1).value(), tok::_PUBLIC);
    actual->tok = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_local_398(bool is_can, std::shared_ptr<leaf::parsing::instance::encapsulation>& actual, leaf::parsing::instance::encapsulation_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__local(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__local(depth + 1).value(), tok::_LOCAL);
    actual->tok = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_derived_399(bool is_can, std::shared_ptr<leaf::parsing::instance::encapsulation>& actual, leaf::parsing::instance::encapsulation_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__derived(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__derived(depth + 1).value(), tok::_DERIVED);
    actual->tok = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_private_400(bool is_can, std::shared_ptr<leaf::parsing::instance::encapsulation>& actual, leaf::parsing::instance::encapsulation_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__private(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__private(depth + 1).value(), tok::_PRIVATE);
    actual->tok = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives401(bool is_can, std::shared_ptr<leaf::parsing::instance::encapsulation>& actual, leaf::parsing::instance::encapsulation_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_public_397(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_public_397(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_local_398(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_local_398(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_derived_399(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_derived_399(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_private_400(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_private_400(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_encapsulation(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::encapsulation> fake;
    encapsulation_state state;
    if (!alternatives401(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::encapsulation> leaf::parsing::instance::p_match_encapsulation(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::encapsulation>();
    std::shared_ptr<leaf::parsing::instance::encapsulation> fake;
    encapsulation_state state;
    resettable resettable2(*this);
    if (alternatives401(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives401(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attribute_402(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attribute_403(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute(depth + 1);
    actual->attributes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::while404_405(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attribute_402(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_403(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_402(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_403(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_402(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_namespace_identnavigation_406(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__namespace(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_ident_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__namespace(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = lr_match_ident_navigation(depth + 1);
    actual->name = val6;
    skip();
    return true;
}
bool leaf::parsing::instance::m_curlybracketopen_407(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_open(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_curlybracketclose_408(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_using_409(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_using_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_using_(depth + 1);
    actual->usings.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_pragma_410(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_pragma(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_pragma(depth + 1);
    actual->pragmas.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_aliasencapsulated_411(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_alias_encapsulated(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_alias_encapsulated(depth + 1);
    actual->aliases.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_class_412(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_class_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_class_(depth + 1);
    actual->classes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_constant_413(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_constant(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_constant(depth + 1);
    actual->constants.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_contract_414(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_contract(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_contract(depth + 1);
    actual->contracts.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_conversion_415(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_conversion(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_conversion(depth + 1);
    actual->conversions.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_field_416(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_field(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_field(depth + 1);
    actual->fields.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_method_417(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_method(depth + 1);
    actual->methods.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_namespace_418(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_namespace_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_namespace_(depth + 1);
    actual->namespaces.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_property_419(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_property(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_property(depth + 1);
    actual->properties.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives420(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_using_409(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_using_409(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_pragma_410(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_pragma_410(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_aliasencapsulated_411(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_aliasencapsulated_411(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_class_412(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_class_412(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_constant_413(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_constant_413(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_contract_414(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_contract_414(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_conversion_415(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_conversion_415(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_field_416(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_field_416(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_method_417(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_method_417(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_namespace_418(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_namespace_418(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_property_419(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_property_419(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (!is_can)
    {
        report("Failed to match one of the following: { using, pragma, alias-encapsulated, class, constant, contract, conversion, field, method, namespace, property }", depth);
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while421_422(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_curlybracketclose_408(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            while (!alternatives420(true, actual, state, depth + 1) && current() != '\0')
            {
                next();
            }
            resettable resettable2(*this);
            cond3 = m_curlybracketclose_408(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            if (!alternatives420(false, actual, state, depth + 1))
            {
                while (current() != '\0')
                {
                    resettable resettable4(*this);
                    if (alternatives420(true, actual, state, depth + 1))
                    {
                        resettable4.reset();
                        break;
                    }
                    next();
                }
            }
            resettable resettable2(*this);
            cond3 = m_curlybracketclose_408(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_curlybracketclose_423(bool is_can, std::shared_ptr<leaf::parsing::instance::namespace_>& actual, leaf::parsing::instance::namespace__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_namespace_(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::namespace_> fake;
    namespace__state state;
    if (!while404_405(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_namespace_identnavigation_406(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_curlybracketopen_407(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while421_422(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_curlybracketclose_423(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::namespace_> leaf::parsing::instance::p_match_namespace_(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::namespace_>();
    std::shared_ptr<leaf::parsing::instance::namespace_> fake;
    namespace__state state;
    resettable resettable2(*this);
    if (while404_405(true, fake, state, depth + 1))
    {
        resettable2.reset();
        while404_405(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_namespace_identnavigation_406(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_namespace_identnavigation_406(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (m_curlybracketopen_407(true, fake, state, depth + 1))
    {
        resettable4.reset();
        m_curlybracketopen_407(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (while421_422(true, fake, state, depth + 1))
    {
        resettable5.reset();
        while421_422(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable6(*this);
    if (m_curlybracketclose_423(true, fake, state, depth + 1))
    {
        resettable6.reset();
        m_curlybracketclose_423(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_colon_424(bool is_can, std::shared_ptr<leaf::parsing::instance::class_extends>& actual, leaf::parsing::instance::class_extends_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__colon(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__colon(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_typenavigation_425(bool is_can, std::shared_ptr<leaf::parsing::instance::class_extends>& actual, leaf::parsing::instance::class_extends_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_type_navigation(depth + 1);
    actual->types.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_426(bool is_can, std::shared_ptr<leaf::parsing::instance::class_extends>& actual, leaf::parsing::instance::class_extends_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_typenavigation_427(bool is_can, std::shared_ptr<leaf::parsing::instance::class_extends>& actual, leaf::parsing::instance::class_extends_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = lr_match_type_navigation(depth + 1);
    actual->types.push_back(val6);
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_428(bool is_can, std::shared_ptr<leaf::parsing::instance::class_extends>& actual, leaf::parsing::instance::class_extends_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives429(bool is_can, std::shared_ptr<leaf::parsing::instance::class_extends>& actual, leaf::parsing::instance::class_extends_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_comma_typenavigation_427(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_typenavigation_427(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_comma_428(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_428(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while430_431(bool is_can, std::shared_ptr<leaf::parsing::instance::class_extends>& actual, leaf::parsing::instance::class_extends_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_comma_426(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            alternatives429(true, actual, state, depth + 1);
            resettable resettable2(*this);
            cond3 = m_comma_426(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            alternatives429(false, actual, state, depth + 1);
            resettable resettable2(*this);
            cond3 = m_comma_426(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::p_can_class_extends(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::class_extends> fake;
    class_extends_state state;
    if (!m_colon_424(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_typenavigation_425(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while430_431(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::class_extends> leaf::parsing::instance::p_match_class_extends(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::class_extends>();
    std::shared_ptr<leaf::parsing::instance::class_extends> fake;
    class_extends_state state;
    resettable resettable2(*this);
    if (m_colon_424(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_colon_424(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_typenavigation_425(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_typenavigation_425(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (while430_431(true, fake, state, depth + 1))
    {
        resettable4.reset();
        while430_431(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_implementing_432(bool is_can, std::shared_ptr<leaf::parsing::instance::class_implements>& actual, leaf::parsing::instance::class_implements_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__implementing(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__implementing(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_typenavigation_433(bool is_can, std::shared_ptr<leaf::parsing::instance::class_implements>& actual, leaf::parsing::instance::class_implements_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_type_navigation(depth + 1);
    actual->types.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_434(bool is_can, std::shared_ptr<leaf::parsing::instance::class_implements>& actual, leaf::parsing::instance::class_implements_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_typenavigation_435(bool is_can, std::shared_ptr<leaf::parsing::instance::class_implements>& actual, leaf::parsing::instance::class_implements_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = lr_match_type_navigation(depth + 1);
    actual->types.push_back(val6);
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_436(bool is_can, std::shared_ptr<leaf::parsing::instance::class_implements>& actual, leaf::parsing::instance::class_implements_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives437(bool is_can, std::shared_ptr<leaf::parsing::instance::class_implements>& actual, leaf::parsing::instance::class_implements_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_comma_typenavigation_435(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_typenavigation_435(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_comma_436(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_436(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while438_439(bool is_can, std::shared_ptr<leaf::parsing::instance::class_implements>& actual, leaf::parsing::instance::class_implements_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_comma_434(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            alternatives437(true, actual, state, depth + 1);
            resettable resettable2(*this);
            cond3 = m_comma_434(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            alternatives437(false, actual, state, depth + 1);
            resettable resettable2(*this);
            cond3 = m_comma_434(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::p_can_class_implements(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::class_implements> fake;
    class_implements_state state;
    if (!m_implementing_432(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_typenavigation_433(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while438_439(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::class_implements> leaf::parsing::instance::p_match_class_implements(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::class_implements>();
    std::shared_ptr<leaf::parsing::instance::class_implements> fake;
    class_implements_state state;
    resettable resettable2(*this);
    if (m_implementing_432(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_implementing_432(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_typenavigation_433(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_typenavigation_433(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (while438_439(true, fake, state, depth + 1))
    {
        resettable4.reset();
        while438_439(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_importing_440(bool is_can, std::shared_ptr<leaf::parsing::instance::class_imports>& actual, leaf::parsing::instance::class_imports_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__importing(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__importing(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_typenavigation_441(bool is_can, std::shared_ptr<leaf::parsing::instance::class_imports>& actual, leaf::parsing::instance::class_imports_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_type_navigation(depth + 1);
    actual->types.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_442(bool is_can, std::shared_ptr<leaf::parsing::instance::class_imports>& actual, leaf::parsing::instance::class_imports_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_typenavigation_443(bool is_can, std::shared_ptr<leaf::parsing::instance::class_imports>& actual, leaf::parsing::instance::class_imports_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = lr_match_type_navigation(depth + 1);
    actual->types.push_back(val6);
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_444(bool is_can, std::shared_ptr<leaf::parsing::instance::class_imports>& actual, leaf::parsing::instance::class_imports_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives445(bool is_can, std::shared_ptr<leaf::parsing::instance::class_imports>& actual, leaf::parsing::instance::class_imports_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_comma_typenavigation_443(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_typenavigation_443(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_comma_444(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_444(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while446_447(bool is_can, std::shared_ptr<leaf::parsing::instance::class_imports>& actual, leaf::parsing::instance::class_imports_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_comma_442(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            alternatives445(true, actual, state, depth + 1);
            resettable resettable2(*this);
            cond3 = m_comma_442(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            alternatives445(false, actual, state, depth + 1);
            resettable resettable2(*this);
            cond3 = m_comma_442(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::p_can_class_imports(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::class_imports> fake;
    class_imports_state state;
    if (!m_importing_440(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_typenavigation_441(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while446_447(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::class_imports> leaf::parsing::instance::p_match_class_imports(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::class_imports>();
    std::shared_ptr<leaf::parsing::instance::class_imports> fake;
    class_imports_state state;
    resettable resettable2(*this);
    if (m_importing_440(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_importing_440(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_typenavigation_441(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_typenavigation_441(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (while446_447(true, fake, state, depth + 1))
    {
        resettable4.reset();
        while446_447(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attribute_448(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attribute_449(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute(depth + 1);
    actual->attributes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::while450_451(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attribute_448(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_449(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_448(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_449(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_448(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_encapsulation_class_ident_452(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_encapsulation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__class(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = p_match_encapsulation(depth + 1);
    actual->scope = val6;
    skip();
    auto l8 = token__class(depth + 1).value();
    for (;l8 != 0; l8--)
    {
        next();
    }
    skip();
    auto val9 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->name = val9;
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_453(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_template_definition(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_454(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_definition(depth + 1);
    actual->template_ = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if455_456(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_templatedefinition_453(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_templatedefinition_454(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_templatedefinition_454(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_classextends_457(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_class_extends(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_class_extends(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_classextends_458(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_class_extends(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_class_extends(depth + 1);
    actual->extends = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if459_460(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_classextends_457(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_classextends_458(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: class-extends (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_classextends_458(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: class-extends (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_classimplements_461(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_class_implements(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_class_implements(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_classimplements_462(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_class_implements(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_class_implements(depth + 1);
    actual->implements = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if463_464(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_classimplements_461(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_classimplements_462(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: class-implements (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_classimplements_462(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: class-implements (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_classimports_465(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_class_imports(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_class_imports(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_classimports_466(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_class_imports(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_class_imports(depth + 1);
    actual->imports = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if467_468(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_classimports_465(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_classimports_466(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: class-imports (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_classimports_466(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: class-imports (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_curlybracketopen_469(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_open(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_curlybracketclose_470(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_using_471(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_using_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_using_(depth + 1);
    actual->usings.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_pragma_472(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_pragma(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_pragma(depth + 1);
    actual->pragmas.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_aliasencapsulated_473(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_alias_encapsulated(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_alias_encapsulated(depth + 1);
    actual->aliases.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_class_474(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_class_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_class_(depth + 1);
    actual->classes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_constant_475(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_constant(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_constant(depth + 1);
    actual->constants.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_constructor_476(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_constructor(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_constructor(depth + 1);
    actual->constructors.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_contract_477(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_contract(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_contract(depth + 1);
    actual->contracts.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_copystructor_478(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_copystructor(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_copystructor(depth + 1);
    actual->copystructors.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_conversion_479(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_conversion(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_conversion(depth + 1);
    actual->conversions.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_destructor_480(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_destructor(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_destructor(depth + 1);
    actual->destructors.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_field_481(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_field(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_field(depth + 1);
    actual->fields.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_indexer_482(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_indexer(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_indexer(depth + 1);
    actual->indexers.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_method_483(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_method(depth + 1);
    actual->methods.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_namespace_484(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_namespace_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_namespace_(depth + 1);
    actual->namespaces.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_operatorbinaryoverload_485(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_operator_binary_overload(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_operator_binary_overload(depth + 1);
    actual->operators_binary.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_operatornullaroverload_486(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_operator_nullar_overload(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_operator_nullar_overload(depth + 1);
    actual->operators_nullar.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_operatorunaryoverload_487(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_operator_unary_overload(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_operator_unary_overload(depth + 1);
    actual->operators_unary.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_property_488(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_property(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_property(depth + 1);
    actual->properties.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives489(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_using_471(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_using_471(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_pragma_472(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_pragma_472(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_aliasencapsulated_473(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_aliasencapsulated_473(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_class_474(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_class_474(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_constant_475(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_constant_475(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_constructor_476(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_constructor_476(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_contract_477(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_contract_477(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_copystructor_478(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_copystructor_478(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_conversion_479(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_conversion_479(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_destructor_480(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_destructor_480(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_field_481(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_field_481(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_indexer_482(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_indexer_482(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_method_483(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_method_483(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_namespace_484(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_namespace_484(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_operatorbinaryoverload_485(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_operatorbinaryoverload_485(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_operatornullaroverload_486(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_operatornullaroverload_486(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_operatorunaryoverload_487(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_operatorunaryoverload_487(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_property_488(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_property_488(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (!is_can)
    {
        report("Failed to match one of the following: { using, pragma, alias-encapsulated, class, constant, constructor, contract, copystructor, conversion, destructor, field, indexer, method, namespace, operator-binary-overload, operator-nullar-overload, operator-unary-overload, property }", depth);
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while490_491(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_curlybracketclose_470(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            while (!alternatives489(true, actual, state, depth + 1) && current() != '\0')
            {
                next();
            }
            resettable resettable2(*this);
            cond3 = m_curlybracketclose_470(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            if (!alternatives489(false, actual, state, depth + 1))
            {
                while (current() != '\0')
                {
                    resettable resettable4(*this);
                    if (alternatives489(true, actual, state, depth + 1))
                    {
                        resettable4.reset();
                        break;
                    }
                    next();
                }
            }
            resettable resettable2(*this);
            cond3 = m_curlybracketclose_470(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_curlybracketclose_492(bool is_can, std::shared_ptr<leaf::parsing::instance::class_>& actual, leaf::parsing::instance::class__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__curly_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__curly_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_class_(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::class_> fake;
    class__state state;
    if (!while450_451(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_encapsulation_class_ident_452(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if455_456(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if459_460(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if463_464(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if467_468(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_curlybracketopen_469(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while490_491(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_curlybracketclose_492(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::class_> leaf::parsing::instance::p_match_class_(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::class_>();
    std::shared_ptr<leaf::parsing::instance::class_> fake;
    class__state state;
    resettable resettable2(*this);
    if (while450_451(true, fake, state, depth + 1))
    {
        resettable2.reset();
        while450_451(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_encapsulation_class_ident_452(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_encapsulation_class_ident_452(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (if455_456(true, fake, state, depth + 1))
    {
        resettable4.reset();
        if455_456(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (if459_460(true, fake, state, depth + 1))
    {
        resettable5.reset();
        if459_460(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable6(*this);
    if (if463_464(true, fake, state, depth + 1))
    {
        resettable6.reset();
        if463_464(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable7(*this);
    if (if467_468(true, fake, state, depth + 1))
    {
        resettable7.reset();
        if467_468(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable8(*this);
    if (m_curlybracketopen_469(true, fake, state, depth + 1))
    {
        resettable8.reset();
        m_curlybracketopen_469(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable9(*this);
    if (while490_491(true, fake, state, depth + 1))
    {
        resettable9.reset();
        while490_491(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable10(*this);
    if (m_curlybracketclose_492(true, fake, state, depth + 1))
    {
        resettable10.reset();
        m_curlybracketclose_492(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attribute_493(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist_item>& actual, leaf::parsing::instance::method_arglist_item_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attribute_494(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist_item>& actual, leaf::parsing::instance::method_arglist_item_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute(depth + 1);
    actual->attributes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::while495_496(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist_item>& actual, leaf::parsing::instance::method_arglist_item_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attribute_493(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_494(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_493(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_494(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_493(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_typematch_ident_497(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist_item>& actual, leaf::parsing::instance::method_arglist_item_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_type_match(depth + 1);
    actual->type = val4;
    skip();
    auto val5 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->name = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_method_arglist_item(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::method_arglist_item> fake;
    method_arglist_item_state state;
    if (!while495_496(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_typematch_ident_497(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::method_arglist_item> leaf::parsing::instance::p_match_method_arglist_item(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::method_arglist_item>();
    std::shared_ptr<leaf::parsing::instance::method_arglist_item> fake;
    method_arglist_item_state state;
    resettable resettable2(*this);
    if (while495_496(true, fake, state, depth + 1))
    {
        resettable2.reset();
        while495_496(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_typematch_ident_497(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_typematch_ident_497(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_roundbracketopen_498(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist>& actual, leaf::parsing::instance::method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__round_bracket_open(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_methodarglistitem_499(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist>& actual, leaf::parsing::instance::method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_arglist_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_method_arglist_item(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_methodarglistitem_500(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist>& actual, leaf::parsing::instance::method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_arglist_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_method_arglist_item(depth + 1);
    actual->args.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_roundbracketclose_501(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist>& actual, leaf::parsing::instance::method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__round_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_methodarglistitem_502(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist>& actual, leaf::parsing::instance::method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_method_arglist_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_method_arglist_item(depth + 1);
    actual->args.push_back(val6);
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives503(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist>& actual, leaf::parsing::instance::method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_comma_methodarglistitem_502(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_methodarglistitem_502(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (!is_can)
    {
        report("Failed to match one of the following: { ,, method-arglist-item }", depth);
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while504_505(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist>& actual, leaf::parsing::instance::method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_roundbracketclose_501(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            while (!alternatives503(true, actual, state, depth + 1) && current() != '\0')
            {
                next();
            }
            resettable resettable2(*this);
            cond3 = m_roundbracketclose_501(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            if (!alternatives503(false, actual, state, depth + 1))
            {
                while (current() != '\0')
                {
                    resettable resettable4(*this);
                    if (alternatives503(true, actual, state, depth + 1))
                    {
                        resettable4.reset();
                        break;
                    }
                    next();
                }
            }
            resettable resettable2(*this);
            cond3 = m_roundbracketclose_501(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_comma_506(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist>& actual, leaf::parsing::instance::method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_507(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist>& actual, leaf::parsing::instance::method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::if508_509(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist>& actual, leaf::parsing::instance::method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_comma_506(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_comma_507(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_comma_507(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::if510_511(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist>& actual, leaf::parsing::instance::method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_methodarglistitem_499(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_methodarglistitem_500(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: method-arglist-item (XCG.Parsing.Production) }", depth);
                return false;
            }
            while504_505(true, actual, state, depth + 1);
            if508_509(true, actual, state, depth + 1);
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_methodarglistitem_500(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: method-arglist-item (XCG.Parsing.Production) }", depth);
                return false;
            }
            while504_505(false, actual, state, depth + 1);
            if508_509(false, actual, state, depth + 1);
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_roundbracketclose_512(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist>& actual, leaf::parsing::instance::method_arglist_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__round_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_method_arglist(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::method_arglist> fake;
    method_arglist_state state;
    if (!m_roundbracketopen_498(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if510_511(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_roundbracketclose_512(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::method_arglist> leaf::parsing::instance::p_match_method_arglist(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::method_arglist>();
    std::shared_ptr<leaf::parsing::instance::method_arglist> fake;
    method_arglist_state state;
    resettable resettable2(*this);
    if (m_roundbracketopen_498(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_roundbracketopen_498(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (if510_511(true, fake, state, depth + 1))
    {
        resettable3.reset();
        if510_511(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (m_roundbracketclose_512(true, fake, state, depth + 1))
    {
        resettable4.reset();
        m_roundbracketclose_512(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_squarebracketopen_513(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist_indexer>& actual, leaf::parsing::instance::method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__square_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__square_bracket_open(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_methodarglistitem_514(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist_indexer>& actual, leaf::parsing::instance::method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_arglist_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_method_arglist_item(depth + 1);
    actual->args.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_squarebracketclose_515(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist_indexer>& actual, leaf::parsing::instance::method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__square_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__square_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_methodarglistitem_516(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist_indexer>& actual, leaf::parsing::instance::method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_method_arglist_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_method_arglist_item(depth + 1);
    actual->args.push_back(val6);
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives517(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist_indexer>& actual, leaf::parsing::instance::method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_comma_methodarglistitem_516(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_methodarglistitem_516(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (!is_can)
    {
        report("Failed to match one of the following: { ,, method-arglist-item }", depth);
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while518_519(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist_indexer>& actual, leaf::parsing::instance::method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_squarebracketclose_515(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            while (!alternatives517(true, actual, state, depth + 1) && current() != '\0')
            {
                next();
            }
            resettable resettable2(*this);
            cond3 = m_squarebracketclose_515(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            if (!alternatives517(false, actual, state, depth + 1))
            {
                while (current() != '\0')
                {
                    resettable resettable4(*this);
                    if (alternatives517(true, actual, state, depth + 1))
                    {
                        resettable4.reset();
                        break;
                    }
                    next();
                }
            }
            resettable resettable2(*this);
            cond3 = m_squarebracketclose_515(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_comma_520(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist_indexer>& actual, leaf::parsing::instance::method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_521(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist_indexer>& actual, leaf::parsing::instance::method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::if522_523(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist_indexer>& actual, leaf::parsing::instance::method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_comma_520(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_comma_521(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_comma_521(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: , ({ Token: , (,)}) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_squarebracketclose_524(bool is_can, std::shared_ptr<leaf::parsing::instance::method_arglist_indexer>& actual, leaf::parsing::instance::method_arglist_indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__square_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__square_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_method_arglist_indexer(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::method_arglist_indexer> fake;
    method_arglist_indexer_state state;
    if (!m_squarebracketopen_513(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_methodarglistitem_514(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while518_519(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if522_523(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_squarebracketclose_524(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::method_arglist_indexer> leaf::parsing::instance::p_match_method_arglist_indexer(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::method_arglist_indexer>();
    std::shared_ptr<leaf::parsing::instance::method_arglist_indexer> fake;
    method_arglist_indexer_state state;
    resettable resettable2(*this);
    if (m_squarebracketopen_513(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_squarebracketopen_513(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_methodarglistitem_514(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_methodarglistitem_514(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (while518_519(true, fake, state, depth + 1))
    {
        resettable4.reset();
        while518_519(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (if522_523(true, fake, state, depth + 1))
    {
        resettable5.reset();
        if522_523(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable6(*this);
    if (m_squarebracketclose_524(true, fake, state, depth + 1))
    {
        resettable6.reset();
        m_squarebracketclose_524(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_encapsulation_525(bool is_can, std::shared_ptr<leaf::parsing::instance::method_meta>& actual, leaf::parsing::instance::method_meta_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_encapsulation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_encapsulation(depth + 1);
    actual->encaps = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_sealed_526(bool is_can, std::shared_ptr<leaf::parsing::instance::method_meta>& actual, leaf::parsing::instance::method_meta_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__sealed(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__sealed(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_sealed_527(bool is_can, std::shared_ptr<leaf::parsing::instance::method_meta>& actual, leaf::parsing::instance::method_meta_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__sealed(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__sealed(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::if528_529(bool is_can, std::shared_ptr<leaf::parsing::instance::method_meta>& actual, leaf::parsing::instance::method_meta_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_sealed_526(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_sealed_527(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: sealed ({ Token: sealed (sealed)}) }", depth);
                return false;
            }
            if (!is_can)
            {
                actual->is_sealed = true;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_sealed_527(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: sealed ({ Token: sealed (sealed)}) }", depth);
                return false;
            }
            if (!is_can)
            {
                actual->is_sealed = true;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_virtual_530(bool is_can, std::shared_ptr<leaf::parsing::instance::method_meta>& actual, leaf::parsing::instance::method_meta_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__virtual(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__virtual(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_virtual_531(bool is_can, std::shared_ptr<leaf::parsing::instance::method_meta>& actual, leaf::parsing::instance::method_meta_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__virtual(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__virtual(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::if532_533(bool is_can, std::shared_ptr<leaf::parsing::instance::method_meta>& actual, leaf::parsing::instance::method_meta_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_virtual_530(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_virtual_531(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: virtual ({ Token: virtual (virtual)}) }", depth);
                return false;
            }
            if (!is_can)
            {
                actual->is_virtual = true;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_virtual_531(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: virtual ({ Token: virtual (virtual)}) }", depth);
                return false;
            }
            if (!is_can)
            {
                actual->is_virtual = true;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_unbound_534(bool is_can, std::shared_ptr<leaf::parsing::instance::method_meta>& actual, leaf::parsing::instance::method_meta_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__unbound(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__unbound(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_unbound_535(bool is_can, std::shared_ptr<leaf::parsing::instance::method_meta>& actual, leaf::parsing::instance::method_meta_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__unbound(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__unbound(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::if536_537(bool is_can, std::shared_ptr<leaf::parsing::instance::method_meta>& actual, leaf::parsing::instance::method_meta_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_unbound_534(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_unbound_535(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: unbound ({ Token: unbound (unbound)}) }", depth);
                return false;
            }
            if (!is_can)
            {
                actual->is_static = true;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_unbound_535(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: unbound ({ Token: unbound (unbound)}) }", depth);
                return false;
            }
            if (!is_can)
            {
                actual->is_static = true;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_inline_538(bool is_can, std::shared_ptr<leaf::parsing::instance::method_meta>& actual, leaf::parsing::instance::method_meta_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__inline(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__inline(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_inline_539(bool is_can, std::shared_ptr<leaf::parsing::instance::method_meta>& actual, leaf::parsing::instance::method_meta_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__inline(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__inline(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::if540_541(bool is_can, std::shared_ptr<leaf::parsing::instance::method_meta>& actual, leaf::parsing::instance::method_meta_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_inline_538(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_inline_539(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: inline ({ Token: inline (inline)}) }", depth);
                return false;
            }
            if (!is_can)
            {
                actual->is_inline = true;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_inline_539(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: inline ({ Token: inline (inline)}) }", depth);
                return false;
            }
            if (!is_can)
            {
                actual->is_inline = true;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::p_can_method_meta(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::method_meta> fake;
    method_meta_state state;
    if (!m_encapsulation_525(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if528_529(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if532_533(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if536_537(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if540_541(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::method_meta> leaf::parsing::instance::p_match_method_meta(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::method_meta>();
    std::shared_ptr<leaf::parsing::instance::method_meta> fake;
    method_meta_state state;
    resettable resettable2(*this);
    if (m_encapsulation_525(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_encapsulation_525(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (if528_529(true, fake, state, depth + 1))
    {
        resettable3.reset();
        if528_529(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (if532_533(true, fake, state, depth + 1))
    {
        resettable4.reset();
        if532_533(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (if536_537(true, fake, state, depth + 1))
    {
        resettable5.reset();
        if536_537(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable6(*this);
    if (if540_541(true, fake, state, depth + 1))
    {
        resettable6.reset();
        if540_541(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attribute_542(bool is_can, std::shared_ptr<leaf::parsing::instance::method>& actual, leaf::parsing::instance::method_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attribute_543(bool is_can, std::shared_ptr<leaf::parsing::instance::method>& actual, leaf::parsing::instance::method_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute(depth + 1);
    actual->attributes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::while544_545(bool is_can, std::shared_ptr<leaf::parsing::instance::method>& actual, leaf::parsing::instance::method_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attribute_542(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_543(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_542(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_543(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_542(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_methodmeta_typematch_ident_546(bool is_can, std::shared_ptr<leaf::parsing::instance::method>& actual, leaf::parsing::instance::method_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_meta(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_method_meta(depth + 1);
    actual->meta = val4;
    skip();
    auto val5 = p_match_type_match(depth + 1);
    actual->return_type = val5;
    skip();
    auto val6 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->name = val6;
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_547(bool is_can, std::shared_ptr<leaf::parsing::instance::method>& actual, leaf::parsing::instance::method_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_template_definition(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_548(bool is_can, std::shared_ptr<leaf::parsing::instance::method>& actual, leaf::parsing::instance::method_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_definition(depth + 1);
    actual->template_ = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if549_550(bool is_can, std::shared_ptr<leaf::parsing::instance::method>& actual, leaf::parsing::instance::method_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_templatedefinition_547(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_templatedefinition_548(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_templatedefinition_548(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_methodarglist_scope_551(bool is_can, std::shared_ptr<leaf::parsing::instance::method>& actual, leaf::parsing::instance::method_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_arglist(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_method_arglist(depth + 1);
    actual->arglist = val2;
    skip();
    auto val3 = p_match_scope(depth + 1);
    actual->body = val3;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_method(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::method> fake;
    method_state state;
    if (!while544_545(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_methodmeta_typematch_ident_546(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if549_550(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_methodarglist_scope_551(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::method> leaf::parsing::instance::p_match_method(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::method>();
    std::shared_ptr<leaf::parsing::instance::method> fake;
    method_state state;
    resettable resettable2(*this);
    if (while544_545(true, fake, state, depth + 1))
    {
        resettable2.reset();
        while544_545(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_methodmeta_typematch_ident_546(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_methodmeta_typematch_ident_546(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (if549_550(true, fake, state, depth + 1))
    {
        resettable4.reset();
        if549_550(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (m_methodarglist_scope_551(true, fake, state, depth + 1))
    {
        resettable5.reset();
        m_methodarglist_scope_551(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attribute_552(bool is_can, std::shared_ptr<leaf::parsing::instance::constructor>& actual, leaf::parsing::instance::constructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attribute_553(bool is_can, std::shared_ptr<leaf::parsing::instance::constructor>& actual, leaf::parsing::instance::constructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute(depth + 1);
    actual->attributes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::while554_555(bool is_can, std::shared_ptr<leaf::parsing::instance::constructor>& actual, leaf::parsing::instance::constructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attribute_552(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_553(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_552(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_553(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_552(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_encapsulation_556(bool is_can, std::shared_ptr<leaf::parsing::instance::constructor>& actual, leaf::parsing::instance::constructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_encapsulation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_encapsulation(depth + 1);
    actual->encaps = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_557(bool is_can, std::shared_ptr<leaf::parsing::instance::constructor>& actual, leaf::parsing::instance::constructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_template_definition(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_558(bool is_can, std::shared_ptr<leaf::parsing::instance::constructor>& actual, leaf::parsing::instance::constructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_definition(depth + 1);
    actual->template_ = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if559_560(bool is_can, std::shared_ptr<leaf::parsing::instance::constructor>& actual, leaf::parsing::instance::constructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_templatedefinition_557(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_templatedefinition_558(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_templatedefinition_558(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_methodarglist_scope_561(bool is_can, std::shared_ptr<leaf::parsing::instance::constructor>& actual, leaf::parsing::instance::constructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_arglist(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_method_arglist(depth + 1);
    actual->arglist = val2;
    skip();
    auto val3 = p_match_scope(depth + 1);
    actual->body = val3;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_constructor(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::constructor> fake;
    constructor_state state;
    if (!while554_555(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_encapsulation_556(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if559_560(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_methodarglist_scope_561(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::constructor> leaf::parsing::instance::p_match_constructor(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::constructor>();
    std::shared_ptr<leaf::parsing::instance::constructor> fake;
    constructor_state state;
    resettable resettable2(*this);
    if (while554_555(true, fake, state, depth + 1))
    {
        resettable2.reset();
        while554_555(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_encapsulation_556(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_encapsulation_556(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (if559_560(true, fake, state, depth + 1))
    {
        resettable4.reset();
        if559_560(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (m_methodarglist_scope_561(true, fake, state, depth + 1))
    {
        resettable5.reset();
        m_methodarglist_scope_561(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attribute_562(bool is_can, std::shared_ptr<leaf::parsing::instance::destructor>& actual, leaf::parsing::instance::destructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attribute_563(bool is_can, std::shared_ptr<leaf::parsing::instance::destructor>& actual, leaf::parsing::instance::destructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute(depth + 1);
    actual->attributes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::while564_565(bool is_can, std::shared_ptr<leaf::parsing::instance::destructor>& actual, leaf::parsing::instance::destructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attribute_562(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_563(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_562(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_563(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_562(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_encapsulation_tilde_566(bool is_can, std::shared_ptr<leaf::parsing::instance::destructor>& actual, leaf::parsing::instance::destructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_encapsulation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__tilde(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_encapsulation(depth + 1);
    actual->encaps = val4;
    skip();
    auto l6 = token__tilde(depth + 1).value();
    for (;l6 != 0; l6--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_567(bool is_can, std::shared_ptr<leaf::parsing::instance::destructor>& actual, leaf::parsing::instance::destructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_template_definition(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_568(bool is_can, std::shared_ptr<leaf::parsing::instance::destructor>& actual, leaf::parsing::instance::destructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_definition(depth + 1);
    actual->template_ = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if569_570(bool is_can, std::shared_ptr<leaf::parsing::instance::destructor>& actual, leaf::parsing::instance::destructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_templatedefinition_567(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_templatedefinition_568(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_templatedefinition_568(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_methodarglist_scope_571(bool is_can, std::shared_ptr<leaf::parsing::instance::destructor>& actual, leaf::parsing::instance::destructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_arglist(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_method_arglist(depth + 1);
    actual->arglist = val2;
    skip();
    auto val3 = p_match_scope(depth + 1);
    actual->body = val3;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_destructor(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::destructor> fake;
    destructor_state state;
    if (!while564_565(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_encapsulation_tilde_566(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if569_570(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_methodarglist_scope_571(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::destructor> leaf::parsing::instance::p_match_destructor(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::destructor>();
    std::shared_ptr<leaf::parsing::instance::destructor> fake;
    destructor_state state;
    resettable resettable2(*this);
    if (while564_565(true, fake, state, depth + 1))
    {
        resettable2.reset();
        while564_565(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_encapsulation_tilde_566(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_encapsulation_tilde_566(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (if569_570(true, fake, state, depth + 1))
    {
        resettable4.reset();
        if569_570(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (m_methodarglist_scope_571(true, fake, state, depth + 1))
    {
        resettable5.reset();
        m_methodarglist_scope_571(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attribute_572(bool is_can, std::shared_ptr<leaf::parsing::instance::copystructor>& actual, leaf::parsing::instance::copystructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attribute_573(bool is_can, std::shared_ptr<leaf::parsing::instance::copystructor>& actual, leaf::parsing::instance::copystructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute(depth + 1);
    actual->attributes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::while574_575(bool is_can, std::shared_ptr<leaf::parsing::instance::copystructor>& actual, leaf::parsing::instance::copystructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attribute_572(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_573(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_572(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_573(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_572(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_encapsulation_plus_576(bool is_can, std::shared_ptr<leaf::parsing::instance::copystructor>& actual, leaf::parsing::instance::copystructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_encapsulation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token_plus(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_encapsulation(depth + 1);
    actual->encaps = val4;
    skip();
    auto l6 = token_plus(depth + 1).value();
    for (;l6 != 0; l6--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_577(bool is_can, std::shared_ptr<leaf::parsing::instance::copystructor>& actual, leaf::parsing::instance::copystructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_template_definition(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_578(bool is_can, std::shared_ptr<leaf::parsing::instance::copystructor>& actual, leaf::parsing::instance::copystructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_definition(depth + 1);
    actual->template_ = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if579_580(bool is_can, std::shared_ptr<leaf::parsing::instance::copystructor>& actual, leaf::parsing::instance::copystructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_templatedefinition_577(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_templatedefinition_578(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_templatedefinition_578(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_methodarglist_581(bool is_can, std::shared_ptr<leaf::parsing::instance::copystructor>& actual, leaf::parsing::instance::copystructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_arglist(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_method_arglist(depth + 1);
    actual->arglist = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_scope_582(bool is_can, std::shared_ptr<leaf::parsing::instance::copystructor>& actual, leaf::parsing::instance::copystructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_scope(depth + 1);
    actual->body = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_equal_delete_583(bool is_can, std::shared_ptr<leaf::parsing::instance::copystructor>& actual, leaf::parsing::instance::copystructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__delete(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__equal(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto l9 = token__delete(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives584(bool is_can, std::shared_ptr<leaf::parsing::instance::copystructor>& actual, leaf::parsing::instance::copystructor_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_scope_582(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_scope_582(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_equal_delete_583(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_equal_delete_583(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_copystructor(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::copystructor> fake;
    copystructor_state state;
    if (!while574_575(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_encapsulation_plus_576(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if579_580(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_methodarglist_581(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!alternatives584(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::copystructor> leaf::parsing::instance::p_match_copystructor(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::copystructor>();
    std::shared_ptr<leaf::parsing::instance::copystructor> fake;
    copystructor_state state;
    resettable resettable2(*this);
    if (while574_575(true, fake, state, depth + 1))
    {
        resettable2.reset();
        while574_575(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_encapsulation_plus_576(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_encapsulation_plus_576(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (if579_580(true, fake, state, depth + 1))
    {
        resettable4.reset();
        if579_580(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (m_methodarglist_581(true, fake, state, depth + 1))
    {
        resettable5.reset();
        m_methodarglist_581(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable6(*this);
    if (alternatives584(true, fake, state, depth + 1))
    {
        resettable6.reset();
        alternatives584(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attribute_585(bool is_can, std::shared_ptr<leaf::parsing::instance::conversion>& actual, leaf::parsing::instance::conversion_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attribute_586(bool is_can, std::shared_ptr<leaf::parsing::instance::conversion>& actual, leaf::parsing::instance::conversion_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute(depth + 1);
    actual->attributes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::while587_588(bool is_can, std::shared_ptr<leaf::parsing::instance::conversion>& actual, leaf::parsing::instance::conversion_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attribute_585(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_586(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_585(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_586(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_585(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_methodmeta_conversion_typematch_589(bool is_can, std::shared_ptr<leaf::parsing::instance::conversion>& actual, leaf::parsing::instance::conversion_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_meta(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__conversion(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_method_meta(depth + 1);
    actual->meta = val4;
    skip();
    auto l6 = token__conversion(depth + 1).value();
    for (;l6 != 0; l6--)
    {
        next();
    }
    skip();
    auto val7 = p_match_type_match(depth + 1);
    actual->target_type = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_roundbracketopen_typematch_ident_roundbracketclose_590(bool is_can, std::shared_ptr<leaf::parsing::instance::conversion>& actual, leaf::parsing::instance::conversion_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__round_bracket_close(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l9 = token__round_bracket_open(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    auto val10 = p_match_type_match(depth + 1);
    actual->source_type = val10;
    skip();
    auto val11 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->name = val11;
    skip();
    auto l13 = token__round_bracket_close(depth + 1).value();
    for (;l13 != 0; l13--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_scope_591(bool is_can, std::shared_ptr<leaf::parsing::instance::conversion>& actual, leaf::parsing::instance::conversion_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_scope(depth + 1);
    actual->body = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_conversion(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::conversion> fake;
    conversion_state state;
    if (!while587_588(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_methodmeta_conversion_typematch_589(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_roundbracketopen_typematch_ident_roundbracketclose_590(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_scope_591(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::conversion> leaf::parsing::instance::p_match_conversion(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::conversion>();
    std::shared_ptr<leaf::parsing::instance::conversion> fake;
    conversion_state state;
    resettable resettable2(*this);
    if (while587_588(true, fake, state, depth + 1))
    {
        resettable2.reset();
        while587_588(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_methodmeta_conversion_typematch_589(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_methodmeta_conversion_typematch_589(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (m_roundbracketopen_typematch_ident_roundbracketclose_590(true, fake, state, depth + 1))
    {
        resettable4.reset();
        m_roundbracketopen_typematch_ident_roundbracketclose_590(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (m_scope_591(true, fake, state, depth + 1))
    {
        resettable5.reset();
        m_scope_591(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attribute_592(bool is_can, std::shared_ptr<leaf::parsing::instance::indexer>& actual, leaf::parsing::instance::indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attribute_593(bool is_can, std::shared_ptr<leaf::parsing::instance::indexer>& actual, leaf::parsing::instance::indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute(depth + 1);
    actual->attributes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::while594_595(bool is_can, std::shared_ptr<leaf::parsing::instance::indexer>& actual, leaf::parsing::instance::indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attribute_592(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_593(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_592(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_593(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_592(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_methodmeta_typematch_596(bool is_can, std::shared_ptr<leaf::parsing::instance::indexer>& actual, leaf::parsing::instance::indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_meta(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_method_meta(depth + 1);
    actual->meta = val2;
    skip();
    auto val3 = p_match_type_match(depth + 1);
    actual->target_type = val3;
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_597(bool is_can, std::shared_ptr<leaf::parsing::instance::indexer>& actual, leaf::parsing::instance::indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_template_definition(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_598(bool is_can, std::shared_ptr<leaf::parsing::instance::indexer>& actual, leaf::parsing::instance::indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_definition(depth + 1);
    actual->template_ = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if599_600(bool is_can, std::shared_ptr<leaf::parsing::instance::indexer>& actual, leaf::parsing::instance::indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_templatedefinition_597(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_templatedefinition_598(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_templatedefinition_598(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_methodarglistindexer_scopegetset_601(bool is_can, std::shared_ptr<leaf::parsing::instance::indexer>& actual, leaf::parsing::instance::indexer_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_arglist_indexer(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_scope_getset(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_method_arglist_indexer(depth + 1);
    actual->arglist = val2;
    skip();
    auto val3 = p_match_scope_getset(depth + 1);
    actual->body = val3;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_indexer(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::indexer> fake;
    indexer_state state;
    if (!while594_595(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_methodmeta_typematch_596(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if599_600(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_methodarglistindexer_scopegetset_601(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::indexer> leaf::parsing::instance::p_match_indexer(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::indexer>();
    std::shared_ptr<leaf::parsing::instance::indexer> fake;
    indexer_state state;
    resettable resettable2(*this);
    if (while594_595(true, fake, state, depth + 1))
    {
        resettable2.reset();
        while594_595(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_methodmeta_typematch_596(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_methodmeta_typematch_596(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (if599_600(true, fake, state, depth + 1))
    {
        resettable4.reset();
        if599_600(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (m_methodarglistindexer_scopegetset_601(true, fake, state, depth + 1))
    {
        resettable5.reset();
        m_methodarglistindexer_scopegetset_601(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attribute_602(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attribute_603(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute(depth + 1);
    actual->attributes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::while604_605(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attribute_602(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_603(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_602(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_603(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_602(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_methodmeta_typematch_operator_606(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_meta(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__operator(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_method_meta(depth + 1);
    actual->meta = val4;
    skip();
    auto val5 = p_match_type_match(depth + 1);
    actual->target_type = val5;
    skip();
    auto l7 = token__operator(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_607(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_template_definition(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_608(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_definition(depth + 1);
    actual->template_ = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if609_610(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_templatedefinition_607(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_templatedefinition_608(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_templatedefinition_608(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_roundbracketopen_methodarglistitem_roundbracketclose_611(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_method_arglist_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_close(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__round_bracket_open(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = p_match_method_arglist_item(depth + 1);
    actual->left = val8;
    skip();
    auto l10 = token__round_bracket_close(depth + 1).value();
    for (;l10 != 0; l10--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_plus_612(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_plus(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_plus(depth + 1).value(), tok::PLUS);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_minus_613(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_minus(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_minus(depth + 1).value(), tok::MINUS);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_star_614(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_star(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_star(depth + 1).value(), tok::STAR);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_slash_615(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_slash(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_slash(depth + 1).value(), tok::SLASH);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_lessthenlessthenlessthen_616(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__less_then_less_then_less_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__less_then_less_then_less_then(depth + 1).value(), tok::_LESS_THEN_LESS_THEN_LESS_THEN);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_lessthenlessthen_617(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__less_then_less_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__less_then_less_then(depth + 1).value(), tok::_LESS_THEN_LESS_THEN);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_lessthenequal_618(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__less_then_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__less_then_equal(depth + 1).value(), tok::_LESS_THEN_EQUAL);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_lessthen_619(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__less_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__less_then(depth + 1).value(), tok::_LESS_THEN);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_greaterthengreaterthengreaterthen_620(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__greater_then_greater_then_greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__greater_then_greater_then_greater_then(depth + 1).value(), tok::_GREATER_THEN_GREATER_THEN_GREATER_THEN);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_greaterthengreaterthen_621(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__greater_then_greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__greater_then_greater_then(depth + 1).value(), tok::_GREATER_THEN_GREATER_THEN);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_greaterthenequal_622(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__greater_then_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__greater_then_equal(depth + 1).value(), tok::_GREATER_THEN_EQUAL);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_greaterthen_623(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__greater_then(depth + 1).value(), tok::_GREATER_THEN);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_verticalbarverticalbar_624(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__vertical_bar_vertical_bar(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__vertical_bar_vertical_bar(depth + 1).value(), tok::_VERTICAL_BAR_VERTICAL_BAR);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_verticalbar_625(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__vertical_bar(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__vertical_bar(depth + 1).value(), tok::_VERTICAL_BAR);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ampersandampersand_626(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__ampersand_ampersand(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__ampersand_ampersand(depth + 1).value(), tok::_AMPERSAND_AMPERSAND);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ampersand_627(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__ampersand(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__ampersand(depth + 1).value(), tok::_AMPERSAND);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_equalequalequal_628(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__equal_equal_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__equal_equal_equal(depth + 1).value(), tok::_EQUAL_EQUAL_EQUAL);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_equalequal_629(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__equal_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__equal_equal(depth + 1).value(), tok::_EQUAL_EQUAL);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_exclamationequal_630(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__exclamation_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__exclamation_equal(depth + 1).value(), tok::_EXCLAMATION_EQUAL);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_circumflex_631(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__circumflex(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__circumflex(depth + 1).value(), tok::_CIRCUMFLEX);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives632(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_plus_612(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_plus_612(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_minus_613(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_minus_613(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_star_614(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_star_614(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_slash_615(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_slash_615(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_lessthenlessthenlessthen_616(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_lessthenlessthenlessthen_616(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_lessthenlessthen_617(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_lessthenlessthen_617(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_lessthenequal_618(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_lessthenequal_618(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_lessthen_619(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_lessthen_619(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_greaterthengreaterthengreaterthen_620(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_greaterthengreaterthengreaterthen_620(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_greaterthengreaterthen_621(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_greaterthengreaterthen_621(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_greaterthenequal_622(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_greaterthenequal_622(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_greaterthen_623(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_greaterthen_623(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_verticalbarverticalbar_624(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_verticalbarverticalbar_624(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_verticalbar_625(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_verticalbar_625(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ampersandampersand_626(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ampersandampersand_626(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ampersand_627(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ampersand_627(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_equalequalequal_628(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_equalequalequal_628(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_equalequal_629(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_equalequal_629(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_exclamationequal_630(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_exclamationequal_630(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_circumflex_631(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_circumflex_631(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::m_roundbracketopen_methodarglistitem_roundbracketclose_633(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_method_arglist_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_close(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__round_bracket_open(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = p_match_method_arglist_item(depth + 1);
    actual->right = val8;
    skip();
    auto l10 = token__round_bracket_close(depth + 1).value();
    for (;l10 != 0; l10--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_scope_634(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_binary_overload>& actual, leaf::parsing::instance::operator_binary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_scope(depth + 1);
    actual->body = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_operator_binary_overload(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::operator_binary_overload> fake;
    operator_binary_overload_state state;
    if (!while604_605(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_methodmeta_typematch_operator_606(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if609_610(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_roundbracketopen_methodarglistitem_roundbracketclose_611(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!alternatives632(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_roundbracketopen_methodarglistitem_roundbracketclose_633(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_scope_634(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::operator_binary_overload> leaf::parsing::instance::p_match_operator_binary_overload(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::operator_binary_overload>();
    std::shared_ptr<leaf::parsing::instance::operator_binary_overload> fake;
    operator_binary_overload_state state;
    resettable resettable2(*this);
    if (while604_605(true, fake, state, depth + 1))
    {
        resettable2.reset();
        while604_605(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_methodmeta_typematch_operator_606(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_methodmeta_typematch_operator_606(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (if609_610(true, fake, state, depth + 1))
    {
        resettable4.reset();
        if609_610(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (m_roundbracketopen_methodarglistitem_roundbracketclose_611(true, fake, state, depth + 1))
    {
        resettable5.reset();
        m_roundbracketopen_methodarglistitem_roundbracketclose_611(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable6(*this);
    if (alternatives632(true, fake, state, depth + 1))
    {
        resettable6.reset();
        alternatives632(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable7(*this);
    if (m_roundbracketopen_methodarglistitem_roundbracketclose_633(true, fake, state, depth + 1))
    {
        resettable7.reset();
        m_roundbracketopen_methodarglistitem_roundbracketclose_633(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable8(*this);
    if (m_scope_634(true, fake, state, depth + 1))
    {
        resettable8.reset();
        m_scope_634(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attribute_635(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_unary_overload>& actual, leaf::parsing::instance::operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attribute_636(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_unary_overload>& actual, leaf::parsing::instance::operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute(depth + 1);
    actual->attributes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::while637_638(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_unary_overload>& actual, leaf::parsing::instance::operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attribute_635(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_636(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_635(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_636(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_635(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_methodmeta_typematch_operator_639(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_unary_overload>& actual, leaf::parsing::instance::operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_meta(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__operator(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_method_meta(depth + 1);
    actual->meta = val4;
    skip();
    auto val5 = p_match_type_match(depth + 1);
    actual->target_type = val5;
    skip();
    auto l7 = token__operator(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_640(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_unary_overload>& actual, leaf::parsing::instance::operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_template_definition(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_641(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_unary_overload>& actual, leaf::parsing::instance::operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_definition(depth + 1);
    actual->template_ = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if642_643(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_unary_overload>& actual, leaf::parsing::instance::operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_templatedefinition_640(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_templatedefinition_641(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_templatedefinition_641(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_plus_644(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_unary_overload>& actual, leaf::parsing::instance::operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_plus(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_plus(depth + 1).value(), tok::PLUS);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_minus_645(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_unary_overload>& actual, leaf::parsing::instance::operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_minus(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_minus(depth + 1).value(), tok::MINUS);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_exclamation_646(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_unary_overload>& actual, leaf::parsing::instance::operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__exclamation(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__exclamation(depth + 1).value(), tok::_EXCLAMATION);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_tilde_647(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_unary_overload>& actual, leaf::parsing::instance::operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__tilde(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__tilde(depth + 1).value(), tok::_TILDE);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives648(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_unary_overload>& actual, leaf::parsing::instance::operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_plus_644(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_plus_644(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_minus_645(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_minus_645(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_exclamation_646(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_exclamation_646(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_tilde_647(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_tilde_647(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::m_roundbracketopen_methodarglistitem_roundbracketclose_649(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_unary_overload>& actual, leaf::parsing::instance::operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_method_arglist_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_close(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__round_bracket_open(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = p_match_method_arglist_item(depth + 1);
    actual->right = val8;
    skip();
    auto l10 = token__round_bracket_close(depth + 1).value();
    for (;l10 != 0; l10--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_scope_650(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_unary_overload>& actual, leaf::parsing::instance::operator_unary_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_scope(depth + 1);
    actual->body = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_operator_unary_overload(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::operator_unary_overload> fake;
    operator_unary_overload_state state;
    if (!while637_638(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_methodmeta_typematch_operator_639(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if642_643(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!alternatives648(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_roundbracketopen_methodarglistitem_roundbracketclose_649(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_scope_650(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::operator_unary_overload> leaf::parsing::instance::p_match_operator_unary_overload(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::operator_unary_overload>();
    std::shared_ptr<leaf::parsing::instance::operator_unary_overload> fake;
    operator_unary_overload_state state;
    resettable resettable2(*this);
    if (while637_638(true, fake, state, depth + 1))
    {
        resettable2.reset();
        while637_638(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_methodmeta_typematch_operator_639(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_methodmeta_typematch_operator_639(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (if642_643(true, fake, state, depth + 1))
    {
        resettable4.reset();
        if642_643(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (alternatives648(true, fake, state, depth + 1))
    {
        resettable5.reset();
        alternatives648(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable6(*this);
    if (m_roundbracketopen_methodarglistitem_roundbracketclose_649(true, fake, state, depth + 1))
    {
        resettable6.reset();
        m_roundbracketopen_methodarglistitem_roundbracketclose_649(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable7(*this);
    if (m_scope_650(true, fake, state, depth + 1))
    {
        resettable7.reset();
        m_scope_650(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attribute_651(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_nullar_overload>& actual, leaf::parsing::instance::operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attribute_652(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_nullar_overload>& actual, leaf::parsing::instance::operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute(depth + 1);
    actual->attributes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::while653_654(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_nullar_overload>& actual, leaf::parsing::instance::operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attribute_651(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_652(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_651(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_652(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_651(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_methodmeta_operator_655(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_nullar_overload>& actual, leaf::parsing::instance::operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_meta(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__operator(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_method_meta(depth + 1);
    actual->meta = val4;
    skip();
    auto l6 = token__operator(depth + 1).value();
    for (;l6 != 0; l6--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_656(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_nullar_overload>& actual, leaf::parsing::instance::operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_template_definition(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinition_657(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_nullar_overload>& actual, leaf::parsing::instance::operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_definition(depth + 1);
    actual->template_ = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::if658_659(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_nullar_overload>& actual, leaf::parsing::instance::operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_templatedefinition_656(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_templatedefinition_657(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_templatedefinition_657(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: template-definition (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_dot_660(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_nullar_overload>& actual, leaf::parsing::instance::operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__dot(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__dot(depth + 1).value(), tok::_DOT);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_minusgreaterthen_661(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_nullar_overload>& actual, leaf::parsing::instance::operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__minus_greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__minus_greater_then(depth + 1).value(), tok::_MINUS_GREATER_THEN);
    actual->operator_ = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives662(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_nullar_overload>& actual, leaf::parsing::instance::operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_dot_660(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_dot_660(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_minusgreaterthen_661(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_minusgreaterthen_661(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::m_scope_663(bool is_can, std::shared_ptr<leaf::parsing::instance::operator_nullar_overload>& actual, leaf::parsing::instance::operator_nullar_overload_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_scope(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_scope(depth + 1);
    actual->body = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_operator_nullar_overload(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::operator_nullar_overload> fake;
    operator_nullar_overload_state state;
    if (!while653_654(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_methodmeta_operator_655(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if658_659(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!alternatives662(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_scope_663(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::operator_nullar_overload> leaf::parsing::instance::p_match_operator_nullar_overload(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::operator_nullar_overload>();
    std::shared_ptr<leaf::parsing::instance::operator_nullar_overload> fake;
    operator_nullar_overload_state state;
    resettable resettable2(*this);
    if (while653_654(true, fake, state, depth + 1))
    {
        resettable2.reset();
        while653_654(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_methodmeta_operator_655(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_methodmeta_operator_655(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (if658_659(true, fake, state, depth + 1))
    {
        resettable4.reset();
        if658_659(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (alternatives662(true, fake, state, depth + 1))
    {
        resettable5.reset();
        alternatives662(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable6(*this);
    if (m_scope_663(true, fake, state, depth + 1))
    {
        resettable6.reset();
        m_scope_663(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attribute_664(bool is_can, std::shared_ptr<leaf::parsing::instance::property>& actual, leaf::parsing::instance::property_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attribute_665(bool is_can, std::shared_ptr<leaf::parsing::instance::property>& actual, leaf::parsing::instance::property_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute(depth + 1);
    actual->attributes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::while666_667(bool is_can, std::shared_ptr<leaf::parsing::instance::property>& actual, leaf::parsing::instance::property_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attribute_664(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_665(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_664(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_665(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_664(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_methodmeta_typematch_ident_scopegetset_668(bool is_can, std::shared_ptr<leaf::parsing::instance::property>& actual, leaf::parsing::instance::property_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method_meta(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_scope_getset(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_method_meta(depth + 1);
    actual->meta = val4;
    skip();
    auto val5 = p_match_type_match(depth + 1);
    actual->target_type = val5;
    skip();
    auto val6 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->name = val6;
    skip();
    auto val7 = p_match_scope_getset(depth + 1);
    actual->body = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_property(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::property> fake;
    property_state state;
    if (!while666_667(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_methodmeta_typematch_ident_scopegetset_668(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::property> leaf::parsing::instance::p_match_property(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::property>();
    std::shared_ptr<leaf::parsing::instance::property> fake;
    property_state state;
    resettable resettable2(*this);
    if (while666_667(true, fake, state, depth + 1))
    {
        resettable2.reset();
        while666_667(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_methodmeta_typematch_ident_scopegetset_668(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_methodmeta_typematch_ident_scopegetset_668(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_attribute_669(bool is_can, std::shared_ptr<leaf::parsing::instance::field>& actual, leaf::parsing::instance::field_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_attribute(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_attribute_670(bool is_can, std::shared_ptr<leaf::parsing::instance::field>& actual, leaf::parsing::instance::field_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_attribute(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_attribute(depth + 1);
    actual->attributes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::while671_672(bool is_can, std::shared_ptr<leaf::parsing::instance::field>& actual, leaf::parsing::instance::field_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_attribute_669(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_670(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_669(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (m_attribute_670(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: attribute (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_attribute_669(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_encapsulation_673(bool is_can, std::shared_ptr<leaf::parsing::instance::field>& actual, leaf::parsing::instance::field_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_encapsulation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_encapsulation(depth + 1);
    actual->encaps = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_unbound_674(bool is_can, std::shared_ptr<leaf::parsing::instance::field>& actual, leaf::parsing::instance::field_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__unbound(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__unbound(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_unbound_675(bool is_can, std::shared_ptr<leaf::parsing::instance::field>& actual, leaf::parsing::instance::field_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__unbound(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__unbound(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::if676_677(bool is_can, std::shared_ptr<leaf::parsing::instance::field>& actual, leaf::parsing::instance::field_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_unbound_674(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_unbound_675(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: unbound ({ Token: unbound (unbound)}) }", depth);
                return false;
            }
            if (!is_can)
            {
                actual->is_static = true;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_unbound_675(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: unbound ({ Token: unbound (unbound)}) }", depth);
                return false;
            }
            if (!is_can)
            {
                actual->is_static = true;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_typematch_ident_semicolon_678(bool is_can, std::shared_ptr<leaf::parsing::instance::field>& actual, leaf::parsing::instance::field_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__semicolon(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = p_match_type_match(depth + 1);
    actual->target_type = val6;
    skip();
    auto val7 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->name = val7;
    skip();
    auto l9 = token__semicolon(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_field(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::field> fake;
    field_state state;
    if (!while671_672(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_encapsulation_673(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if676_677(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_typematch_ident_semicolon_678(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::field> leaf::parsing::instance::p_match_field(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::field>();
    std::shared_ptr<leaf::parsing::instance::field> fake;
    field_state state;
    resettable resettable2(*this);
    if (while671_672(true, fake, state, depth + 1))
    {
        resettable2.reset();
        while671_672(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_encapsulation_673(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_encapsulation_673(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (if676_677(true, fake, state, depth + 1))
    {
        resettable4.reset();
        if676_677(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (m_typematch_ident_semicolon_678(true, fake, state, depth + 1))
    {
        resettable5.reset();
        m_typematch_ident_semicolon_678(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_const_typematch_ident_equal_expor_semicolon_679(bool is_can, std::shared_ptr<leaf::parsing::instance::constant>& actual, leaf::parsing::instance::constant_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__const(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__equal(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_or(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l8 = token__semicolon(depth + 1);
    if (l8.has_value())
    {
        for (auto i9 = l8.value(); i9 != 0; i9--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l11 = token__const(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto val12 = p_match_type_match(depth + 1);
    actual->target_type = val12;
    skip();
    auto val13 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->name = val13;
    skip();
    auto l15 = token__equal(depth + 1).value();
    for (;l15 != 0; l15--)
    {
        next();
    }
    skip();
    auto val16 = lr_match_exp_or(depth + 1);
    actual->value = val16;
    skip();
    auto l18 = token__semicolon(depth + 1).value();
    for (;l18 != 0; l18--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_constant(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::constant> fake;
    constant_state state;
    if (!m_const_typematch_ident_equal_expor_semicolon_679(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::constant> leaf::parsing::instance::p_match_constant(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::constant>();
    std::shared_ptr<leaf::parsing::instance::constant> fake;
    constant_state state;
    resettable resettable2(*this);
    if (m_const_typematch_ident_equal_expor_semicolon_679(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_const_typematch_ident_equal_expor_semicolon_679(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_using_680(bool is_can, std::shared_ptr<leaf::parsing::instance::using_>& actual, leaf::parsing::instance::using__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__using(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__using(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_namespace_identnavigation_681(bool is_can, std::shared_ptr<leaf::parsing::instance::using_>& actual, leaf::parsing::instance::using__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__namespace(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_ident_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__namespace(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = lr_match_ident_navigation(depth + 1);
    actual->ident = val6;
    skip();
    if (!is_can)
    {
        actual->is_namespace = true;
    }
    return true;
}
bool leaf::parsing::instance::m_class_identnavigation_682(bool is_can, std::shared_ptr<leaf::parsing::instance::using_>& actual, leaf::parsing::instance::using__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__class(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_ident_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__class(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = lr_match_ident_navigation(depth + 1);
    actual->ident = val6;
    skip();
    if (!is_can)
    {
        actual->is_class = true;
    }
    return true;
}
bool leaf::parsing::instance::alternatives683(bool is_can, std::shared_ptr<leaf::parsing::instance::using_>& actual, leaf::parsing::instance::using__state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_namespace_identnavigation_681(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_namespace_identnavigation_681(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_class_identnavigation_682(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_class_identnavigation_682(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::m_equal_684(bool is_can, std::shared_ptr<leaf::parsing::instance::using_>& actual, leaf::parsing::instance::using__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__equal(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_equal_ident_685(bool is_can, std::shared_ptr<leaf::parsing::instance::using_>& actual, leaf::parsing::instance::using__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__equal(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->alias = val8;
    skip();
    return true;
}
bool leaf::parsing::instance::if686_687(bool is_can, std::shared_ptr<leaf::parsing::instance::using_>& actual, leaf::parsing::instance::using__state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_equal_684(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_equal_ident_685(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: = ({ Token: = (=)}), $ref: ident ({ Token: ident}) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_equal_ident_685(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: = ({ Token: = (=)}), $ref: ident ({ Token: ident}) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::p_can_using_(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::using_> fake;
    using__state state;
    if (!m_using_680(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!alternatives683(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if686_687(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::using_> leaf::parsing::instance::p_match_using_(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::using_>();
    std::shared_ptr<leaf::parsing::instance::using_> fake;
    using__state state;
    resettable resettable2(*this);
    if (m_using_680(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_using_680(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (alternatives683(true, fake, state, depth + 1))
    {
        resettable3.reset();
        alternatives683(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (if686_687(true, fake, state, depth + 1))
    {
        resettable4.reset();
        if686_687(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_encapsulation_alias_688(bool is_can, std::shared_ptr<leaf::parsing::instance::alias_encapsulated>& actual, leaf::parsing::instance::alias_encapsulated_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_encapsulation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_alias(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_encapsulation(depth + 1);
    actual->encaps = val2;
    skip();
    auto val3 = p_match_alias(depth + 1);
    actual->actual = val3;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_alias_encapsulated(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::alias_encapsulated> fake;
    alias_encapsulated_state state;
    if (!m_encapsulation_alias_688(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::alias_encapsulated> leaf::parsing::instance::p_match_alias_encapsulated(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::alias_encapsulated>();
    std::shared_ptr<leaf::parsing::instance::alias_encapsulated> fake;
    alias_encapsulated_state state;
    resettable resettable2(*this);
    if (m_encapsulation_alias_688(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_encapsulation_alias_688(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_alias_ident_equal_typematch_689(bool is_can, std::shared_ptr<leaf::parsing::instance::alias>& actual, leaf::parsing::instance::alias_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__alias(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__equal(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l9 = token__alias(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    auto val10 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->alias = val10;
    skip();
    auto l12 = token__equal(depth + 1).value();
    for (;l12 != 0; l12--)
    {
        next();
    }
    skip();
    auto val13 = p_match_type_match(depth + 1);
    actual->ident = val13;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_alias(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::alias> fake;
    alias_state state;
    if (!m_alias_ident_equal_typematch_689(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::alias> leaf::parsing::instance::p_match_alias(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::alias>();
    std::shared_ptr<leaf::parsing::instance::alias> fake;
    alias_state state;
    resettable resettable2(*this);
    if (m_alias_ident_equal_typematch_689(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_alias_ident_equal_typematch_689(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_ident_callbody_690(bool is_can, std::shared_ptr<leaf::parsing::instance::call>& actual, leaf::parsing::instance::call_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_call_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->method = val4;
    skip();
    auto val5 = p_match_call_body(depth + 1);
    actual->body = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_call(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::call> fake;
    call_state state;
    if (!m_ident_callbody_690(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::call> leaf::parsing::instance::p_match_call(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::call>();
    std::shared_ptr<leaf::parsing::instance::call> fake;
    call_state state;
    resettable resettable2(*this);
    if (m_ident_callbody_690(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_ident_callbody_690(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_roundbracketopen_691(bool is_can, std::shared_ptr<leaf::parsing::instance::call_body>& actual, leaf::parsing::instance::call_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__round_bracket_open(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_expression_692(bool is_can, std::shared_ptr<leaf::parsing::instance::call_body>& actual, leaf::parsing::instance::call_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_expression(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_expression_693(bool is_can, std::shared_ptr<leaf::parsing::instance::call_body>& actual, leaf::parsing::instance::call_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_expression(depth + 1);
    actual->args.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_roundbracketclose_694(bool is_can, std::shared_ptr<leaf::parsing::instance::call_body>& actual, leaf::parsing::instance::call_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__round_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_expression_695(bool is_can, std::shared_ptr<leaf::parsing::instance::call_body>& actual, leaf::parsing::instance::call_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_expression(depth + 1);
    actual->args.push_back(val6);
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_696(bool is_can, std::shared_ptr<leaf::parsing::instance::call_body>& actual, leaf::parsing::instance::call_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives697(bool is_can, std::shared_ptr<leaf::parsing::instance::call_body>& actual, leaf::parsing::instance::call_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_comma_expression_695(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_expression_695(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_comma_696(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_696(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (!is_can)
    {
        report("Failed to match one of the following: { ,, expression, , }", depth);
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while698_699(bool is_can, std::shared_ptr<leaf::parsing::instance::call_body>& actual, leaf::parsing::instance::call_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_roundbracketclose_694(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            while (!alternatives697(true, actual, state, depth + 1) && current() != '\0')
            {
                next();
            }
            resettable resettable2(*this);
            cond3 = m_roundbracketclose_694(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            if (!alternatives697(false, actual, state, depth + 1))
            {
                while (current() != '\0')
                {
                    resettable resettable4(*this);
                    if (alternatives697(true, actual, state, depth + 1))
                    {
                        resettable4.reset();
                        break;
                    }
                    next();
                }
            }
            resettable resettable2(*this);
            cond3 = m_roundbracketclose_694(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::if700_701(bool is_can, std::shared_ptr<leaf::parsing::instance::call_body>& actual, leaf::parsing::instance::call_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_expression_692(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_expression_693(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: expression (XCG.Parsing.Production) }", depth);
                return false;
            }
            while698_699(true, actual, state, depth + 1);
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_expression_693(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: expression (XCG.Parsing.Production) }", depth);
                return false;
            }
            while698_699(false, actual, state, depth + 1);
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::m_roundbracketclose_702(bool is_can, std::shared_ptr<leaf::parsing::instance::call_body>& actual, leaf::parsing::instance::call_body_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__round_bracket_close(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__round_bracket_close(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_call_body(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::call_body> fake;
    call_body_state state;
    if (!m_roundbracketopen_691(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if700_701(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_roundbracketclose_702(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::call_body> leaf::parsing::instance::p_match_call_body(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::call_body>();
    std::shared_ptr<leaf::parsing::instance::call_body> fake;
    call_body_state state;
    resettable resettable2(*this);
    if (m_roundbracketopen_691(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_roundbracketopen_691(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (if700_701(true, fake, state, depth + 1))
    {
        resettable3.reset();
        if700_701(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (m_roundbracketclose_702(true, fake, state, depth + 1))
    {
        resettable4.reset();
        m_roundbracketclose_702(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_free_expression_703(bool is_can, std::shared_ptr<leaf::parsing::instance::free>& actual, leaf::parsing::instance::free_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__free(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__free(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_expression(depth + 1);
    actual->value = val6;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_free(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::free> fake;
    free_state state;
    if (!m_free_expression_703(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::free> leaf::parsing::instance::p_match_free(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::free>();
    std::shared_ptr<leaf::parsing::instance::free> fake;
    free_state state;
    resettable resettable2(*this);
    if (m_free_expression_703(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_free_expression_703(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_alloc_stack_typenavigation_squarebracketopen_expression_squarebracketclose_704(bool is_can, std::shared_ptr<leaf::parsing::instance::alloc>& actual, leaf::parsing::instance::alloc_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__alloc(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__stack(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__square_bracket_open(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l8 = token__square_bracket_close(depth + 1);
    if (l8.has_value())
    {
        for (auto i9 = l8.value(); i9 != 0; i9--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l11 = token__alloc(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto l13 = token__stack(depth + 1).value();
    for (;l13 != 0; l13--)
    {
        next();
    }
    skip();
    auto val14 = lr_match_type_navigation(depth + 1);
    actual->type = val14;
    skip();
    auto l16 = token__square_bracket_open(depth + 1).value();
    for (;l16 != 0; l16--)
    {
        next();
    }
    skip();
    auto val17 = p_match_expression(depth + 1);
    actual->exp = val17;
    skip();
    auto l19 = token__square_bracket_close(depth + 1).value();
    for (;l19 != 0; l19--)
    {
        next();
    }
    skip();
    if (!is_can)
    {
        actual->is_stack = true;
    }
    if (!is_can)
    {
        actual->is_heap = false;
    }
    return true;
}
bool leaf::parsing::instance::m_alloc_stack_typenavigation_callbody_705(bool is_can, std::shared_ptr<leaf::parsing::instance::alloc>& actual, leaf::parsing::instance::alloc_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__alloc(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__stack(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_call_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__alloc(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto l9 = token__stack(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    auto val10 = lr_match_type_navigation(depth + 1);
    actual->type = val10;
    skip();
    auto val11 = p_match_call_body(depth + 1);
    actual->body = val11;
    skip();
    if (!is_can)
    {
        actual->is_stack = true;
    }
    if (!is_can)
    {
        actual->is_heap = false;
    }
    return true;
}
bool leaf::parsing::instance::m_alloc_heap_typenavigation_squarebracketopen_expression_squarebracketclose_706(bool is_can, std::shared_ptr<leaf::parsing::instance::alloc>& actual, leaf::parsing::instance::alloc_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__alloc(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__heap(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__square_bracket_open(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l8 = token__square_bracket_close(depth + 1);
    if (l8.has_value())
    {
        for (auto i9 = l8.value(); i9 != 0; i9--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l11 = token__alloc(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto l13 = token__heap(depth + 1).value();
    for (;l13 != 0; l13--)
    {
        next();
    }
    skip();
    auto val14 = lr_match_type_navigation(depth + 1);
    actual->type = val14;
    skip();
    auto l16 = token__square_bracket_open(depth + 1).value();
    for (;l16 != 0; l16--)
    {
        next();
    }
    skip();
    auto val17 = p_match_expression(depth + 1);
    actual->exp = val17;
    skip();
    auto l19 = token__square_bracket_close(depth + 1).value();
    for (;l19 != 0; l19--)
    {
        next();
    }
    skip();
    if (!is_can)
    {
        actual->is_stack = false;
    }
    if (!is_can)
    {
        actual->is_heap = true;
    }
    return true;
}
bool leaf::parsing::instance::m_alloc_heap_typenavigation_callbody_707(bool is_can, std::shared_ptr<leaf::parsing::instance::alloc>& actual, leaf::parsing::instance::alloc_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__alloc(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__heap(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_call_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__alloc(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto l9 = token__heap(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    auto val10 = lr_match_type_navigation(depth + 1);
    actual->type = val10;
    skip();
    auto val11 = p_match_call_body(depth + 1);
    actual->body = val11;
    skip();
    if (!is_can)
    {
        actual->is_stack = false;
    }
    if (!is_can)
    {
        actual->is_heap = true;
    }
    return true;
}
bool leaf::parsing::instance::m_alloc_ident_typenavigation_squarebracketopen_expression_squarebracketclose_708(bool is_can, std::shared_ptr<leaf::parsing::instance::alloc>& actual, leaf::parsing::instance::alloc_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__alloc(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__square_bracket_open(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l8 = token__square_bracket_close(depth + 1);
    if (l8.has_value())
    {
        for (auto i9 = l8.value(); i9 != 0; i9--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l11 = token__alloc(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto val12 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->allocator = val12;
    skip();
    auto val13 = lr_match_type_navigation(depth + 1);
    actual->type = val13;
    skip();
    auto l15 = token__square_bracket_open(depth + 1).value();
    for (;l15 != 0; l15--)
    {
        next();
    }
    skip();
    auto val16 = p_match_expression(depth + 1);
    actual->exp = val16;
    skip();
    auto l18 = token__square_bracket_close(depth + 1).value();
    for (;l18 != 0; l18--)
    {
        next();
    }
    skip();
    if (!is_can)
    {
        actual->is_stack = false;
    }
    if (!is_can)
    {
        actual->is_heap = true;
    }
    return true;
}
bool leaf::parsing::instance::m_alloc_ident_typenavigation_callbody_709(bool is_can, std::shared_ptr<leaf::parsing::instance::alloc>& actual, leaf::parsing::instance::alloc_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__alloc(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_call_body(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__alloc(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->allocator = val8;
    skip();
    auto val9 = lr_match_type_navigation(depth + 1);
    actual->type = val9;
    skip();
    auto val10 = p_match_call_body(depth + 1);
    actual->body = val10;
    skip();
    if (!is_can)
    {
        actual->is_stack = false;
    }
    if (!is_can)
    {
        actual->is_heap = true;
    }
    return true;
}
bool leaf::parsing::instance::alternatives710(bool is_can, std::shared_ptr<leaf::parsing::instance::alloc>& actual, leaf::parsing::instance::alloc_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_alloc_stack_typenavigation_squarebracketopen_expression_squarebracketclose_704(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_alloc_stack_typenavigation_squarebracketopen_expression_squarebracketclose_704(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_alloc_stack_typenavigation_callbody_705(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_alloc_stack_typenavigation_callbody_705(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_alloc_heap_typenavigation_squarebracketopen_expression_squarebracketclose_706(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_alloc_heap_typenavigation_squarebracketopen_expression_squarebracketclose_706(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_alloc_heap_typenavigation_callbody_707(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_alloc_heap_typenavigation_callbody_707(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_alloc_ident_typenavigation_squarebracketopen_expression_squarebracketclose_708(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_alloc_ident_typenavigation_squarebracketopen_expression_squarebracketclose_708(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_alloc_ident_typenavigation_callbody_709(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_alloc_ident_typenavigation_callbody_709(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_alloc(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::alloc> fake;
    alloc_state state;
    if (!alternatives710(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::alloc> leaf::parsing::instance::p_match_alloc(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::alloc>();
    std::shared_ptr<leaf::parsing::instance::alloc> fake;
    alloc_state state;
    resettable resettable2(*this);
    if (alternatives710(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives710(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_typeof_roundbracketopen_typematch_roundbracketclose_711(bool is_can, std::shared_ptr<leaf::parsing::instance::typeof_>& actual, leaf::parsing::instance::typeof__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__typeof(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_open(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__round_bracket_close(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l9 = token__typeof(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    auto l11 = token__round_bracket_open(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto val12 = p_match_type_match(depth + 1);
    actual->value = val12;
    skip();
    auto l14 = token__round_bracket_close(depth + 1).value();
    for (;l14 != 0; l14--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_typeof_(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::typeof_> fake;
    typeof__state state;
    if (!m_typeof_roundbracketopen_typematch_roundbracketclose_711(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::typeof_> leaf::parsing::instance::p_match_typeof_(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::typeof_>();
    std::shared_ptr<leaf::parsing::instance::typeof_> fake;
    typeof__state state;
    resettable resettable2(*this);
    if (m_typeof_roundbracketopen_typematch_roundbracketclose_711(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_typeof_roundbracketopen_typematch_roundbracketclose_711(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_nameof_roundbracketopen_expor_roundbracketclose_712(bool is_can, std::shared_ptr<leaf::parsing::instance::nameof>& actual, leaf::parsing::instance::nameof_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__nameof(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_open(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_or(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__round_bracket_close(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l9 = token__nameof(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    auto l11 = token__round_bracket_open(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto val12 = lr_match_exp_or(depth + 1);
    actual->value = val12;
    skip();
    auto l14 = token__round_bracket_close(depth + 1).value();
    for (;l14 != 0; l14--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_nameof(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::nameof> fake;
    nameof_state state;
    if (!m_nameof_roundbracketopen_expor_roundbracketclose_712(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::nameof> leaf::parsing::instance::p_match_nameof(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::nameof>();
    std::shared_ptr<leaf::parsing::instance::nameof> fake;
    nameof_state state;
    resettable resettable2(*this);
    if (m_nameof_roundbracketopen_expor_roundbracketclose_712(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_nameof_roundbracketopen_expor_roundbracketclose_712(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_fqnameof_roundbracketopen_expor_roundbracketclose_713(bool is_can, std::shared_ptr<leaf::parsing::instance::fqnameof>& actual, leaf::parsing::instance::fqnameof_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__fqnameof(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_open(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_or(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__round_bracket_close(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l9 = token__fqnameof(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    auto l11 = token__round_bracket_open(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto val12 = lr_match_exp_or(depth + 1);
    actual->value = val12;
    skip();
    auto l14 = token__round_bracket_close(depth + 1).value();
    for (;l14 != 0; l14--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_fqnameof(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::fqnameof> fake;
    fqnameof_state state;
    if (!m_fqnameof_roundbracketopen_expor_roundbracketclose_713(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::fqnameof> leaf::parsing::instance::p_match_fqnameof(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::fqnameof>();
    std::shared_ptr<leaf::parsing::instance::fqnameof> fake;
    fqnameof_state state;
    resettable resettable2(*this);
    if (m_fqnameof_roundbracketopen_expor_roundbracketclose_713(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_fqnameof_roundbracketopen_expor_roundbracketclose_713(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_sizeof_roundbracketopen_typematch_roundbracketclose_714(bool is_can, std::shared_ptr<leaf::parsing::instance::sizeof_>& actual, leaf::parsing::instance::sizeof__state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__sizeof(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__round_bracket_open(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__round_bracket_close(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l9 = token__sizeof(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    auto l11 = token__round_bracket_open(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto val12 = p_match_type_match(depth + 1);
    actual->type = val12;
    skip();
    auto l14 = token__round_bracket_close(depth + 1).value();
    for (;l14 != 0; l14--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_sizeof_(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::sizeof_> fake;
    sizeof__state state;
    if (!m_sizeof_roundbracketopen_typematch_roundbracketclose_714(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::sizeof_> leaf::parsing::instance::p_match_sizeof_(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::sizeof_>();
    std::shared_ptr<leaf::parsing::instance::sizeof_> fake;
    sizeof__state state;
    resettable resettable2(*this);
    if (m_sizeof_roundbracketopen_typematch_roundbracketclose_714(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_sizeof_roundbracketopen_typematch_roundbracketclose_714(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_ident_typenavigation_squarebracketopen_squarebracketclose_715(bool is_can, std::shared_ptr<leaf::parsing::instance::type_match>& actual, leaf::parsing::instance::type_match_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__square_bracket_open(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token__square_bracket_close(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->allocator = val8;
    skip();
    auto val9 = lr_match_type_navigation(depth + 1);
    actual->base = val9;
    skip();
    auto l11 = token__square_bracket_open(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    auto l13 = token__square_bracket_close(depth + 1).value();
    for (;l13 != 0; l13--)
    {
        next();
    }
    skip();
    if (!is_can)
    {
        actual->is_array = true;
    }
    return true;
}
bool leaf::parsing::instance::m_ident_typenavigation_716(bool is_can, std::shared_ptr<leaf::parsing::instance::type_match>& actual, leaf::parsing::instance::type_match_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->allocator = val4;
    skip();
    auto val5 = lr_match_type_navigation(depth + 1);
    actual->base = val5;
    skip();
    if (!is_can)
    {
        actual->is_array = false;
    }
    return true;
}
bool leaf::parsing::instance::m_typenavigation_squarebracketopen_squarebracketclose_717(bool is_can, std::shared_ptr<leaf::parsing::instance::type_match>& actual, leaf::parsing::instance::type_match_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__square_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__square_bracket_close(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = lr_match_type_navigation(depth + 1);
    actual->base = val6;
    skip();
    auto l8 = token__square_bracket_open(depth + 1).value();
    for (;l8 != 0; l8--)
    {
        next();
    }
    skip();
    auto l10 = token__square_bracket_close(depth + 1).value();
    for (;l10 != 0; l10--)
    {
        next();
    }
    skip();
    if (!is_can)
    {
        actual->is_array = true;
    }
    return true;
}
bool leaf::parsing::instance::m_typenavigation_718(bool is_can, std::shared_ptr<leaf::parsing::instance::type_match>& actual, leaf::parsing::instance::type_match_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_type_navigation(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_type_navigation(depth + 1);
    actual->base = val2;
    skip();
    if (!is_can)
    {
        actual->is_array = false;
    }
    return true;
}
bool leaf::parsing::instance::alternatives719(bool is_can, std::shared_ptr<leaf::parsing::instance::type_match>& actual, leaf::parsing::instance::type_match_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_ident_typenavigation_squarebracketopen_squarebracketclose_715(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_typenavigation_squarebracketopen_squarebracketclose_715(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ident_typenavigation_716(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_typenavigation_716(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_typenavigation_squarebracketopen_squarebracketclose_717(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_typenavigation_squarebracketopen_squarebracketclose_717(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_typenavigation_718(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_typenavigation_718(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_type_match(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::type_match> fake;
    type_match_state state;
    if (!alternatives719(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::type_match> leaf::parsing::instance::p_match_type_match(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::type_match>();
    std::shared_ptr<leaf::parsing::instance::type_match> fake;
    type_match_state state;
    resettable resettable2(*this);
    if (alternatives719(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives719(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_stringformatablestart_720(bool is_can, std::shared_ptr<leaf::parsing::instance::string_formatable>& actual, leaf::parsing::instance::string_formatable_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_string_formatable_start(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_string_formatable_start(depth + 1).value(), tok::STRING_FORMATABLE_START);
    actual->parts.push_back(val4);
    skip();
    return true;
}
bool leaf::parsing::instance::m_expression_721(bool is_can, std::shared_ptr<leaf::parsing::instance::string_formatable>& actual, leaf::parsing::instance::string_formatable_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    p_match_expression(depth + 1);
    skip();
    return true;
}
bool leaf::parsing::instance::m_stringformatableend_722(bool is_can, std::shared_ptr<leaf::parsing::instance::string_formatable>& actual, leaf::parsing::instance::string_formatable_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_string_formatable_end(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token_string_formatable_end(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_stringformatablecontinuation_723(bool is_can, std::shared_ptr<leaf::parsing::instance::string_formatable>& actual, leaf::parsing::instance::string_formatable_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_string_formatable_continuation(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_string_formatable_continuation(depth + 1).value(), tok::STRING_FORMATABLE_CONTINUATION);
    actual->parts.push_back(val4);
    skip();
    return true;
}
bool leaf::parsing::instance::m_expression_724(bool is_can, std::shared_ptr<leaf::parsing::instance::string_formatable>& actual, leaf::parsing::instance::string_formatable_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_expression(depth + 1);
    actual->parts.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::while725_726(bool is_can, std::shared_ptr<leaf::parsing::instance::string_formatable>& actual, leaf::parsing::instance::string_formatable_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_stringformatableend_722(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            if (m_stringformatablecontinuation_723(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: string-formatable-continuation ({ Token: string-formatable-continuation}) }", depth);
                return false;
            }
            if (m_expression_724(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: expression (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_stringformatableend_722(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            if (m_stringformatablecontinuation_723(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: string-formatable-continuation ({ Token: string-formatable-continuation}) }", depth);
                return false;
            }
            if (m_expression_724(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: expression (XCG.Parsing.Production) }", depth);
                return false;
            }
            resettable resettable2(*this);
            cond3 = m_stringformatableend_722(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_stringformatableend_727(bool is_can, std::shared_ptr<leaf::parsing::instance::string_formatable>& actual, leaf::parsing::instance::string_formatable_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_string_formatable_end(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_string_formatable_end(depth + 1).value(), tok::STRING_FORMATABLE_END);
    actual->parts.push_back(val4);
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_string_formatable(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::string_formatable> fake;
    string_formatable_state state;
    if (!m_stringformatablestart_720(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_expression_721(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while725_726(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_stringformatableend_727(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::string_formatable> leaf::parsing::instance::p_match_string_formatable(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::string_formatable>();
    std::shared_ptr<leaf::parsing::instance::string_formatable> fake;
    string_formatable_state state;
    resettable resettable2(*this);
    if (m_stringformatablestart_720(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_stringformatablestart_720(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_expression_721(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_expression_721(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (while725_726(true, fake, state, depth + 1))
    {
        resettable4.reset();
        while725_726(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (m_stringformatableend_727(true, fake, state, depth + 1))
    {
        resettable5.reset();
        m_stringformatableend_727(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_ident_stringformatable_ident_728(bool is_can, std::shared_ptr<leaf::parsing::instance::string_literal>& actual, leaf::parsing::instance::string_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_string_formatable(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val6;
    skip();
    auto val7 = p_match_string_formatable(depth + 1);
    actual->value = val7;
    skip();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val8;
    skip();
    return true;
}
bool leaf::parsing::instance::m_stringformatable_ident_729(bool is_can, std::shared_ptr<leaf::parsing::instance::string_literal>& actual, leaf::parsing::instance::string_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_string_formatable(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_string_formatable(depth + 1);
    actual->value = val4;
    skip();
    auto val5 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ident_stringformatable_730(bool is_can, std::shared_ptr<leaf::parsing::instance::string_literal>& actual, leaf::parsing::instance::string_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_string_formatable(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val4;
    skip();
    auto val5 = p_match_string_formatable(depth + 1);
    actual->value = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_stringformatable_731(bool is_can, std::shared_ptr<leaf::parsing::instance::string_literal>& actual, leaf::parsing::instance::string_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_string_formatable(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_string_formatable(depth + 1);
    actual->value = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ident_stringformatablefake_ident_732(bool is_can, std::shared_ptr<leaf::parsing::instance::string_literal>& actual, leaf::parsing::instance::string_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_string_formatable_fake(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token_ident(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val8;
    skip();
    auto val9 = create_token(token_string_formatable_fake(depth + 1).value(), tok::STRING_FORMATABLE_FAKE);
    actual->value = val9;
    skip();
    auto val10 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val10;
    skip();
    return true;
}
bool leaf::parsing::instance::m_stringformatablefake_ident_733(bool is_can, std::shared_ptr<leaf::parsing::instance::string_literal>& actual, leaf::parsing::instance::string_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_string_formatable_fake(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_string_formatable_fake(depth + 1).value(), tok::STRING_FORMATABLE_FAKE);
    actual->value = val6;
    skip();
    auto val7 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ident_stringformatablefake_734(bool is_can, std::shared_ptr<leaf::parsing::instance::string_literal>& actual, leaf::parsing::instance::string_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_string_formatable_fake(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val6;
    skip();
    auto val7 = create_token(token_string_formatable_fake(depth + 1).value(), tok::STRING_FORMATABLE_FAKE);
    actual->value = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_stringformatablefake_735(bool is_can, std::shared_ptr<leaf::parsing::instance::string_literal>& actual, leaf::parsing::instance::string_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_string_formatable_fake(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_string_formatable_fake(depth + 1).value(), tok::STRING_FORMATABLE_FAKE);
    actual->value = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ident_string_ident_736(bool is_can, std::shared_ptr<leaf::parsing::instance::string_literal>& actual, leaf::parsing::instance::string_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_string(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token_ident(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val8;
    skip();
    auto val9 = create_token(token_string(depth + 1).value(), tok::STRING);
    actual->value = val9;
    skip();
    auto val10 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val10;
    skip();
    return true;
}
bool leaf::parsing::instance::m_string_ident_737(bool is_can, std::shared_ptr<leaf::parsing::instance::string_literal>& actual, leaf::parsing::instance::string_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_string(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_string(depth + 1).value(), tok::STRING);
    actual->value = val6;
    skip();
    auto val7 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ident_string_738(bool is_can, std::shared_ptr<leaf::parsing::instance::string_literal>& actual, leaf::parsing::instance::string_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_string(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val6;
    skip();
    auto val7 = create_token(token_string(depth + 1).value(), tok::STRING);
    actual->value = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_string_739(bool is_can, std::shared_ptr<leaf::parsing::instance::string_literal>& actual, leaf::parsing::instance::string_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_string(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_string(depth + 1).value(), tok::STRING);
    actual->value = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives740(bool is_can, std::shared_ptr<leaf::parsing::instance::string_literal>& actual, leaf::parsing::instance::string_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_ident_stringformatable_ident_728(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_stringformatable_ident_728(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_stringformatable_ident_729(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_stringformatable_ident_729(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ident_stringformatable_730(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_stringformatable_730(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_stringformatable_731(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_stringformatable_731(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ident_stringformatablefake_ident_732(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_stringformatablefake_ident_732(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_stringformatablefake_ident_733(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_stringformatablefake_ident_733(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ident_stringformatablefake_734(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_stringformatablefake_734(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_stringformatablefake_735(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_stringformatablefake_735(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ident_string_ident_736(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_string_ident_736(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_string_ident_737(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_string_ident_737(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ident_string_738(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_string_738(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_string_739(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_string_739(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_string_literal(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::string_literal> fake;
    string_literal_state state;
    if (!alternatives740(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::string_literal> leaf::parsing::instance::p_match_string_literal(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::string_literal>();
    std::shared_ptr<leaf::parsing::instance::string_literal> fake;
    string_literal_state state;
    resettable resettable2(*this);
    if (alternatives740(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives740(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_ident_scalar_ident_741(bool is_can, std::shared_ptr<leaf::parsing::instance::scalar_literal>& actual, leaf::parsing::instance::scalar_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_scalar(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token_ident(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val8;
    skip();
    auto val9 = create_token(token_scalar(depth + 1).value(), tok::SCALAR);
    actual->value = val9;
    skip();
    auto val10 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val10;
    skip();
    return true;
}
bool leaf::parsing::instance::m_scalar_ident_742(bool is_can, std::shared_ptr<leaf::parsing::instance::scalar_literal>& actual, leaf::parsing::instance::scalar_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_scalar(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_scalar(depth + 1).value(), tok::SCALAR);
    actual->value = val6;
    skip();
    auto val7 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ident_scalar_743(bool is_can, std::shared_ptr<leaf::parsing::instance::scalar_literal>& actual, leaf::parsing::instance::scalar_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_scalar(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val6;
    skip();
    auto val7 = create_token(token_scalar(depth + 1).value(), tok::SCALAR);
    actual->value = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_scalar_744(bool is_can, std::shared_ptr<leaf::parsing::instance::scalar_literal>& actual, leaf::parsing::instance::scalar_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_scalar(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_scalar(depth + 1).value(), tok::SCALAR);
    actual->value = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives745(bool is_can, std::shared_ptr<leaf::parsing::instance::scalar_literal>& actual, leaf::parsing::instance::scalar_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_ident_scalar_ident_741(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_scalar_ident_741(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_scalar_ident_742(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_scalar_ident_742(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ident_scalar_743(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_scalar_743(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_scalar_744(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_scalar_744(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_scalar_literal(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::scalar_literal> fake;
    scalar_literal_state state;
    if (!alternatives745(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::scalar_literal> leaf::parsing::instance::p_match_scalar_literal(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::scalar_literal>();
    std::shared_ptr<leaf::parsing::instance::scalar_literal> fake;
    scalar_literal_state state;
    resettable resettable2(*this);
    if (alternatives745(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives745(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_ident_integerhex_ident_746(bool is_can, std::shared_ptr<leaf::parsing::instance::integer_hex_literal>& actual, leaf::parsing::instance::integer_hex_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_integer_hex(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token_ident(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val8;
    skip();
    auto val9 = create_token(token_integer_hex(depth + 1).value(), tok::INTEGER_HEX);
    actual->value = val9;
    skip();
    auto val10 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val10;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integerhex_ident_747(bool is_can, std::shared_ptr<leaf::parsing::instance::integer_hex_literal>& actual, leaf::parsing::instance::integer_hex_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer_hex(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_integer_hex(depth + 1).value(), tok::INTEGER_HEX);
    actual->value = val6;
    skip();
    auto val7 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ident_integerhex_748(bool is_can, std::shared_ptr<leaf::parsing::instance::integer_hex_literal>& actual, leaf::parsing::instance::integer_hex_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_integer_hex(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val6;
    skip();
    auto val7 = create_token(token_integer_hex(depth + 1).value(), tok::INTEGER_HEX);
    actual->value = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integerhex_749(bool is_can, std::shared_ptr<leaf::parsing::instance::integer_hex_literal>& actual, leaf::parsing::instance::integer_hex_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer_hex(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_integer_hex(depth + 1).value(), tok::INTEGER_HEX);
    actual->value = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives750(bool is_can, std::shared_ptr<leaf::parsing::instance::integer_hex_literal>& actual, leaf::parsing::instance::integer_hex_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_ident_integerhex_ident_746(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_integerhex_ident_746(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integerhex_ident_747(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integerhex_ident_747(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ident_integerhex_748(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_integerhex_748(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integerhex_749(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integerhex_749(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_integer_hex_literal(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::integer_hex_literal> fake;
    integer_hex_literal_state state;
    if (!alternatives750(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::integer_hex_literal> leaf::parsing::instance::p_match_integer_hex_literal(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::integer_hex_literal>();
    std::shared_ptr<leaf::parsing::instance::integer_hex_literal> fake;
    integer_hex_literal_state state;
    resettable resettable2(*this);
    if (alternatives750(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives750(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_ident_integerbinary_ident_751(bool is_can, std::shared_ptr<leaf::parsing::instance::integer_binary_literal>& actual, leaf::parsing::instance::integer_binary_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_integer_binary(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token_ident(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val8;
    skip();
    auto val9 = create_token(token_integer_binary(depth + 1).value(), tok::INTEGER_BINARY);
    actual->value = val9;
    skip();
    auto val10 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val10;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integerbinary_ident_752(bool is_can, std::shared_ptr<leaf::parsing::instance::integer_binary_literal>& actual, leaf::parsing::instance::integer_binary_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer_binary(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_integer_binary(depth + 1).value(), tok::INTEGER_BINARY);
    actual->value = val6;
    skip();
    auto val7 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ident_integerbinary_753(bool is_can, std::shared_ptr<leaf::parsing::instance::integer_binary_literal>& actual, leaf::parsing::instance::integer_binary_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_integer_binary(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val6;
    skip();
    auto val7 = create_token(token_integer_binary(depth + 1).value(), tok::INTEGER_BINARY);
    actual->value = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integerbinary_754(bool is_can, std::shared_ptr<leaf::parsing::instance::integer_binary_literal>& actual, leaf::parsing::instance::integer_binary_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer_binary(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_integer_binary(depth + 1).value(), tok::INTEGER_BINARY);
    actual->value = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives755(bool is_can, std::shared_ptr<leaf::parsing::instance::integer_binary_literal>& actual, leaf::parsing::instance::integer_binary_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_ident_integerbinary_ident_751(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_integerbinary_ident_751(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integerbinary_ident_752(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integerbinary_ident_752(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ident_integerbinary_753(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_integerbinary_753(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integerbinary_754(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integerbinary_754(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_integer_binary_literal(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::integer_binary_literal> fake;
    integer_binary_literal_state state;
    if (!alternatives755(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::integer_binary_literal> leaf::parsing::instance::p_match_integer_binary_literal(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::integer_binary_literal>();
    std::shared_ptr<leaf::parsing::instance::integer_binary_literal> fake;
    integer_binary_literal_state state;
    resettable resettable2(*this);
    if (alternatives755(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives755(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_ident_integer_ident_756(bool is_can, std::shared_ptr<leaf::parsing::instance::integer_literal>& actual, leaf::parsing::instance::integer_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_integer(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token_ident(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val8;
    skip();
    auto val9 = create_token(token_integer(depth + 1).value(), tok::INTEGER);
    actual->value = val9;
    skip();
    auto val10 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val10;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integer_ident_757(bool is_can, std::shared_ptr<leaf::parsing::instance::integer_literal>& actual, leaf::parsing::instance::integer_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_integer(depth + 1).value(), tok::INTEGER);
    actual->value = val6;
    skip();
    auto val7 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ident_integer_758(bool is_can, std::shared_ptr<leaf::parsing::instance::integer_literal>& actual, leaf::parsing::instance::integer_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_integer(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val6;
    skip();
    auto val7 = create_token(token_integer(depth + 1).value(), tok::INTEGER);
    actual->value = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integer_759(bool is_can, std::shared_ptr<leaf::parsing::instance::integer_literal>& actual, leaf::parsing::instance::integer_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_integer(depth + 1).value(), tok::INTEGER);
    actual->value = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives760(bool is_can, std::shared_ptr<leaf::parsing::instance::integer_literal>& actual, leaf::parsing::instance::integer_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_ident_integer_ident_756(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_integer_ident_756(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integer_ident_757(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integer_ident_757(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ident_integer_758(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_integer_758(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integer_759(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integer_759(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_integer_literal(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::integer_literal> fake;
    integer_literal_state state;
    if (!alternatives760(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::integer_literal> leaf::parsing::instance::p_match_integer_literal(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::integer_literal>();
    std::shared_ptr<leaf::parsing::instance::integer_literal> fake;
    integer_literal_state state;
    resettable resettable2(*this);
    if (alternatives760(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives760(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_ident_char_ident_761(bool is_can, std::shared_ptr<leaf::parsing::instance::char_literal>& actual, leaf::parsing::instance::char_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_char_(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l6 = token_ident(depth + 1);
    if (l6.has_value())
    {
        for (auto i7 = l6.value(); i7 != 0; i7--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val8;
    skip();
    auto val9 = create_token(token_char_(depth + 1).value(), tok::CHAR_);
    actual->value = val9;
    skip();
    auto val10 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val10;
    skip();
    return true;
}
bool leaf::parsing::instance::m_char_ident_762(bool is_can, std::shared_ptr<leaf::parsing::instance::char_literal>& actual, leaf::parsing::instance::char_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_char_(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_char_(depth + 1).value(), tok::CHAR_);
    actual->value = val6;
    skip();
    auto val7 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->postfix = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ident_char_763(bool is_can, std::shared_ptr<leaf::parsing::instance::char_literal>& actual, leaf::parsing::instance::char_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_char_(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->prefix = val6;
    skip();
    auto val7 = create_token(token_char_(depth + 1).value(), tok::CHAR_);
    actual->value = val7;
    skip();
    return true;
}
bool leaf::parsing::instance::m_char_764(bool is_can, std::shared_ptr<leaf::parsing::instance::char_literal>& actual, leaf::parsing::instance::char_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_char_(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_char_(depth + 1).value(), tok::CHAR_);
    actual->value = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives765(bool is_can, std::shared_ptr<leaf::parsing::instance::char_literal>& actual, leaf::parsing::instance::char_literal_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_ident_char_ident_761(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_char_ident_761(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_char_ident_762(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_char_ident_762(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_ident_char_763(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_ident_char_763(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_char_764(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_char_764(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_char_literal(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::char_literal> fake;
    char_literal_state state;
    if (!alternatives765(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::char_literal> leaf::parsing::instance::p_match_char_literal(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::char_literal>();
    std::shared_ptr<leaf::parsing::instance::char_literal> fake;
    char_literal_state state;
    resettable resettable2(*this);
    if (alternatives765(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives765(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_typematch_ident_766(bool is_can, std::shared_ptr<leaf::parsing::instance::declaration>& actual, leaf::parsing::instance::declaration_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_type_match(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_type_match(depth + 1);
    actual->type = val4;
    skip();
    auto val5 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->name = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_declaration(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::declaration> fake;
    declaration_state state;
    if (!m_typematch_ident_766(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::declaration> leaf::parsing::instance::p_match_declaration(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::declaration>();
    std::shared_ptr<leaf::parsing::instance::declaration> fake;
    declaration_state state;
    resettable resettable2(*this);
    if (m_typematch_ident_766(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_typematch_ident_766(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_return_semicolon_767(bool is_can, std::shared_ptr<leaf::parsing::instance::return_statement>& actual, leaf::parsing::instance::return_statement_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__return(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__semicolon(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__return(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto l9 = token__semicolon(depth + 1).value();
    for (;l9 != 0; l9--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_return_expression_semicolon_768(bool is_can, std::shared_ptr<leaf::parsing::instance::return_statement>& actual, leaf::parsing::instance::return_statement_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__return(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__semicolon(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__return(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = p_match_expression(depth + 1);
    actual->exp = val8;
    skip();
    auto l10 = token__semicolon(depth + 1).value();
    for (;l10 != 0; l10--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives769(bool is_can, std::shared_ptr<leaf::parsing::instance::return_statement>& actual, leaf::parsing::instance::return_statement_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_return_semicolon_767(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_return_semicolon_767(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_return_expression_semicolon_768(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_return_expression_semicolon_768(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_return_statement(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::return_statement> fake;
    return_statement_state state;
    if (!alternatives769(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::return_statement> leaf::parsing::instance::p_match_return_statement(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::return_statement>();
    std::shared_ptr<leaf::parsing::instance::return_statement> fake;
    return_statement_state state;
    resettable resettable2(*this);
    if (alternatives769(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives769(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_alias_770(bool is_can, std::shared_ptr<leaf::parsing::instance::statement>& actual, leaf::parsing::instance::statement_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_alias(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_alias(depth + 1);
    actual->aliases = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_constant_771(bool is_can, std::shared_ptr<leaf::parsing::instance::statement>& actual, leaf::parsing::instance::statement_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_constant(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_constant(depth + 1);
    actual->constants = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_returnstatement_772(bool is_can, std::shared_ptr<leaf::parsing::instance::statement>& actual, leaf::parsing::instance::statement_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_return_statement(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_return_statement(depth + 1);
    actual->ret = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_declaration_equal_expression_semicolon_773(bool is_can, std::shared_ptr<leaf::parsing::instance::statement>& actual, leaf::parsing::instance::statement_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_declaration(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__semicolon(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val6 = p_match_declaration(depth + 1);
    actual->fwrd_decl = val6;
    skip();
    auto l8 = token__equal(depth + 1).value();
    for (;l8 != 0; l8--)
    {
        next();
    }
    skip();
    auto val9 = p_match_expression(depth + 1);
    actual->exp = val9;
    skip();
    auto l11 = token__semicolon(depth + 1).value();
    for (;l11 != 0; l11--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_declaration_semicolon_774(bool is_can, std::shared_ptr<leaf::parsing::instance::statement>& actual, leaf::parsing::instance::statement_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_declaration(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__semicolon(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_declaration(depth + 1);
    actual->fwrd_decl = val4;
    skip();
    auto l6 = token__semicolon(depth + 1).value();
    for (;l6 != 0; l6--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_expression_semicolon_775(bool is_can, std::shared_ptr<leaf::parsing::instance::statement>& actual, leaf::parsing::instance::statement_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l2 = token__semicolon(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = p_match_expression(depth + 1);
    actual->exp = val4;
    skip();
    auto l6 = token__semicolon(depth + 1).value();
    for (;l6 != 0; l6--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_semicolon_776(bool is_can, std::shared_ptr<leaf::parsing::instance::statement>& actual, leaf::parsing::instance::statement_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__semicolon(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__semicolon(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_pragma_777(bool is_can, std::shared_ptr<leaf::parsing::instance::statement>& actual, leaf::parsing::instance::statement_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_pragma(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_pragma(depth + 1);
    actual->pragma = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives778(bool is_can, std::shared_ptr<leaf::parsing::instance::statement>& actual, leaf::parsing::instance::statement_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_alias_770(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_alias_770(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_constant_771(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_constant_771(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_returnstatement_772(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_returnstatement_772(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_declaration_equal_expression_semicolon_773(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_declaration_equal_expression_semicolon_773(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_declaration_semicolon_774(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_declaration_semicolon_774(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_expression_semicolon_775(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_expression_semicolon_775(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_semicolon_776(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_semicolon_776(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_pragma_777(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_pragma_777(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_statement(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::statement> fake;
    statement_state state;
    if (!alternatives778(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::statement> leaf::parsing::instance::p_match_statement(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::statement>();
    std::shared_ptr<leaf::parsing::instance::statement> fake;
    statement_state state;
    resettable resettable2(*this);
    if (alternatives778(true, fake, state, depth + 1))
    {
        resettable2.reset();
        alternatives778(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_auto841_779(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma>& actual, leaf::parsing::instance::pragma_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__auto_841(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__auto_841(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_exclamationgreaterthen_780(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma>& actual, leaf::parsing::instance::pragma_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__exclamation_greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__exclamation_greater_then(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_pragmadisable_781(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma>& actual, leaf::parsing::instance::pragma_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_pragma_disable(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_pragma_disable(depth + 1);
    actual->contents.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_pragmaenable_782(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma>& actual, leaf::parsing::instance::pragma_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_pragma_enable(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_pragma_enable(depth + 1);
    actual->contents.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_pragmasize_783(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma>& actual, leaf::parsing::instance::pragma_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_pragma_size(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_pragma_size(depth + 1);
    actual->contents.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_pragmaalign_784(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma>& actual, leaf::parsing::instance::pragma_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_pragma_align(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_pragma_align(depth + 1);
    actual->contents.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives785(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma>& actual, leaf::parsing::instance::pragma_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_pragmadisable_781(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_pragmadisable_781(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_pragmaenable_782(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_pragmaenable_782(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_pragmasize_783(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_pragmasize_783(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_pragmaalign_784(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_pragmaalign_784(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (!is_can)
    {
        report("Failed to match one of the following: { pragma-disable, pragma-enable, pragma-size, pragma-align }", depth);
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while786_787(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma>& actual, leaf::parsing::instance::pragma_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_exclamationgreaterthen_780(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            while (!alternatives785(true, actual, state, depth + 1) && current() != '\0')
            {
                next();
            }
            resettable resettable2(*this);
            cond3 = m_exclamationgreaterthen_780(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            if (!alternatives785(false, actual, state, depth + 1))
            {
                while (current() != '\0')
                {
                    resettable resettable4(*this);
                    if (alternatives785(true, actual, state, depth + 1))
                    {
                        resettable4.reset();
                        break;
                    }
                    next();
                }
            }
            resettable resettable2(*this);
            cond3 = m_exclamationgreaterthen_780(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_exclamationgreaterthen_788(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma>& actual, leaf::parsing::instance::pragma_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__exclamation_greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__exclamation_greater_then(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_pragma(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::pragma> fake;
    pragma_state state;
    if (!m_auto841_779(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while786_787(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_exclamationgreaterthen_788(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::pragma> leaf::parsing::instance::p_match_pragma(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::pragma>();
    std::shared_ptr<leaf::parsing::instance::pragma> fake;
    pragma_state state;
    resettable resettable2(*this);
    if (m_auto841_779(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_auto841_779(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (while786_787(true, fake, state, depth + 1))
    {
        resettable3.reset();
        while786_787(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (m_exclamationgreaterthen_788(true, fake, state, depth + 1))
    {
        resettable4.reset();
        m_exclamationgreaterthen_788(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_align_789(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma_align>& actual, leaf::parsing::instance::pragma_align_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__align(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__align(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_integerbinary_790(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma_align>& actual, leaf::parsing::instance::pragma_align_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer_binary(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_integer_binary(depth + 1).value(), tok::INTEGER_BINARY);
    actual->bytes = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integerhex_791(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma_align>& actual, leaf::parsing::instance::pragma_align_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer_hex(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_integer_hex(depth + 1).value(), tok::INTEGER_HEX);
    actual->bytes = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integer_792(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma_align>& actual, leaf::parsing::instance::pragma_align_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_integer(depth + 1).value(), tok::INTEGER);
    actual->bytes = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives793(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma_align>& actual, leaf::parsing::instance::pragma_align_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_integerbinary_790(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integerbinary_790(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integerhex_791(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integerhex_791(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integer_792(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integer_792(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_pragma_align(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::pragma_align> fake;
    pragma_align_state state;
    if (!m_align_789(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!alternatives793(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::pragma_align> leaf::parsing::instance::p_match_pragma_align(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::pragma_align>();
    std::shared_ptr<leaf::parsing::instance::pragma_align> fake;
    pragma_align_state state;
    resettable resettable2(*this);
    if (m_align_789(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_align_789(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (alternatives793(true, fake, state, depth + 1))
    {
        resettable3.reset();
        alternatives793(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_size_794(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma_size>& actual, leaf::parsing::instance::pragma_size_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__size(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__size(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_integerbinary_795(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma_size>& actual, leaf::parsing::instance::pragma_size_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer_binary(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_integer_binary(depth + 1).value(), tok::INTEGER_BINARY);
    actual->bytes = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integerhex_796(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma_size>& actual, leaf::parsing::instance::pragma_size_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer_hex(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_integer_hex(depth + 1).value(), tok::INTEGER_HEX);
    actual->bytes = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_integer_797(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma_size>& actual, leaf::parsing::instance::pragma_size_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_integer(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_integer(depth + 1).value(), tok::INTEGER);
    actual->bytes = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives798(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma_size>& actual, leaf::parsing::instance::pragma_size_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_integerbinary_795(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integerbinary_795(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integerhex_796(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integerhex_796(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_integer_797(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_integer_797(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::p_can_pragma_size(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::pragma_size> fake;
    pragma_size_state state;
    if (!m_size_794(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!alternatives798(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::pragma_size> leaf::parsing::instance::p_match_pragma_size(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::pragma_size>();
    std::shared_ptr<leaf::parsing::instance::pragma_size> fake;
    pragma_size_state state;
    resettable resettable2(*this);
    if (m_size_794(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_size_794(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (alternatives798(true, fake, state, depth + 1))
    {
        resettable3.reset();
        alternatives798(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_disable_799(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma_disable>& actual, leaf::parsing::instance::pragma_disable_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__disable(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__disable(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_ident_800(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma_disable>& actual, leaf::parsing::instance::pragma_disable_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->code = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_pragma_disable(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::pragma_disable> fake;
    pragma_disable_state state;
    if (!m_disable_799(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_ident_800(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::pragma_disable> leaf::parsing::instance::p_match_pragma_disable(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::pragma_disable>();
    std::shared_ptr<leaf::parsing::instance::pragma_disable> fake;
    pragma_disable_state state;
    resettable resettable2(*this);
    if (m_disable_799(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_disable_799(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_ident_800(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_ident_800(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_enable_801(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma_enable>& actual, leaf::parsing::instance::pragma_enable_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__enable(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__enable(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_ident_802(bool is_can, std::shared_ptr<leaf::parsing::instance::pragma_enable>& actual, leaf::parsing::instance::pragma_enable_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->code = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_pragma_enable(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::pragma_enable> fake;
    pragma_enable_state state;
    if (!m_enable_801(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_ident_802(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::pragma_enable> leaf::parsing::instance::p_match_pragma_enable(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::pragma_enable>();
    std::shared_ptr<leaf::parsing::instance::pragma_enable> fake;
    pragma_enable_state state;
    resettable resettable2(*this);
    if (m_enable_801(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_enable_801(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_ident_802(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_ident_802(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_ident_803(bool is_can, std::shared_ptr<leaf::parsing::instance::template_usage_item>& actual, leaf::parsing::instance::template_usage_item_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->key = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_template_usage_item(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::template_usage_item> fake;
    template_usage_item_state state;
    if (!m_ident_803(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::template_usage_item> leaf::parsing::instance::p_match_template_usage_item(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::template_usage_item>();
    std::shared_ptr<leaf::parsing::instance::template_usage_item> fake;
    template_usage_item_state state;
    resettable resettable2(*this);
    if (m_ident_803(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_ident_803(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_lessthen_804(bool is_can, std::shared_ptr<leaf::parsing::instance::template_usage>& actual, leaf::parsing::instance::template_usage_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__less_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__less_then(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_templateusageitem_805(bool is_can, std::shared_ptr<leaf::parsing::instance::template_usage>& actual, leaf::parsing::instance::template_usage_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_usage_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_usage_item(depth + 1);
    actual->items.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_806(bool is_can, std::shared_ptr<leaf::parsing::instance::template_usage>& actual, leaf::parsing::instance::template_usage_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_templateusageitem_807(bool is_can, std::shared_ptr<leaf::parsing::instance::template_usage>& actual, leaf::parsing::instance::template_usage_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_template_usage_item(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_template_usage_item(depth + 1);
    actual->items.push_back(val6);
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives808(bool is_can, std::shared_ptr<leaf::parsing::instance::template_usage>& actual, leaf::parsing::instance::template_usage_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_comma_templateusageitem_807(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_templateusageitem_807(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (!is_can)
    {
        report("Failed to match one of the following: { ,, template-usage-item }", depth);
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while809_810(bool is_can, std::shared_ptr<leaf::parsing::instance::template_usage>& actual, leaf::parsing::instance::template_usage_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_comma_806(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            while (!alternatives808(true, actual, state, depth + 1) && current() != '\0')
            {
                next();
            }
            resettable resettable2(*this);
            cond3 = m_comma_806(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (!alternatives808(false, actual, state, depth + 1))
            {
                while (current() != '\0')
                {
                    resettable resettable4(*this);
                    if (alternatives808(true, actual, state, depth + 1))
                    {
                        resettable4.reset();
                        break;
                    }
                    next();
                }
            }
            resettable resettable2(*this);
            cond3 = m_comma_806(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_greaterthen_811(bool is_can, std::shared_ptr<leaf::parsing::instance::template_usage>& actual, leaf::parsing::instance::template_usage_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__greater_then(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_template_usage(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::template_usage> fake;
    template_usage_state state;
    if (!m_lessthen_804(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_templateusageitem_805(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while809_810(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_greaterthen_811(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::template_usage> leaf::parsing::instance::p_match_template_usage(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::template_usage>();
    std::shared_ptr<leaf::parsing::instance::template_usage> fake;
    template_usage_state state;
    resettable resettable2(*this);
    if (m_lessthen_804(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_lessthen_804(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (m_templateusageitem_805(true, fake, state, depth + 1))
    {
        resettable3.reset();
        m_templateusageitem_805(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (while809_810(true, fake, state, depth + 1))
    {
        resettable4.reset();
        while809_810(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (m_greaterthen_811(true, fake, state, depth + 1))
    {
        resettable5.reset();
        m_greaterthen_811(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_ident_812(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition_item_direct_type>& actual, leaf::parsing::instance::template_definition_item_direct_type_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->key = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::m_equal_813(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition_item_direct_type>& actual, leaf::parsing::instance::template_definition_item_direct_type_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__equal(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_equal_expvalue_814(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition_item_direct_type>& actual, leaf::parsing::instance::template_definition_item_direct_type_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_exp_value(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__equal(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_exp_value(depth + 1);
    actual->value = val6;
    skip();
    return true;
}
bool leaf::parsing::instance::if815_816(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition_item_direct_type>& actual, leaf::parsing::instance::template_definition_item_direct_type_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond2 = m_equal_813(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        if (cond2)
        {
            if (m_equal_expvalue_814(true, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: = ({ Token: = (=)}), $ref: exp-value (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
    else
    {
        if (cond2)
        {
            if (m_equal_expvalue_814(false, actual, state, depth + 1))
            {
                skip();
            }
            else if (is_can)
            {
                return false;
            }
            else
            {
                report("Failed to match { $ref: = ({ Token: = (=)}), $ref: exp-value (XCG.Parsing.Production) }", depth);
                return false;
            }
            return true;
        }
        return true;
    }
}
bool leaf::parsing::instance::p_can_template_definition_item_direct_type(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::template_definition_item_direct_type> fake;
    template_definition_item_direct_type_state state;
    if (!m_ident_812(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!if815_816(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::template_definition_item_direct_type> leaf::parsing::instance::p_match_template_definition_item_direct_type(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::template_definition_item_direct_type>();
    std::shared_ptr<leaf::parsing::instance::template_definition_item_direct_type> fake;
    template_definition_item_direct_type_state state;
    resettable resettable2(*this);
    if (m_ident_812(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_ident_812(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (if815_816(true, fake, state, depth + 1))
    {
        resettable3.reset();
        if815_816(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_identifier_ident_817(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition_item_identifier>& actual, leaf::parsing::instance::template_definition_item_identifier_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__identifier(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__identifier(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->key = val8;
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_template_definition_item_identifier(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::template_definition_item_identifier> fake;
    template_definition_item_identifier_state state;
    if (!m_identifier_ident_817(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::template_definition_item_identifier> leaf::parsing::instance::p_match_template_definition_item_identifier(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::template_definition_item_identifier>();
    std::shared_ptr<leaf::parsing::instance::template_definition_item_identifier> fake;
    template_definition_item_identifier_state state;
    resettable resettable2(*this);
    if (m_identifier_ident_817(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_identifier_ident_817(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_lessthen_818(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition>& actual, leaf::parsing::instance::template_definition_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__less_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__less_then(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinitionitemidentifier_819(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition>& actual, leaf::parsing::instance::template_definition_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition_item_identifier(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_definition_item_identifier(depth + 1);
    actual->items.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinitionitemdirecttype_820(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition>& actual, leaf::parsing::instance::template_definition_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition_item_direct_type(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_definition_item_direct_type(depth + 1);
    actual->items.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives821(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition>& actual, leaf::parsing::instance::template_definition_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_templatedefinitionitemidentifier_819(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_templatedefinitionitemidentifier_819(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_templatedefinitionitemdirecttype_820(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_templatedefinitionitemdirecttype_820(false, actual, state, depth + 1);
            return true;
        }
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::m_comma_822(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition>& actual, leaf::parsing::instance::template_definition_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinitionitemidentifier_823(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition>& actual, leaf::parsing::instance::template_definition_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition_item_identifier(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_definition_item_identifier(depth + 1);
    actual->items.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_templatedefinitionitemdirecttype_824(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition>& actual, leaf::parsing::instance::template_definition_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_definition_item_direct_type(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_definition_item_direct_type(depth + 1);
    actual->items.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_comma_825(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition>& actual, leaf::parsing::instance::template_definition_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__comma(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__comma(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives826(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition>& actual, leaf::parsing::instance::template_definition_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_templatedefinitionitemidentifier_823(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_templatedefinitionitemidentifier_823(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_templatedefinitionitemdirecttype_824(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_templatedefinitionitemdirecttype_824(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_comma_825(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_comma_825(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (!is_can)
    {
        report("Failed to match one of the following: { template-definition-item-identifier, template-definition-item-direct-type, , }", depth);
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while827_828(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition>& actual, leaf::parsing::instance::template_definition_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = m_comma_822(true, actual, state, depth + 1);
    resettable1.reset();
    if (is_can)
    {
        while (cond3 && current() != '\0')
        {
            while (!alternatives826(true, actual, state, depth + 1) && current() != '\0')
            {
                next();
            }
            resettable resettable2(*this);
            cond3 = m_comma_822(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (cond3 && current() != '\0')
        {
            if (!alternatives826(false, actual, state, depth + 1))
            {
                while (current() != '\0')
                {
                    resettable resettable4(*this);
                    if (alternatives826(true, actual, state, depth + 1))
                    {
                        resettable4.reset();
                        break;
                    }
                    next();
                }
            }
            resettable resettable2(*this);
            cond3 = m_comma_822(true, actual, state, depth + 1);
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::m_greaterthen_829(bool is_can, std::shared_ptr<leaf::parsing::instance::template_definition>& actual, leaf::parsing::instance::template_definition_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__greater_then(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::p_can_template_definition(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::template_definition> fake;
    template_definition_state state;
    if (!m_lessthen_818(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!alternatives821(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!while827_828(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    else if (!m_greaterthen_829(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::template_definition> leaf::parsing::instance::p_match_template_definition(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::template_definition>();
    std::shared_ptr<leaf::parsing::instance::template_definition> fake;
    template_definition_state state;
    resettable resettable2(*this);
    if (m_lessthen_818(true, fake, state, depth + 1))
    {
        resettable2.reset();
        m_lessthen_818(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable3(*this);
    if (alternatives821(true, fake, state, depth + 1))
    {
        resettable3.reset();
        alternatives821(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable4(*this);
    if (while827_828(true, fake, state, depth + 1))
    {
        resettable4.reset();
        while827_828(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    resettable resettable5(*this);
    if (m_greaterthen_829(true, fake, state, depth + 1))
    {
        resettable5.reset();
        m_greaterthen_829(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_using_830(bool is_can, std::shared_ptr<leaf::parsing::instance::main>& actual, leaf::parsing::instance::main_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_using_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_using_(depth + 1);
    actual->usings.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_pragma_831(bool is_can, std::shared_ptr<leaf::parsing::instance::main>& actual, leaf::parsing::instance::main_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_pragma(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_pragma(depth + 1);
    actual->pragmas.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_alias_832(bool is_can, std::shared_ptr<leaf::parsing::instance::main>& actual, leaf::parsing::instance::main_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_alias(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_alias(depth + 1);
    actual->aliases.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_class_833(bool is_can, std::shared_ptr<leaf::parsing::instance::main>& actual, leaf::parsing::instance::main_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_class_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_class_(depth + 1);
    actual->classes.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_contract_834(bool is_can, std::shared_ptr<leaf::parsing::instance::main>& actual, leaf::parsing::instance::main_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_contract(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_contract(depth + 1);
    actual->contract.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_conversion_835(bool is_can, std::shared_ptr<leaf::parsing::instance::main>& actual, leaf::parsing::instance::main_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_conversion(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_conversion(depth + 1);
    actual->conversions.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_field_836(bool is_can, std::shared_ptr<leaf::parsing::instance::main>& actual, leaf::parsing::instance::main_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_field(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_field(depth + 1);
    actual->fields.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_method_837(bool is_can, std::shared_ptr<leaf::parsing::instance::main>& actual, leaf::parsing::instance::main_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_method(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_method(depth + 1);
    actual->methods.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_namespace_838(bool is_can, std::shared_ptr<leaf::parsing::instance::main>& actual, leaf::parsing::instance::main_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_namespace_(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_namespace_(depth + 1);
    actual->namespaces.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::m_property_839(bool is_can, std::shared_ptr<leaf::parsing::instance::main>& actual, leaf::parsing::instance::main_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_property(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_property(depth + 1);
    actual->properties.push_back(val2);
    skip();
    return true;
}
bool leaf::parsing::instance::alternatives840(bool is_can, std::shared_ptr<leaf::parsing::instance::main>& actual, leaf::parsing::instance::main_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (m_using_830(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_using_830(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_pragma_831(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_pragma_831(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_alias_832(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_alias_832(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_class_833(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_class_833(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_contract_834(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_contract_834(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_conversion_835(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_conversion_835(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_field_836(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_field_836(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_method_837(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_method_837(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_namespace_838(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_namespace_838(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (m_property_839(true, actual, state, depth + 1))
    {
        if (is_can)
        {
            return true;
        }
        else
        {
            resettable1.reset();
            m_property_839(false, actual, state, depth + 1);
            return true;
        }
    }
    else if (!is_can)
    {
        report("Failed to match one of the following: { using, pragma, alias, class, contract, conversion, field, method, namespace, property }", depth);
    }
    resettable1.reset();
    return false;
}
bool leaf::parsing::instance::while841_842(bool is_can, std::shared_ptr<leaf::parsing::instance::main>& actual, leaf::parsing::instance::main_state& state, size_t depth)
{
    resettable resettable1(*this);
    bool cond3 = current() == '\0';
    resettable1.reset();
    if (is_can)
    {
        while (!cond3 && current() != '\0')
        {
            while (!alternatives840(true, actual, state, depth + 1) && current() != '\0')
            {
                next();
            }
            resettable resettable2(*this);
            cond3 = current() == '\0';
            resettable2.reset();
        }
        return true;
    }
    else
    {
        while (!cond3 && current() != '\0')
        {
            if (!alternatives840(false, actual, state, depth + 1))
            {
                while (current() != '\0')
                {
                    resettable resettable4(*this);
                    if (alternatives840(true, actual, state, depth + 1))
                    {
                        resettable4.reset();
                        break;
                    }
                    next();
                }
            }
            resettable resettable2(*this);
            cond3 = current() == '\0';
            resettable2.reset();
        }
        return true;
    }
}
bool leaf::parsing::instance::p_can_main(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::main> fake;
    main_state state;
    if (!while841_842(true, fake, state, depth + 1))
    {
        resettable1.reset();
        return false;
    }
    return true;
}
std::shared_ptr<leaf::parsing::instance::main> leaf::parsing::instance::p_match_main(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::main>();
    std::shared_ptr<leaf::parsing::instance::main> fake;
    main_state state;
    resettable resettable2(*this);
    if (while841_842(true, fake, state, depth + 1))
    {
        resettable2.reset();
        while841_842(false, actual, state, depth + 1);
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
    }
    return actual;
}
bool leaf::parsing::instance::m_expchain_dot_call_843(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_chain>& actual, leaf::parsing::instance::exp_chain_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__dot(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_call(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__dot(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_call(depth + 1);
    actual->chain_call = val6;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expchain_dot_ident_844(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_chain>& actual, leaf::parsing::instance::exp_chain_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__dot(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__dot(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->chain_access = val8;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expchain_minusgreaterthen_call_845(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_chain>& actual, leaf::parsing::instance::exp_chain_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__minus_greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_call(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l5 = token__minus_greater_then(depth + 1).value();
    for (;l5 != 0; l5--)
    {
        next();
    }
    skip();
    auto val6 = p_match_call(depth + 1);
    actual->indirection_call = val6;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expchain_minusgreaterthen_ident_846(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_chain>& actual, leaf::parsing::instance::exp_chain_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__minus_greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__minus_greater_then(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->indirection_access = val8;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expchain_squarebracketopen_expression_squarebracketclose_847(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_chain>& actual, leaf::parsing::instance::exp_chain_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__square_bracket_open(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_expression(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token__square_bracket_close(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__square_bracket_open(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = p_match_expression(depth + 1);
    actual->chain_indexer = val8;
    skip();
    auto l10 = token__square_bracket_close(depth + 1).value();
    for (;l10 != 0; l10--)
    {
        next();
    }
    skip();
    return true;
}
bool leaf::parsing::instance::m_expchain_templateusage_848(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_chain>& actual, leaf::parsing::instance::exp_chain_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_usage(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_usage(depth + 1);
    actual->chain_template = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expchainstart_849(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_chain>& actual, leaf::parsing::instance::exp_chain_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_exp_chain_start(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_exp_chain_start(depth + 1);
    actual->left = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::lr_can_exp_chain(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_chain> fake;
    exp_chain_state state;
    if (!m_expchainstart_849(true, fake, state, depth + 1))
    {
        return false;
    }
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expchain_dot_call_843(true, fake, state, depth + 1))
        {
        }
        else if (m_expchain_dot_ident_844(true, fake, state, depth + 1))
        {
        }
        else if (m_expchain_minusgreaterthen_call_845(true, fake, state, depth + 1))
        {
        }
        else if (m_expchain_minusgreaterthen_ident_846(true, fake, state, depth + 1))
        {
        }
        else if (m_expchain_squarebracketopen_expression_squarebracketclose_847(true, fake, state, depth + 1))
        {
        }
        else if (m_expchain_templateusage_848(true, fake, state, depth + 1))
        {
        }
        else
        {
            return true;
        }
    }
}
std::shared_ptr<leaf::parsing::instance::exp_chain> leaf::parsing::instance::lr_match_exp_chain(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_chain>();
    std::shared_ptr<leaf::parsing::instance::exp_chain> fake;
    exp_chain_state state;
    if (!m_expchainstart_849(false, actual, state, depth + 1))
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return {};
    }
    bool is_first2 = true;
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expchain_dot_call_843(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_chain>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expchain_dot_call_843(false, actual, state, depth + 1);
        }
        else if (m_expchain_dot_ident_844(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_chain>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expchain_dot_ident_844(false, actual, state, depth + 1);
        }
        else if (m_expchain_minusgreaterthen_call_845(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_chain>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expchain_minusgreaterthen_call_845(false, actual, state, depth + 1);
        }
        else if (m_expchain_minusgreaterthen_ident_846(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_chain>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expchain_minusgreaterthen_ident_846(false, actual, state, depth + 1);
        }
        else if (m_expchain_squarebracketopen_expression_squarebracketclose_847(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_chain>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expchain_squarebracketopen_expression_squarebracketclose_847(false, actual, state, depth + 1);
        }
        else if (m_expchain_templateusage_848(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_chain>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expchain_templateusage_848(false, actual, state, depth + 1);
        }
        else
        {
            resettable1.reset();
            break;
        }
    }
    return actual;
}
bool leaf::parsing::instance::m_expbinary4_lessthenlessthen_expunary_850(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_binary_4>& actual, leaf::parsing::instance::exp_binary_4_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__less_then_less_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_exp_unary(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__less_then_less_then(depth + 1).value(), tok::_LESS_THEN_LESS_THEN);
    actual->operator_ = val4;
    skip();
    auto val5 = p_match_exp_unary(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expbinary4_greaterthengreaterthen_expunary_851(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_binary_4>& actual, leaf::parsing::instance::exp_binary_4_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__greater_then_greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_exp_unary(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__greater_then_greater_then(depth + 1).value(), tok::_GREATER_THEN_GREATER_THEN);
    actual->operator_ = val4;
    skip();
    auto val5 = p_match_exp_unary(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expbinary4_lessthenlessthenlessthen_expunary_852(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_binary_4>& actual, leaf::parsing::instance::exp_binary_4_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__less_then_less_then_less_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_exp_unary(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__less_then_less_then_less_then(depth + 1).value(), tok::_LESS_THEN_LESS_THEN_LESS_THEN);
    actual->operator_ = val4;
    skip();
    auto val5 = p_match_exp_unary(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expbinary4_greaterthengreaterthengreaterthen_expunary_853(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_binary_4>& actual, leaf::parsing::instance::exp_binary_4_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__greater_then_greater_then_greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_exp_unary(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__greater_then_greater_then_greater_then(depth + 1).value(), tok::_GREATER_THEN_GREATER_THEN_GREATER_THEN);
    actual->operator_ = val4;
    skip();
    auto val5 = p_match_exp_unary(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expunary_854(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_binary_4>& actual, leaf::parsing::instance::exp_binary_4_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_exp_unary(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_exp_unary(depth + 1);
    actual->left = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::lr_can_exp_binary_4(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_binary_4> fake;
    exp_binary_4_state state;
    if (!m_expunary_854(true, fake, state, depth + 1))
    {
        return false;
    }
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expbinary4_lessthenlessthen_expunary_850(true, fake, state, depth + 1))
        {
        }
        else if (m_expbinary4_greaterthengreaterthen_expunary_851(true, fake, state, depth + 1))
        {
        }
        else if (m_expbinary4_lessthenlessthenlessthen_expunary_852(true, fake, state, depth + 1))
        {
        }
        else if (m_expbinary4_greaterthengreaterthengreaterthen_expunary_853(true, fake, state, depth + 1))
        {
        }
        else
        {
            return true;
        }
    }
}
std::shared_ptr<leaf::parsing::instance::exp_binary_4> leaf::parsing::instance::lr_match_exp_binary_4(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_binary_4>();
    std::shared_ptr<leaf::parsing::instance::exp_binary_4> fake;
    exp_binary_4_state state;
    if (!m_expunary_854(false, actual, state, depth + 1))
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return {};
    }
    bool is_first2 = true;
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expbinary4_lessthenlessthen_expunary_850(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_binary_4>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expbinary4_lessthenlessthen_expunary_850(false, actual, state, depth + 1);
        }
        else if (m_expbinary4_greaterthengreaterthen_expunary_851(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_binary_4>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expbinary4_greaterthengreaterthen_expunary_851(false, actual, state, depth + 1);
        }
        else if (m_expbinary4_lessthenlessthenlessthen_expunary_852(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_binary_4>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expbinary4_lessthenlessthenlessthen_expunary_852(false, actual, state, depth + 1);
        }
        else if (m_expbinary4_greaterthengreaterthengreaterthen_expunary_853(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_binary_4>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expbinary4_greaterthengreaterthengreaterthen_expunary_853(false, actual, state, depth + 1);
        }
        else
        {
            resettable1.reset();
            break;
        }
    }
    return actual;
}
bool leaf::parsing::instance::m_expbinary3_ampersand_expbinary4_855(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_binary_3>& actual, leaf::parsing::instance::exp_binary_3_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__ampersand(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_binary_4(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__ampersand(depth + 1).value(), tok::_AMPERSAND);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_binary_4(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expbinary4_856(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_binary_3>& actual, leaf::parsing::instance::exp_binary_3_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_exp_binary_4(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_exp_binary_4(depth + 1);
    actual->left = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::lr_can_exp_binary_3(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_binary_3> fake;
    exp_binary_3_state state;
    if (!m_expbinary4_856(true, fake, state, depth + 1))
    {
        return false;
    }
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expbinary3_ampersand_expbinary4_855(true, fake, state, depth + 1))
        {
        }
        else
        {
            return true;
        }
    }
}
std::shared_ptr<leaf::parsing::instance::exp_binary_3> leaf::parsing::instance::lr_match_exp_binary_3(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_binary_3>();
    std::shared_ptr<leaf::parsing::instance::exp_binary_3> fake;
    exp_binary_3_state state;
    if (!m_expbinary4_856(false, actual, state, depth + 1))
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return {};
    }
    bool is_first2 = true;
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expbinary3_ampersand_expbinary4_855(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_binary_3>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expbinary3_ampersand_expbinary4_855(false, actual, state, depth + 1);
        }
        else
        {
            resettable1.reset();
            break;
        }
    }
    return actual;
}
bool leaf::parsing::instance::m_expbinary2_circumflex_expbinary3_857(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_binary_2>& actual, leaf::parsing::instance::exp_binary_2_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__circumflex(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_binary_3(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__circumflex(depth + 1).value(), tok::_CIRCUMFLEX);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_binary_3(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expbinary3_858(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_binary_2>& actual, leaf::parsing::instance::exp_binary_2_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_exp_binary_3(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_exp_binary_3(depth + 1);
    actual->left = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::lr_can_exp_binary_2(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_binary_2> fake;
    exp_binary_2_state state;
    if (!m_expbinary3_858(true, fake, state, depth + 1))
    {
        return false;
    }
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expbinary2_circumflex_expbinary3_857(true, fake, state, depth + 1))
        {
        }
        else
        {
            return true;
        }
    }
}
std::shared_ptr<leaf::parsing::instance::exp_binary_2> leaf::parsing::instance::lr_match_exp_binary_2(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_binary_2>();
    std::shared_ptr<leaf::parsing::instance::exp_binary_2> fake;
    exp_binary_2_state state;
    if (!m_expbinary3_858(false, actual, state, depth + 1))
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return {};
    }
    bool is_first2 = true;
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expbinary2_circumflex_expbinary3_857(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_binary_2>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expbinary2_circumflex_expbinary3_857(false, actual, state, depth + 1);
        }
        else
        {
            resettable1.reset();
            break;
        }
    }
    return actual;
}
bool leaf::parsing::instance::m_expbinary1_verticalbar_expbinary2_859(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_binary_1>& actual, leaf::parsing::instance::exp_binary_1_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__vertical_bar(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_binary_2(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__vertical_bar(depth + 1).value(), tok::_VERTICAL_BAR);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_binary_2(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expbinary2_860(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_binary_1>& actual, leaf::parsing::instance::exp_binary_1_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_exp_binary_2(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_exp_binary_2(depth + 1);
    actual->left = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::lr_can_exp_binary_1(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_binary_1> fake;
    exp_binary_1_state state;
    if (!m_expbinary2_860(true, fake, state, depth + 1))
    {
        return false;
    }
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expbinary1_verticalbar_expbinary2_859(true, fake, state, depth + 1))
        {
        }
        else
        {
            return true;
        }
    }
}
std::shared_ptr<leaf::parsing::instance::exp_binary_1> leaf::parsing::instance::lr_match_exp_binary_1(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_binary_1>();
    std::shared_ptr<leaf::parsing::instance::exp_binary_1> fake;
    exp_binary_1_state state;
    if (!m_expbinary2_860(false, actual, state, depth + 1))
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return {};
    }
    bool is_first2 = true;
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expbinary1_verticalbar_expbinary2_859(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_binary_1>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expbinary1_verticalbar_expbinary2_859(false, actual, state, depth + 1);
        }
        else
        {
            resettable1.reset();
            break;
        }
    }
    return actual;
}
bool leaf::parsing::instance::m_exparithmetic2_slash_expbinary1_861(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_arithmetic_2>& actual, leaf::parsing::instance::exp_arithmetic_2_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_slash(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_binary_1(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_slash(depth + 1).value(), tok::SLASH);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_binary_1(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_exparithmetic2_star_expbinary1_862(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_arithmetic_2>& actual, leaf::parsing::instance::exp_arithmetic_2_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_star(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_binary_1(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_star(depth + 1).value(), tok::STAR);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_binary_1(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expbinary1_863(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_arithmetic_2>& actual, leaf::parsing::instance::exp_arithmetic_2_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_exp_binary_1(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_exp_binary_1(depth + 1);
    actual->left = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::lr_can_exp_arithmetic_2(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_arithmetic_2> fake;
    exp_arithmetic_2_state state;
    if (!m_expbinary1_863(true, fake, state, depth + 1))
    {
        return false;
    }
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_exparithmetic2_slash_expbinary1_861(true, fake, state, depth + 1))
        {
        }
        else if (m_exparithmetic2_star_expbinary1_862(true, fake, state, depth + 1))
        {
        }
        else
        {
            return true;
        }
    }
}
std::shared_ptr<leaf::parsing::instance::exp_arithmetic_2> leaf::parsing::instance::lr_match_exp_arithmetic_2(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_arithmetic_2>();
    std::shared_ptr<leaf::parsing::instance::exp_arithmetic_2> fake;
    exp_arithmetic_2_state state;
    if (!m_expbinary1_863(false, actual, state, depth + 1))
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return {};
    }
    bool is_first2 = true;
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_exparithmetic2_slash_expbinary1_861(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_arithmetic_2>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_exparithmetic2_slash_expbinary1_861(false, actual, state, depth + 1);
        }
        else if (m_exparithmetic2_star_expbinary1_862(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_arithmetic_2>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_exparithmetic2_star_expbinary1_862(false, actual, state, depth + 1);
        }
        else
        {
            resettable1.reset();
            break;
        }
    }
    return actual;
}
bool leaf::parsing::instance::m_exparithmetic1_plus_exparithmetic2_864(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_arithmetic_1>& actual, leaf::parsing::instance::exp_arithmetic_1_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_plus(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_arithmetic_2(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_plus(depth + 1).value(), tok::PLUS);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_arithmetic_2(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_exparithmetic1_minus_exparithmetic2_865(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_arithmetic_1>& actual, leaf::parsing::instance::exp_arithmetic_1_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_minus(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_arithmetic_2(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_minus(depth + 1).value(), tok::MINUS);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_arithmetic_2(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_exparithmetic2_866(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_arithmetic_1>& actual, leaf::parsing::instance::exp_arithmetic_1_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_exp_arithmetic_2(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_exp_arithmetic_2(depth + 1);
    actual->left = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::lr_can_exp_arithmetic_1(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_arithmetic_1> fake;
    exp_arithmetic_1_state state;
    if (!m_exparithmetic2_866(true, fake, state, depth + 1))
    {
        return false;
    }
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_exparithmetic1_plus_exparithmetic2_864(true, fake, state, depth + 1))
        {
        }
        else if (m_exparithmetic1_minus_exparithmetic2_865(true, fake, state, depth + 1))
        {
        }
        else
        {
            return true;
        }
    }
}
std::shared_ptr<leaf::parsing::instance::exp_arithmetic_1> leaf::parsing::instance::lr_match_exp_arithmetic_1(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_arithmetic_1>();
    std::shared_ptr<leaf::parsing::instance::exp_arithmetic_1> fake;
    exp_arithmetic_1_state state;
    if (!m_exparithmetic2_866(false, actual, state, depth + 1))
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return {};
    }
    bool is_first2 = true;
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_exparithmetic1_plus_exparithmetic2_864(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_arithmetic_1>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_exparithmetic1_plus_exparithmetic2_864(false, actual, state, depth + 1);
        }
        else if (m_exparithmetic1_minus_exparithmetic2_865(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_arithmetic_1>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_exparithmetic1_minus_exparithmetic2_865(false, actual, state, depth + 1);
        }
        else
        {
            resettable1.reset();
            break;
        }
    }
    return actual;
}
bool leaf::parsing::instance::m_expcompare_lessthenequal_exparithmetic1_867(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_compare>& actual, leaf::parsing::instance::exp_compare_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__less_then_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_arithmetic_1(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__less_then_equal(depth + 1).value(), tok::_LESS_THEN_EQUAL);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_arithmetic_1(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expcompare_lessthen_exparithmetic1_868(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_compare>& actual, leaf::parsing::instance::exp_compare_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__less_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_arithmetic_1(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__less_then(depth + 1).value(), tok::_LESS_THEN);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_arithmetic_1(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expcompare_greaterthenequal_exparithmetic1_869(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_compare>& actual, leaf::parsing::instance::exp_compare_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__greater_then_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_arithmetic_1(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__greater_then_equal(depth + 1).value(), tok::_GREATER_THEN_EQUAL);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_arithmetic_1(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expcompare_greaterthen_exparithmetic1_870(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_compare>& actual, leaf::parsing::instance::exp_compare_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__greater_then(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_arithmetic_1(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__greater_then(depth + 1).value(), tok::_GREATER_THEN);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_arithmetic_1(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_exparithmetic1_871(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_compare>& actual, leaf::parsing::instance::exp_compare_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_exp_arithmetic_1(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_exp_arithmetic_1(depth + 1);
    actual->left = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::lr_can_exp_compare(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_compare> fake;
    exp_compare_state state;
    if (!m_exparithmetic1_871(true, fake, state, depth + 1))
    {
        return false;
    }
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expcompare_lessthenequal_exparithmetic1_867(true, fake, state, depth + 1))
        {
        }
        else if (m_expcompare_lessthen_exparithmetic1_868(true, fake, state, depth + 1))
        {
        }
        else if (m_expcompare_greaterthenequal_exparithmetic1_869(true, fake, state, depth + 1))
        {
        }
        else if (m_expcompare_greaterthen_exparithmetic1_870(true, fake, state, depth + 1))
        {
        }
        else
        {
            return true;
        }
    }
}
std::shared_ptr<leaf::parsing::instance::exp_compare> leaf::parsing::instance::lr_match_exp_compare(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_compare>();
    std::shared_ptr<leaf::parsing::instance::exp_compare> fake;
    exp_compare_state state;
    if (!m_exparithmetic1_871(false, actual, state, depth + 1))
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return {};
    }
    bool is_first2 = true;
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expcompare_lessthenequal_exparithmetic1_867(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_compare>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expcompare_lessthenequal_exparithmetic1_867(false, actual, state, depth + 1);
        }
        else if (m_expcompare_lessthen_exparithmetic1_868(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_compare>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expcompare_lessthen_exparithmetic1_868(false, actual, state, depth + 1);
        }
        else if (m_expcompare_greaterthenequal_exparithmetic1_869(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_compare>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expcompare_greaterthenequal_exparithmetic1_869(false, actual, state, depth + 1);
        }
        else if (m_expcompare_greaterthen_exparithmetic1_870(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_compare>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expcompare_greaterthen_exparithmetic1_870(false, actual, state, depth + 1);
        }
        else
        {
            resettable1.reset();
            break;
        }
    }
    return actual;
}
bool leaf::parsing::instance::m_expequality_exclamationequal_expcompare_872(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_equality>& actual, leaf::parsing::instance::exp_equality_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__exclamation_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_compare(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__exclamation_equal(depth + 1).value(), tok::_EXCLAMATION_EQUAL);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_compare(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expequality_equalequalequal_expcompare_873(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_equality>& actual, leaf::parsing::instance::exp_equality_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__equal_equal_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_compare(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__equal_equal_equal(depth + 1).value(), tok::_EQUAL_EQUAL_EQUAL);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_compare(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expequality_equalequal_expcompare_874(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_equality>& actual, leaf::parsing::instance::exp_equality_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__equal_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_compare(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__equal_equal(depth + 1).value(), tok::_EQUAL_EQUAL);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_compare(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expequality_tildeequal_expcompare_875(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_equality>& actual, leaf::parsing::instance::exp_equality_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__tilde_equal(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_compare(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__tilde_equal(depth + 1).value(), tok::_TILDE_EQUAL);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_compare(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expcompare_876(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_equality>& actual, leaf::parsing::instance::exp_equality_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_exp_compare(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_exp_compare(depth + 1);
    actual->left = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::lr_can_exp_equality(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_equality> fake;
    exp_equality_state state;
    if (!m_expcompare_876(true, fake, state, depth + 1))
    {
        return false;
    }
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expequality_exclamationequal_expcompare_872(true, fake, state, depth + 1))
        {
        }
        else if (m_expequality_equalequalequal_expcompare_873(true, fake, state, depth + 1))
        {
        }
        else if (m_expequality_equalequal_expcompare_874(true, fake, state, depth + 1))
        {
        }
        else if (m_expequality_tildeequal_expcompare_875(true, fake, state, depth + 1))
        {
        }
        else
        {
            return true;
        }
    }
}
std::shared_ptr<leaf::parsing::instance::exp_equality> leaf::parsing::instance::lr_match_exp_equality(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_equality>();
    std::shared_ptr<leaf::parsing::instance::exp_equality> fake;
    exp_equality_state state;
    if (!m_expcompare_876(false, actual, state, depth + 1))
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return {};
    }
    bool is_first2 = true;
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expequality_exclamationequal_expcompare_872(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_equality>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expequality_exclamationequal_expcompare_872(false, actual, state, depth + 1);
        }
        else if (m_expequality_equalequalequal_expcompare_873(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_equality>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expequality_equalequalequal_expcompare_873(false, actual, state, depth + 1);
        }
        else if (m_expequality_equalequal_expcompare_874(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_equality>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expequality_equalequal_expcompare_874(false, actual, state, depth + 1);
        }
        else if (m_expequality_tildeequal_expcompare_875(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_equality>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expequality_tildeequal_expcompare_875(false, actual, state, depth + 1);
        }
        else
        {
            resettable1.reset();
            break;
        }
    }
    return actual;
}
bool leaf::parsing::instance::m_expand_ampersandampersand_expequality_877(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_and>& actual, leaf::parsing::instance::exp_and_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__ampersand_ampersand(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_equality(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__ampersand_ampersand(depth + 1).value(), tok::_AMPERSAND_AMPERSAND);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_equality(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expequality_878(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_and>& actual, leaf::parsing::instance::exp_and_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_exp_equality(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_exp_equality(depth + 1);
    actual->left = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::lr_can_exp_and(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_and> fake;
    exp_and_state state;
    if (!m_expequality_878(true, fake, state, depth + 1))
    {
        return false;
    }
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expand_ampersandampersand_expequality_877(true, fake, state, depth + 1))
        {
        }
        else
        {
            return true;
        }
    }
}
std::shared_ptr<leaf::parsing::instance::exp_and> leaf::parsing::instance::lr_match_exp_and(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_and>();
    std::shared_ptr<leaf::parsing::instance::exp_and> fake;
    exp_and_state state;
    if (!m_expequality_878(false, actual, state, depth + 1))
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return {};
    }
    bool is_first2 = true;
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expand_ampersandampersand_expequality_877(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_and>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expand_ampersandampersand_expequality_877(false, actual, state, depth + 1);
        }
        else
        {
            resettable1.reset();
            break;
        }
    }
    return actual;
}
bool leaf::parsing::instance::m_expor_verticalbarverticalbar_expand_879(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_or>& actual, leaf::parsing::instance::exp_or_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__vertical_bar_vertical_bar(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (lr_can_exp_and(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token__vertical_bar_vertical_bar(depth + 1).value(), tok::_VERTICAL_BAR_VERTICAL_BAR);
    actual->operator_ = val4;
    skip();
    auto val5 = lr_match_exp_and(depth + 1);
    actual->right = val5;
    skip();
    return true;
}
bool leaf::parsing::instance::m_expand_880(bool is_can, std::shared_ptr<leaf::parsing::instance::exp_or>& actual, leaf::parsing::instance::exp_or_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (lr_can_exp_and(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = lr_match_exp_and(depth + 1);
    actual->left = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::lr_can_exp_or(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::exp_or> fake;
    exp_or_state state;
    if (!m_expand_880(true, fake, state, depth + 1))
    {
        return false;
    }
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expor_verticalbarverticalbar_expand_879(true, fake, state, depth + 1))
        {
        }
        else
        {
            return true;
        }
    }
}
std::shared_ptr<leaf::parsing::instance::exp_or> leaf::parsing::instance::lr_match_exp_or(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::exp_or>();
    std::shared_ptr<leaf::parsing::instance::exp_or> fake;
    exp_or_state state;
    if (!m_expand_880(false, actual, state, depth + 1))
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return {};
    }
    bool is_first2 = true;
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_expor_verticalbarverticalbar_expand_879(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::exp_or>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_expor_verticalbarverticalbar_expand_879(false, actual, state, depth + 1);
        }
        else
        {
            resettable1.reset();
            break;
        }
    }
    return actual;
}
bool leaf::parsing::instance::m_identnavigation_coloncolon_ident_881(bool is_can, std::shared_ptr<leaf::parsing::instance::ident_navigation>& actual, leaf::parsing::instance::ident_navigation_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__colon_colon(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__colon_colon(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->right = val8;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ident_882(bool is_can, std::shared_ptr<leaf::parsing::instance::ident_navigation>& actual, leaf::parsing::instance::ident_navigation_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->left = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::lr_can_ident_navigation(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::ident_navigation> fake;
    ident_navigation_state state;
    if (!m_ident_882(true, fake, state, depth + 1))
    {
        return false;
    }
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_identnavigation_coloncolon_ident_881(true, fake, state, depth + 1))
        {
        }
        else
        {
            return true;
        }
    }
}
std::shared_ptr<leaf::parsing::instance::ident_navigation> leaf::parsing::instance::lr_match_ident_navigation(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::ident_navigation>();
    std::shared_ptr<leaf::parsing::instance::ident_navigation> fake;
    ident_navigation_state state;
    if (!m_ident_882(false, actual, state, depth + 1))
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return {};
    }
    bool is_first2 = true;
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_identnavigation_coloncolon_ident_881(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::ident_navigation>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_identnavigation_coloncolon_ident_881(false, actual, state, depth + 1);
        }
        else
        {
            resettable1.reset();
            break;
        }
    }
    return actual;
}
bool leaf::parsing::instance::m_typenavigation_coloncolon_ident_templateusage_883(bool is_can, std::shared_ptr<leaf::parsing::instance::type_navigation>& actual, leaf::parsing::instance::type_navigation_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__colon_colon(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (p_can_template_usage(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__colon_colon(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->right = val8;
    skip();
    auto val9 = p_match_template_usage(depth + 1);
    actual->template_ = val9;
    skip();
    return true;
}
bool leaf::parsing::instance::m_typenavigation_coloncolon_ident_884(bool is_can, std::shared_ptr<leaf::parsing::instance::type_navigation>& actual, leaf::parsing::instance::type_navigation_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token__colon_colon(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    auto l4 = token_ident(depth + 1);
    if (l4.has_value())
    {
        for (auto i5 = l4.value(); i5 != 0; i5--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto l7 = token__colon_colon(depth + 1).value();
    for (;l7 != 0; l7--)
    {
        next();
    }
    skip();
    auto val8 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->right = val8;
    skip();
    return true;
}
bool leaf::parsing::instance::m_typenavigation_templateusage_885(bool is_can, std::shared_ptr<leaf::parsing::instance::type_navigation>& actual, leaf::parsing::instance::type_navigation_state& state, size_t depth)
{
    resettable resettable1(*this);
    if (p_can_template_usage(depth + 1))
    {
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val2 = p_match_template_usage(depth + 1);
    actual->template_ = val2;
    skip();
    return true;
}
bool leaf::parsing::instance::m_ident_886(bool is_can, std::shared_ptr<leaf::parsing::instance::type_navigation>& actual, leaf::parsing::instance::type_navigation_state& state, size_t depth)
{
    resettable resettable1(*this);
    auto l2 = token_ident(depth + 1);
    if (l2.has_value())
    {
        for (auto i3 = l2.value(); i3 != 0; i3--)
        {
            next();
        }
        skip();
    }
    else if (is_can)
    {
        resettable1.reset();
        return false;
    }
    else
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return false;
    }
    if (is_can)
    {
        return true;
    }
    resettable1.reset();
    auto val4 = create_token(token_ident(depth + 1).value(), tok::IDENT);
    actual->left = val4;
    skip();
    return true;
}
bool leaf::parsing::instance::lr_can_type_navigation(size_t depth)
{
    resettable resettable1(*this);
    std::shared_ptr<leaf::parsing::instance::type_navigation> fake;
    type_navigation_state state;
    if (!m_ident_886(true, fake, state, depth + 1))
    {
        return false;
    }
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_typenavigation_coloncolon_ident_templateusage_883(true, fake, state, depth + 1))
        {
        }
        else if (m_typenavigation_coloncolon_ident_884(true, fake, state, depth + 1))
        {
        }
        else if (m_typenavigation_templateusage_885(true, fake, state, depth + 1))
        {
        }
        else
        {
            return true;
        }
    }
}
std::shared_ptr<leaf::parsing::instance::type_navigation> leaf::parsing::instance::lr_match_type_navigation(size_t depth)
{
    auto actual = std::make_shared<leaf::parsing::instance::type_navigation>();
    std::shared_ptr<leaf::parsing::instance::type_navigation> fake;
    type_navigation_state state;
    if (!m_ident_886(false, actual, state, depth + 1))
    {
        report("Something moved wrong (todo: improve error messages)", depth);
        return {};
    }
    bool is_first2 = true;
    while (true)
    {
        skip();
        resettable resettable1(*this);
        if (m_typenavigation_coloncolon_ident_templateusage_883(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::type_navigation>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_typenavigation_coloncolon_ident_templateusage_883(false, actual, state, depth + 1);
        }
        else if (m_typenavigation_coloncolon_ident_884(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::type_navigation>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_typenavigation_coloncolon_ident_884(false, actual, state, depth + 1);
        }
        else if (m_typenavigation_templateusage_885(true, fake, state, depth + 1))
        {
            resettable1.reset();
            if (!is_first2)
            {
                auto tmp_actual3 = actual;
                actual = std::make_shared<leaf::parsing::instance::type_navigation>();
                actual->left = tmp_actual3;
            }
            is_first2 = false;
            m_typenavigation_templateusage_885(false, actual, state, depth + 1);
        }
        else
        {
            resettable1.reset();
            break;
        }
    }
    return actual;
}
void leaf::parsing::instance::skip()
{
    while (m_contents.length() > m_offset)
    {
        char c = m_contents[m_offset];
        switch (c)
        {
            case '\r':
            case '\t':
            case ' ': m_column++; m_offset++; break;
            case '\n': m_line++; m_column = 1; m_offset++; break;
            default:
            {
                bool wasMatched1 = false;
                if (m_contents.length() > m_offset + 2 && m_contents[m_offset + 0] == '/' && m_contents[m_offset + 1] == '/')
                {
                    wasMatched1 = true;
                    for (size_t i2 = 0; i2 < 2; i2++)
                    {
                        switch (m_contents[m_offset])
                        {
                            case '\r':
                            case '\t':
                            case ' ': m_column++; m_offset++; break;
                            case '\n': m_line++; m_column = 1; m_offset++; break;
                            default: m_column++; m_offset++; break;
                        }
                    }
                    while (m_contents.length() > m_offset + 2 && !(m_contents[m_offset + 0] == '\n'))
                    {
                        switch (m_contents[m_offset])
                        {
                            case '\r':
                            case '\t':
                            case ' ': m_column++; m_offset++; break;
                            case '\n': m_line++; m_column = 1; m_offset++; break;
                            default: m_column++; m_offset++; break;
                        }
                    }
                    for (size_t i2 = 0; i2 < 1; i2++)
                    {
                        switch (m_contents[m_offset])
                        {
                            case '\r':
                            case '\t':
                            case ' ': m_column++; m_offset++; break;
                            case '\n': m_line++; m_column = 1; m_offset++; break;
                            default: m_column++; m_offset++; break;
                        }
                    }
                }
                if (m_contents.length() > m_offset + 2 && m_contents[m_offset + 0] == '/' && m_contents[m_offset + 1] == '*')
                {
                    wasMatched1 = true;
                    for (size_t i3 = 0; i3 < 2; i3++)
                    {
                        switch (m_contents[m_offset])
                        {
                            case '\r':
                            case '\t':
                            case ' ': m_column++; m_offset++; break;
                            case '\n': m_line++; m_column = 1; m_offset++; break;
                            default: m_column++; m_offset++; break;
                        }
                    }
                    while (m_contents.length() > m_offset + 2 && !(m_contents[m_offset + 0] == '*' && m_contents[m_offset + 1] == '/'))
                    {
                        switch (m_contents[m_offset])
                        {
                            case '\r':
                            case '\t':
                            case ' ': m_column++; m_offset++; break;
                            case '\n': m_line++; m_column = 1; m_offset++; break;
                            default: m_column++; m_offset++; break;
                        }
                    }
                    for (size_t i3 = 0; i3 < 2; i3++)
                    {
                        switch (m_contents[m_offset])
                        {
                            case '\r':
                            case '\t':
                            case ' ': m_column++; m_offset++; break;
                            case '\n': m_line++; m_column = 1; m_offset++; break;
                            default: m_column++; m_offset++; break;
                        }
                    }
                }
                if (!wasMatched1)
                {
                    return;
                }
            }
        }
    }
}
void leaf::parsing::instance::report(std::string_view message, size_t depth)
{
    std::cout << "[L" << m_line << "]" << "[C" << m_column << "] " << message << "\n";
}
leaf::parsing::instance::token leaf::parsing::instance::create_token(size_t length, tok type)
{
    token t;
    t.file = m_file;
    t.line = m_line;
    t.column = m_column;
    t.offset = m_offset;
    t.length = length;
    t.type = type;
    for (auto i = 0; i < length; i++)
    {
        next();
    }
    return t;
}
std::shared_ptr<leaf::parsing::instance::main> leaf::parsing::instance::parse()
{
    skip();
    return p_match_main(0);
}
